version: 2.1
orbs:
  slack: circleci/slack@5.1.1

executors:
  ec2-executor:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2
  ec2-executor_2:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2-2
  ec2-executor_3:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2-3
  ec2-executor_4:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2-4
  ec2-executor_5:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2-5
  ec2-executor_6:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2-6
  ec2-executor_7:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2-7
  ec2-executor_8:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2-8
  ec2-executor_9:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2-9
  ec2-executor_10:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2-10
  ec2-executor_11:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2-11
  ec2-executor_12:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2-12
  ec2-executor_13:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2-13
  ec2-executor_14:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2-14
  ec2-executor_15:
    machine:
      enabled: true
      resource_class: getcodifyai/runner-on-ec2-15

commands:
  install-dependencies:
    steps:
      - run:
          name: Clean up disk
          command: |
            echo "Disk usage BEFORE aggressive cleanup:"
            df -h

            # Remove old Docker images/containers (if Docker is used)
            if command -v docker >/dev/null; then
            docker system prune -af || true
            docker volume prune -f || true
            fi

            # Remove all Maven target directories
            find ~ -type d -name "target" -exec rm -rf {} + || true

            # Clean apt cache and orphaned packages
            sudo apt-get clean
            sudo apt-get autoremove -y

            # Remove large log files
            sudo find /var/log -type f -name "*.log" -delete || true

            echo "Cleaning up old project-jobN dirs..."
            for i in $(seq 1 23); do
            rm -rf ~/project-job$i || true
            done

            # Remove unused files in /tmp and /var/tmp
            sudo rm -rf /tmp/* /var/tmp/* || true

            # Remove old workspaces and Maven repo
            sudo rm -rf ~/.m2/repository || true
            sudo rm -rf ~/workspace || true

            echo "Disk usage AFTER aggressive cleanup:"
            df -h
            echo "Top 20 largest directories under /:"
            sudo du -hxd1 / | sort -hr | head -20
            echo "Top 20 largest directories under ~/:"
            du -hxd1 ~ | sort -hr | head -20

            #Crash dumps:
            sudo rm -f /var/crash/_opt_google_chrome_chrome.1002.crash

            #Chrome cache and temp files
            sudo rm -rf /tmp/.org.chromium.Chromium.*

            #Old Snap packages (keep only the latest):
            sudo rm -f /var/lib/snapd/snaps/core22_1981.snap
            sudo rm -f /var/lib/snapd/snaps/core22_2045.snap
            sudo rm -f /var/lib/snapd/snaps/snapd_24505.snap
            sudo rm -f /var/lib/snapd/snaps/snapd_24792.snap
            sudo rm -f /var/lib/snapd/snaps/amazon-ssm-agent_11320.snap

            #Apt cache:
            sudo apt-get clean
            sudo rm -f /var/cache/apt/pkgcache.bin /var/cache/apt/srcpkgcache.bin

            #Old CircleCI agent binaries:
            #sudo rm -rf /home/circleci/.local/libexec/circleci/linux_amd64_*

            #Large log files (optional):
            sudo truncate -s 0 /var/log/syslog

            echo "Disk usage AFTER aggressive cleanup:1111111"
            df -h

      - run:
          name: Check and Install Java 21 if not exists
          command: |
            if ! java -version 2>&1 | grep '21' >/dev/null; then
              echo "Java 21 not found. Installing..."
              sudo apt-get update && sudo apt-get install -y wget
              wget -q https://download.java.net/java/GA/jdk21.0.1/415e3f918a1f4062a0074a2794853d0d/12/GPL/openjdk-21.0.1_linux-x64_bin.tar.gz
              sudo mkdir -p /usr/lib/jvm
              sudo tar zxvf openjdk-21.0.1_linux-x64_bin.tar.gz -C /usr/lib/jvm
              sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-21.0.1/bin/java 2100
              sudo update-alternatives --set java /usr/lib/jvm/jdk-21.0.1/bin/java
              echo 'export PATH="/usr/lib/jvm/jdk-21.0.1/bin:$PATH"' >> $BASH_ENV
              echo 'export JAVA_HOME="/usr/lib/jvm/jdk-21.0.1"' >> $BASH_ENV
              source $BASH_ENV
            else
              echo "Java 21 is already installed."
              java -version
            fi

      - run:
          name: Check and Install Maven if not exists
          command: |
            if ! command -v mvn >/dev/null; then
              echo "Maven not found. Installing..."
              sudo apt-get install -y maven
            else
              echo "Maven already installed:"
              mvn -version
            fi

      - run:
          name: Check and Install Chrome and ChromeDriver if not exists
          command: |
            if ! command -v google-chrome >/dev/null; then
              echo "Chrome not found. Installing..."
              sudo rm -f /etc/apt/sources.list.d/google-chrome.list
              echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list > /dev/null
              wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
              sudo apt-get update
              sudo apt-get install -y google-chrome-stable
            else
              echo "Chrome already installed:"
              google-chrome --version
            fi
            # Install ChromeDriver if not exists
            if ! command -v chromedriver >/dev/null; then
              echo "ChromeDriver not found. Installing..."
              CHROME_VERSION=$(google-chrome --version | cut -d " " -f3 | cut -d "." -f1)
              CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}")
              wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
              sudo unzip /tmp/chromedriver.zip -d /usr/local/bin/
              sudo chmod +x /usr/local/bin/chromedriver
              rm /tmp/chromedriver.zip
              chromedriver --version
            else
              echo "ChromeDriver already installed:"
              chromedriver --version
            fi


jobs:
  install-common-dependencies:
    executor: ec2-executor
    steps:
      - checkout
      - install-dependencies

  nightly-build-and-test-1:
    executor: ec2-executor_7
    working_directory: ~/project-job1
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build and run nightly tests 1
          command: mvn clean test -Dsurefire.suiteXmlFiles=regression1.xml -Drun.headless=true -Dtest.env=uat || true
      - store_artifacts:
          path: target/surefire-reports
          destination: nightly-build-and-test-artifacts-1
      - run:
          name: Verify Test Results Exist
          command: ls -R target/surefire-reports || echo "Test results missing!"
      - run:
          name: Copy test results to workspace
          command: |
            mkdir -p ~/workspace
            PART_NAME="Part_One"
            for file in target/surefire-reports/TEST-*.xml; do
              [ -f "$file" ] && cp "$file" ~/workspace/${PART_NAME}_nightly-build-and-test-1_$(basename "$file")
            done
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - Part_One_nightly-build-and-test-1_TEST-*.xml

  nightly-build-and-test-2:
    executor: ec2-executor_6
    working_directory: ~/project-job2
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build and run nightly tests 2
          command: mvn clean test -Dsurefire.suiteXmlFiles=regression2.xml -Drun.headless=true -Dtest.env=uat || true
      - store_artifacts:
          path: target/surefire-reports
          destination: nightly-build-and-test-artifacts-2
      - run:
          name: Verify Test Results Exist
          command: ls -R target/surefire-reports || echo "Test results missing!"
      - run:
          name: Copy test results to workspace
          command: |
            mkdir -p ~/workspace
            PART_NAME="Part_Two"
            for file in target/surefire-reports/TEST-*.xml; do
              [ -f "$file" ] && cp "$file" ~/workspace/${PART_NAME}_nightly-build-and-test-2_$(basename "$file")
            done
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - Part_Two_nightly-build-and-test-2_TEST-*.xml

  nightly-build-and-test-3:
    executor: ec2-executor_2
    working_directory: ~/project-job3
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build and run nightly tests 3
          command: mvn clean test -Dsurefire.suiteXmlFiles=regression3.xml -Drun.headless=true -Dtest.env=uat || true
      - store_artifacts:
          path: target/surefire-reports
          destination: nightly-build-and-test-artifacts-3
      - run:
          name: Verify Test Results Exist
          command: ls -R target/surefire-reports || echo "Test results missing!"
      - run:
          name: Copy test results to workspace
          command: |
            mkdir -p ~/workspace
            PART_NAME="Part_Three"
            for file in target/surefire-reports/TEST-*.xml; do
              [ -f "$file" ] && cp "$file" ~/workspace/${PART_NAME}_nightly-build-and-test-3_$(basename "$file")
            done
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - Part_Three_nightly-build-and-test-3_TEST-*.xml

  nightly-build-and-test-4:
    executor: ec2-executor_4
    working_directory: ~/project-job4
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build and run nightly tests 4
          command: mvn clean test -Dsurefire.suiteXmlFiles=regression4.xml -Drun.headless=true -Dtest.env=uat || true
      - store_artifacts:
          path: target/surefire-reports
          destination: nightly-build-and-test-artifacts-4
      - run:
          name: Verify Test Results Exist
          command: ls -R target/surefire-reports || echo "Test results missing!"
      - run:
          name: Copy test results to workspace
          command: |
            mkdir -p ~/workspace
            PART_NAME="Part_Four"
            for file in target/surefire-reports/TEST-*.xml; do
              [ -f "$file" ] && cp "$file" ~/workspace/${PART_NAME}_nightly-build-and-test-4_$(basename "$file")
            done
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - Part_Four_nightly-build-and-test-4_TEST-*.xml

  nightly-build-and-test-5:
    executor: ec2-executor
    working_directory: ~/project-job5
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build and run nightly tests 5
          command: mvn clean test -Dsurefire.suiteXmlFiles=regression5.xml -Drun.headless=true -Dtest.env=uat || true
      - store_artifacts:
          path: target/surefire-reports
          destination: nightly-build-and-test-artifacts-5
      - run:
          name: Verify Test Results Exist
          command: ls -R target/surefire-reports || echo "Test results missing!"
      - run:
          name: Copy test results to workspace
          command: |
            mkdir -p ~/workspace
            PART_NAME="Part_Five" 
            for file in target/surefire-reports/TEST-*.xml; do
              [ -f "$file" ] && cp "$file" ~/workspace/${PART_NAME}_nightly-build-and-test-5_$(basename "$file")
            done
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - Part_Five_nightly-build-and-test-5_TEST-*.xml

  nightly-build-and-test-6:
    executor: ec2-executor_11
    working_directory: ~/project-job6
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build and run nightly tests 6
          command: mvn clean test -Dsurefire.suiteXmlFiles=regression6.xml -Drun.headless=true -Dtest.env=uat || true
      - store_artifacts:
          path: target/surefire-reports
          destination: nightly-build-and-test-artifacts-6
      - run:
          name: Verify Test Results Exist
          command: ls -R target/surefire-reports || echo "Test results missing!"
      - run:
          name: Copy test results to workspace
          command: |
            mkdir -p ~/workspace
            PART_NAME="Part_Six"
            for file in target/surefire-reports/TEST-*.xml; do
              [ -f "$file" ] && cp "$file" ~/workspace/${PART_NAME}_nightly-build-and-test-6_$(basename "$file")
            done
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - Part_Six_nightly-build-and-test-6_TEST-*.xml

  nightly-build-and-test-7:
    executor: ec2-executor_5
    working_directory: ~/project-job7
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build and run nightly tests 7
          command: mvn clean test -Dsurefire.suiteXmlFiles=regression7.xml -Drun.headless=true -Dtest.env=uat || true
      - store_artifacts:
          path: target/surefire-reports
          destination: nightly-build-and-test-artifacts-7
      - run:
          name: Verify Test Results Exist
          command: ls -R target/surefire-reports || echo "Test results missing!"
      - run:
          name: Copy test results to workspace
          command: |
            mkdir -p ~/workspace
            PART_NAME="Part_Seven"
            for file in target/surefire-reports/TEST-*.xml; do
              [ -f "$file" ] && cp "$file" ~/workspace/${PART_NAME}_nightly-build-and-test-7_$(basename "$file")
            done
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - Part_Seven_nightly-build-and-test-7_TEST-*.xml

  nightly-build-and-test-8:
    executor: ec2-executor_9
    working_directory: ~/project-job8
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build and run nightly tests 8
          command: mvn clean test -Dsurefire.suiteXmlFiles=regression8.xml -Drun.headless=true -Dtest.env=uat || true
      - store_artifacts:
          path: target/surefire-reports
          destination: nightly-build-and-test-artifacts-8
      - run:
          name: Verify Test Results Exist
          command: ls -R target/surefire-reports || echo "Test results missing!"
      - run:
          name: Copy test results to workspace
          command: |
            mkdir -p ~/workspace
            PART_NAME="Part_Eight"
            for file in target/surefire-reports/TEST-*.xml; do
              [ -f "$file" ] && cp "$file" ~/workspace/${PART_NAME}_nightly-build-and-test-8_$(basename "$file")
            done
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - Part_Eight_nightly-build-and-test-8_TEST-*.xml

  nightly-build-and-test-9:
    executor: ec2-executor_3
    working_directory: ~/project-job9
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build and run nightly tests 9
          command: mvn clean test -Dsurefire.suiteXmlFiles=regression9.xml -Drun.headless=true -Dtest.env=uat || true
      - store_artifacts:
          path: target/surefire-reports
          destination: nightly-build-and-test-artifacts-9
      - run:
          name: Verify Test Results Exist
          command: ls -R target/surefire-reports || echo "Test results missing!"
      - run:
          name: Copy test results to workspace
          command: |
            mkdir -p ~/workspace
            PART_NAME="Part_Nine"
            for file in target/surefire-reports/TEST-*.xml; do
              [ -f "$file" ] && cp "$file" ~/workspace/${PART_NAME}_nightly-build-and-test-9_$(basename "$file")
            done
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - Part_Nine_nightly-build-and-test-9_TEST-*.xml

  nightly-build-and-test-10:
    executor: ec2-executor_12
    working_directory: ~/project-job10
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build and run nightly tests 10
          command: mvn clean test -Dsurefire.suiteXmlFiles=regression10.xml -Drun.headless=true -Dtest.env=uat || true
      - store_artifacts:
          path: target/surefire-reports
          destination: nightly-build-and-test-artifacts-10
      - run:
          name: Verify Test Results Exist
          command: ls -R target/surefire-reports || echo "Test results missing!"
      - run:
          name: Copy test results to workspace
          command: |
            mkdir -p ~/workspace
            PART_NAME="Part_Ten"
            for file in target/surefire-reports/TEST-*.xml; do
              [ -f "$file" ] && cp "$file" ~/workspace/${PART_NAME}_nightly-build-and-test-10_$(basename "$file")
            done
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - Part_Ten_nightly-build-and-test-10_TEST-*.xml

  nightly-build-and-test-11:
    executor: ec2-executor_8
    working_directory: ~/project-job11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build and run nightly tests 11
          command: mvn clean test -Dsurefire.suiteXmlFiles=regression11.xml -Drun.headless=true -Dtest.env=uat || true
      - store_artifacts:
          path: target/surefire-reports
          destination: nightly-build-and-test-artifacts-11
      - run:
          name: Verify Test Results Exist
          command: ls -R target/surefire-reports || echo "Test results missing!"
      - run:
          name: Copy test results to workspace
          command: |
            mkdir -p ~/workspace
            PART_NAME="Part_Eleven"
            for file in target/surefire-reports/TEST-*.xml; do
              [ -f "$file" ] && cp "$file" ~/workspace/${PART_NAME}_nightly-build-and-test-11_$(basename "$file")
            done
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - Part_Eleven_nightly-build-and-test-11_TEST-*.xml

  nightly-build-and-test-12:
    executor: ec2-executor_10
    working_directory: ~/project-job12
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build and run nightly tests 12
          command: mvn clean test -Dsurefire.suiteXmlFiles=regression12.xml -Drun.headless=true -Dtest.env=uat || true
      - store_artifacts:
          path: target/surefire-reports
          destination: nightly-build-and-test-artifacts-12
      - run:
          name: Verify Test Results Exist
          command: ls -R target/surefire-reports || echo "Test results missing!"
      - run:
          name: Copy test results to workspace
          command: |
            mkdir -p ~/workspace
            PART_NAME="Part_Twelve"
            for file in target/surefire-reports/TEST-*.xml; do
              [ -f "$file" ] && cp "$file" ~/workspace/${PART_NAME}_nightly-build-and-test-12_$(basename "$file")
            done
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - Part_Twelve_nightly-build-and-test-12_TEST-*.xml

  calculate-pass-fail-rate:
    executor: ec2-executor
    steps:
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Install bc for calculations
          command: |
            sudo apt-get update && sudo apt-get install -y bc
      - run:
          name: Debug Workspace Contents
          command: ls -R ~/workspace
      - run:
          name: Calculate Combined Pass/Fail Rate
          command: |
            echo "Processing test results from workspace..."
            find ~/workspace -name '*.xml' -print
            
            if [ -z "$(find ~/workspace -name '*.xml')" ]; then
               echo "No test result XMLs found! Exiting..."
               exit 1
            fi
            
            declare -A PART_TOTAL
            declare -A PART_PASS
            declare -A PART_FAIL
            
            TOTAL=0
            PASSED=0
            FAILED=0
            
            for FILE in ~/workspace/*.xml; do
            
              PART=$(basename "$FILE" | cut -d'_' -f1,2)
              PART=${PART:-Unknown}
              
              TESTS=$(grep -oP '(?<=tests=")[0-9]+' "$FILE" | head -1)
              FAILURES=$(grep -oP '(?<=failures=")[0-9]+' "$FILE" | head -1)
              ERRORS=$(grep -oP '(?<=errors=")[0-9]+' "$FILE" | head -1)
              SKIPPED=$(grep -oP '(?<=skipped=")[0-9]+' "$FILE" | head -1)
            
              TESTS=${TESTS:-0}
              FAILURES=${FAILURES:-0}
              ERRORS=${ERRORS:-0}
              SKIPPED=${SKIPPED:-0}
            
            # Ensure ACTUAL_TOTAL is not negative
              ACTUAL_TOTAL=$((TESTS - SKIPPED - (ERRORS/2)))
              if [ "$ACTUAL_TOTAL" -lt 0 ]; then
                ACTUAL_TOTAL=0
              fi
            
              if [ "$ACTUAL_TOTAL" -gt 0 ]; then
                PASSED_IN_FILE=$((ACTUAL_TOTAL - FAILURES - ERRORS))
              else
                PASSED_IN_FILE=0
              fi
            
              TOTAL=$((TOTAL + ACTUAL_TOTAL))
              PASSED=$((PASSED + PASSED_IN_FILE))
              FAILED=$((FAILED + FAILURES + (ERRORS/2)))
            
              PART_TOTAL[$PART]=$((PART_TOTAL[$PART] + ACTUAL_TOTAL))
              PART_PASS[$PART]=$((PART_PASS[$PART] + PASSED_IN_FILE))
              PART_FAIL[$PART]=$((PART_FAIL[$PART] + FAILURES + (ERRORS / 2)))
            
            done
            
            if [ "$TOTAL" -eq 0 ]; then
              echo "No tests found in any XML files! Exiting..."
              exit 1
            fi
            
            PASS_RATE=$(echo "scale=2; ($PASSED / $TOTAL) * 100.0" | bc)
            FAIL_RATE=$(echo "scale=2; ($FAILED / $TOTAL) * 100.0" | bc)
            
            echo "Total tests run: $TOTAL"
            echo "Passed: $PASSED"
            echo "Failed: $FAILED"
            echo "Combined Pass Rate: $PASS_RATE%"
            echo "Fail Rate: $FAIL_RATE%"
            
            echo "TOTAL=$TOTAL" >> $BASH_ENV
            echo "PASSED=$PASSED" >> $BASH_ENV
            echo "FAILED=$FAILED" >> $BASH_ENV
            echo "PASS_RATE=$PASS_RATE" >> $BASH_ENV
            echo "FAIL_RATE=$FAIL_RATE" >> $BASH_ENV
            source $BASH_ENV
            
            # Build PART breakdown summary
            PART_SUMMARY=""
              for part in "${!PART_TOTAL[@]}"; do
                total=${PART_TOTAL[$part]}
                pass=${PART_PASS[$part]}
                if [ "$total" -gt 0 ]; then
                  rate=$(echo "scale=2; ($pass / $total) * 100.0" | bc)
                else
                  rate="0.00"
                fi
                PART_SUMMARY+=" • *$part*: ✅ $pass / $total,  $rate% | "
              done
            
            # 🔥 Escape special chars for JSON safety
            PART_SUMMARY_ESCAPED=$(echo -n "$PART_SUMMARY" | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/"/\\"/g')
            
            # Set environment variables for Slack notification
            export SLACK_MESSAGE="Total tests run: $TOTAL\nPassed: $PASSED\nFailed: $FAILED\nPass Rate: $PASS_RATE%\nFail Rate: $FAIL_RATE%*\n📉 Fail Rate: *$FAIL_RATE%*\n\n*Per PART breakdown:*\n$PART_SUMMARY"
            
            # Export escaped part summary for use in Slack block
            echo "PART_SUMMARY_ESCAPED=\"$PART_SUMMARY_ESCAPED\"" >> $BASH_ENV
            source $BASH_ENV

          # Send the test results to Slack
      - slack/notify:
          channel: "#uat-test-alerts" # Replace with your Slack channel
          template: "${SLACK_MESSAGE}"
          event: always
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Test Results for Distributor:\nTotal: *${TOTAL:-N/A}*\n✅ Passed: *${PASSED:-N/A}*\n❌ Failed: *${FAILED:-N/A}*\n📊 Pass Rate: *${PASS_RATE:-N/A}*\n📉 Fail Rate: *${FAIL_RATE:-N/A}%*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Per PART breakdown:*\n${PART_SUMMARY_ESCAPED}"
                  }
                }
              ]
            }


workflows:
  version: 2

  scheduled-test-1:
#    triggers:
#      - schedule:
#          cron: "36 18 * * *"  # This will run daily-build-and-test at 11:15 AM IST (05:45 AM UTC) // 25 06 --> DP gap = 40 min
#          filters:
#            branches:
#              only:
#                - ahsan_fix
    jobs:
#      - install-common-dependencies
      - nightly-build-and-test-1
#          requires:
#            - install-common-dependencies
#      - nightly-build-and-test-2:
#          requires:
#            - install-common-dependencies
#      - nightly-build-and-test-3:
#          requires:
#            - install-common-dependencies
#      - nightly-build-and-test-4:
#          requires:
#            - install-common-dependencies
#      - nightly-build-and-test-5:
#          requires:
#            - install-common-dependencies
#      - nightly-build-and-test-9:
#          requires:
#            - install-common-dependencies
#      - nightly-build-and-test-10:
#          requires:
#            - install-common-dependencies
#      - calculate-pass-fail-rate:
#          requires:
#            - nightly-build-and-test-1
#            - nightly-build-and-test-2
#            - nightly-build-and-test-3
#            - nightly-build-and-test-4
#            - nightly-build-and-test-5
#            - nightly-build-and-test-9
#            - nightly-build-and-test-10

  scheduled-test-1-sub:
    triggers:
      - schedule:
          cron: "40 18 * * *"  # This will run daily-build-and-test at 11:15 AM IST (05:45 AM UTC) // 25 06 --> DP gap = 40 min
          filters:
            branches:
              only:
                - ahsan_fix
    jobs:
      - nightly-build-and-test-6
      - nightly-build-and-test-7
      - nightly-build-and-test-8
      - nightly-build-and-test-11
      - nightly-build-and-test-12
      - calculate-pass-fail-rate:
          requires:
            - nightly-build-and-test-6
            - nightly-build-and-test-7
            - nightly-build-and-test-8
            - nightly-build-and-test-11
            - nightly-build-and-test-12

