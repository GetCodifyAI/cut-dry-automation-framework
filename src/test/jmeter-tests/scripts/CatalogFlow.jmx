<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="csvFilePath" elementType="Argument">
            <stringProp name="Argument.name">csvFilePath</stringProp>
            <stringProp name="Argument.value">results/Catalog_Flow_Load_Times.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc"></stringProp>
          </elementProp>
          <elementProp name="chromeDriverPath" elementType="Argument">
            <stringProp name="Argument.name">chromeDriverPath</stringProp>
            <stringProp name="Argument.value">/usr/local/bin/chromedriver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc"></stringProp>
          </elementProp>
          <elementProp name="waitTime" elementType="Argument">
            <stringProp name="Argument.name">waitTime</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Catalog" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.io.File

// Get the file path from user-defined variable or hardcode for testing
def csvFilePath = vars.get(&quot;csvFilePath&quot;)  // or use a hardcoded path
log.info(&quot;CSV File Path: ${csvFilePath}&quot;)

def csvFile = new File(csvFilePath)

if (csvFile.exists()) {
    log.info(&quot;Deleting existing CSV file...&quot;)
    csvFile.delete()
    log.info(&quot;CSV file deleted.&quot;)
} else {
    log.info(&quot;CSV file does not exist. No action needed.&quot;)
}</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">if (prev.isSuccessful()) {
    props.put(&quot;runThreadGroup2&quot;, &quot;true&quot;)
} else {
    props.put(&quot;runThreadGroup2&quot;, &quot;false&quot;)
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver" enabled="true">
          <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <stringProp name="WebDriverConfig.driver_path">${chromeDriverPath}</stringProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <boolProp name="WebDriverConfig.headless">true</boolProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <stringProp name="ChromeDriverConfig.additional_args">--incognito,--window-size=1920,1080,--disable-blink-features=AutomationControlled</stringProp>
          <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_ftp_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_socks_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Login the DP" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import java.time.Duration
import org.openqa.selenium.JavascriptExecutor



WDS.browser.get(&quot;https://supplier.cutanddry.com/log-in/&quot;)
def wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(30))

def emailField = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//input[@placeholder=&apos;Email or mobile&apos;]&quot;)))
emailField.clear()
emailField.sendKeys(&quot;415-505-5531&quot;)

def passwordField = WDS.browser.findElement(By.xpath(&quot;//input[@placeholder=&apos;Password&apos;]&quot;))
passwordField.clear()
passwordField.sendKeys(&quot;NovaN@123&quot;)

WDS.browser.findElement(By.xpath(&quot;//button[@type=&apos;submit&apos;]&quot;)).click()
Thread.sleep(3000)
wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(&quot;//li[contains(text(),&apos;Dashboard&apos;)]&quot;)))


// Get all cookies from browser
def cookies = WDS.browser.manage().getCookies()
def cookieHeader = cookies.collect { it.name + &quot;=&quot; + it.value }.join(&quot;; &quot;)
WDS.vars.put(&quot;cookieHeader&quot;, cookieHeader)

// Extract CSRF token if exists
def csrfToken = cookies.find { it.name == &quot;x-csrf-v1&quot; }?.value
WDS.vars.put(&quot;csrfToken&quot;, csrfToken != null ? csrfToken : &quot;&quot;)</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">groovy</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">if (prev.isSuccessful()) {
    props.put(&quot;runThreadGroup2&quot;, &quot;true&quot;)
} else {
    props.put(&quot;runThreadGroup2&quot;, &quot;false&quot;)
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Cookie</stringProp>
              <stringProp name="Header.value">${cookieHeader}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-csrf-token</stringProp>
              <stringProp name="Header.value">${csrfToken}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Origin</stringProp>
              <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Referer</stringProp>
              <stringProp name="Header.value">https://supplier.cutanddry.com/</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-app</stringProp>
              <stringProp name="Header.value">cut-and-dry</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-app-version</stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Load the all customer&apos;s page" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-382 [SupplierPortalCustomersWithSearchQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SupplierPortalCustomersWithSearchQuery&quot;,&quot;variables&quot;:{&quot;limit&quot;:50,&quot;offset&quot;:0,&quot;sortBy&quot;:&quot;customerName&quot;,&quot;sortDirection&quot;:&quot;asc&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;signUpStatus&quot;:null,&quot;contactStatus&quot;:null,&quot;ogStatus&quot;:null,&quot;lastOrderedFilter&quot;:null,&quot;notOrderedInFilter&quot;:null,&quot;tags&quot;:[],&quot;customerActiveStatus&quot;:true,&quot;chainStatus&quot;:null,&quot;customerRestriction&quot;:null,&quot;syncStatus&quot;:null,&quot;allowsRebates&quot;:null,&quot;accountHoldCode&quot;:null,&quot;customerGroupIds&quot;:[]},&quot;query&quot;:&quot;query SupplierPortalCustomersWithSearchQuery($limit: Int, $offset: Int, $sortBy: String, $sortDirection: String, $searchString: String, $salespeople: [String], $signUpStatus: String, $contactStatus: Boolean, $ogStatus: Boolean, $lastOrderedFilter: String, $notOrderedInFilter: String, $tags: [String], $customerActiveStatus: Boolean, $chainStatus: Boolean, $customerRestriction: Boolean, $syncStatus: Boolean, $deliveryDays: [String], $boostCategories: [String], $nextDeliveryDateTimestamp: Int, $isAccount: Boolean, $allowsRebates: Boolean, $accountHoldCode: Int, $customerGroupIds: [ID]) {\n  supplierPortalCustomers(\n    limit: $limit\n    offset: $offset\n    sortBy: $sortBy\n    sortDirection: $sortDirection\n    searchString: $searchString\n    salespeople: $salespeople\n    signUpStatus: $signUpStatus\n    contactStatus: $contactStatus\n    ogStatus: $ogStatus\n    lastOrderedFilter: $lastOrderedFilter\n    notOrderedInFilter: $notOrderedInFilter\n    tags: $tags\n    customerActiveStatus: $customerActiveStatus\n    chainStatus: $chainStatus\n    customerRestriction: $customerRestriction\n    syncStatus: $syncStatus\n    deliveryDays: $deliveryDays\n    boostCategories: $boostCategories\n    nextDeliveryDateTimestamp: $nextDeliveryDateTimestamp\n    isAccount: $isAccount\n    allowsRebates: $allowsRebates\n    accountHoldCode: $accountHoldCode\n    customerGroupIds: $customerGroupIds\n  ) {\n    customers {\n      id\n      integrationID\n      customerRecordID\n      customerName\n      customerCode\n      companyName\n      locationName\n      isAccount\n      salespeople\n      vendorID\n      companyID\n      locationID\n      formID\n      portalEnabledScraperIntegrationStatus\n      hasContactInfo\n      erpCustomerID\n      supplierUserSignedUpStatus\n      lastOrderedTimestamp\n      isRecordOrCompleteIntegration\n      allowsRebates\n      customerStatusType\n      __typename\n    }\n    count\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SupplierPortalCustomersWithSearchQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SupplierPortalCustomersWithSearchQuery($limit: Int, $offset: Int, $sortBy: String, $sortDirection: String, $searchString: String, $salespeople: [String], $signUpStatus: String, $contactStatus: Boolean, $ogStatus: Boolean, $lastOrderedFilter: String, $notOrderedInFilter: String, $tags: [String], $customerActiveStatus: Boolean, $chainStatus: Boolean, $customerRestriction: Boolean, $syncStatus: Boolean, $deliveryDays: [String], $boostCategories: [String], $nextDeliveryDateTimestamp: Int, $isAccount: Boolean, $allowsRebates: Boolean, $accountHoldCode: Int, $customerGroupIds: [ID]) {
  supplierPortalCustomers(
    limit: $limit
    offset: $offset
    sortBy: $sortBy
    sortDirection: $sortDirection
    searchString: $searchString
    salespeople: $salespeople
    signUpStatus: $signUpStatus
    contactStatus: $contactStatus
    ogStatus: $ogStatus
    lastOrderedFilter: $lastOrderedFilter
    notOrderedInFilter: $notOrderedInFilter
    tags: $tags
    customerActiveStatus: $customerActiveStatus
    chainStatus: $chainStatus
    customerRestriction: $customerRestriction
    syncStatus: $syncStatus
    deliveryDays: $deliveryDays
    boostCategories: $boostCategories
    nextDeliveryDateTimestamp: $nextDeliveryDateTimestamp
    isAccount: $isAccount
    allowsRebates: $allowsRebates
    accountHoldCode: $accountHoldCode
    customerGroupIds: $customerGroupIds
  ) {
    customers {
      id
      integrationID
      customerRecordID
      customerName
      customerCode
      companyName
      locationName
      isAccount
      salespeople
      vendorID
      companyID
      locationID
      formID
      portalEnabledScraperIntegrationStatus
      hasContactInfo
      erpCustomerID
      supplierUserSignedUpStatus
      lastOrderedTimestamp
      isRecordOrCompleteIntegration
      allowsRebates
      customerStatusType
      __typename
    }
    count
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;limit&quot;:50,&quot;offset&quot;:0,&quot;sortBy&quot;:&quot;customerName&quot;,&quot;sortDirection&quot;:&quot;asc&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;signUpStatus&quot;:null,&quot;contactStatus&quot;:null,&quot;ogStatus&quot;:null,&quot;lastOrderedFilter&quot;:null,&quot;notOrderedInFilter&quot;:null,&quot;tags&quot;:[],&quot;customerActiveStatus&quot;:true,&quot;chainStatus&quot;:null,&quot;customerRestriction&quot;:null,&quot;syncStatus&quot;:null,&quot;allowsRebates&quot;:null,&quot;accountHoldCode&quot;:null,&quot;customerGroupIds&quot;:[]}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">2fac33780cba2a7405bc0f3b01b3241233f73714057c9a61a82540dc165eed541751985019</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-401[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:235563833,&quot;locationId&quot;:235563823},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:235563833,&quot;locationId&quot;:235563823}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-402[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:132987544,&quot;locationId&quot;:132987427},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:132987544,&quot;locationId&quot;:132987427}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-404[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:48391739,&quot;locationId&quot;:48391727},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:48391739,&quot;locationId&quot;:48391727}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-403[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:132986545,&quot;locationId&quot;:132986532},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:132986545,&quot;locationId&quot;:132986532}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-400[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:148179823,&quot;locationId&quot;:148179810},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:148179823,&quot;locationId&quot;:148179810}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-399[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:140060852,&quot;locationId&quot;:140060842},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:140060852,&quot;locationId&quot;:140060842}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-406[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:373713724,&quot;locationId&quot;:373710628},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:373713724,&quot;locationId&quot;:373710628}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-407[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:65093056,&quot;locationId&quot;:65093046},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:65093056,&quot;locationId&quot;:65093046}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-410[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:107780806,&quot;locationId&quot;:151571814},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:107780806,&quot;locationId&quot;:151571814}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-408[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:188445327,&quot;locationId&quot;:188445314},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:188445327,&quot;locationId&quot;:188445314}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-409[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:107780806,&quot;locationId&quot;:151571948},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:107780806,&quot;locationId&quot;:151571948}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-411[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:107780806,&quot;locationId&quot;:107780793},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:107780806,&quot;locationId&quot;:107780793}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-413[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:50430963,&quot;locationId&quot;:50430951},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:50430963,&quot;locationId&quot;:50430951}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-412[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:48526916,&quot;locationId&quot;:40584030},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:48526916,&quot;locationId&quot;:40584030}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-415[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:142764682,&quot;locationId&quot;:142764669},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:142764682,&quot;locationId&quot;:142764669}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-416[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:173708846,&quot;locationId&quot;:173708836},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:173708846,&quot;locationId&quot;:173708836}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-414[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:146719130,&quot;locationId&quot;:146719117},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:146719130,&quot;locationId&quot;:146719117}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-417[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:52543428,&quot;locationId&quot;:52543416},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:52543428,&quot;locationId&quot;:52543416}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-418[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:137718974,&quot;locationId&quot;:137718961},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:137718974,&quot;locationId&quot;:137718961}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-420[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:90483857,&quot;locationId&quot;:54490936},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:90483857,&quot;locationId&quot;:54490936}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-419[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:172218529,&quot;locationId&quot;:172218519},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:172218529,&quot;locationId&quot;:172218519}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-421[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:55743548,&quot;locationId&quot;:55743536},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:55743548,&quot;locationId&quot;:55743536}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-422[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:103095705,&quot;locationId&quot;:103095693},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:103095705,&quot;locationId&quot;:103095693}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-423[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:97744219,&quot;locationId&quot;:57390398},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:97744219,&quot;locationId&quot;:57390398}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">299f51463741e2c2fcbe73de50867f6cda22d539ba592eb4caa1e79c72ac5d941751985051</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">if (prev.isSuccessful()) {
    props.put(&quot;runThreadGroup2&quot;, &quot;true&quot;)
} else {
    props.put(&quot;runThreadGroup2&quot;, &quot;false&quot;)
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Seach specific customer" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-424 [SupplierPortalCustomersWithSearchQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SupplierPortalCustomersWithSearchQuery&quot;,&quot;variables&quot;:{&quot;limit&quot;:50,&quot;offset&quot;:0,&quot;sortBy&quot;:&quot;customerName&quot;,&quot;sortDirection&quot;:&quot;asc&quot;,&quot;searchString&quot;:&quot;16579&quot;,&quot;signUpStatus&quot;:null,&quot;contactStatus&quot;:null,&quot;ogStatus&quot;:null,&quot;lastOrderedFilter&quot;:null,&quot;notOrderedInFilter&quot;:null,&quot;tags&quot;:[],&quot;customerActiveStatus&quot;:true,&quot;chainStatus&quot;:null,&quot;customerRestriction&quot;:null,&quot;syncStatus&quot;:null,&quot;allowsRebates&quot;:null,&quot;accountHoldCode&quot;:null,&quot;customerGroupIds&quot;:[]},&quot;query&quot;:&quot;query SupplierPortalCustomersWithSearchQuery($limit: Int, $offset: Int, $sortBy: String, $sortDirection: String, $searchString: String, $salespeople: [String], $signUpStatus: String, $contactStatus: Boolean, $ogStatus: Boolean, $lastOrderedFilter: String, $notOrderedInFilter: String, $tags: [String], $customerActiveStatus: Boolean, $chainStatus: Boolean, $customerRestriction: Boolean, $syncStatus: Boolean, $deliveryDays: [String], $boostCategories: [String], $nextDeliveryDateTimestamp: Int, $isAccount: Boolean, $allowsRebates: Boolean, $accountHoldCode: Int, $customerGroupIds: [ID]) {\n  supplierPortalCustomers(\n    limit: $limit\n    offset: $offset\n    sortBy: $sortBy\n    sortDirection: $sortDirection\n    searchString: $searchString\n    salespeople: $salespeople\n    signUpStatus: $signUpStatus\n    contactStatus: $contactStatus\n    ogStatus: $ogStatus\n    lastOrderedFilter: $lastOrderedFilter\n    notOrderedInFilter: $notOrderedInFilter\n    tags: $tags\n    customerActiveStatus: $customerActiveStatus\n    chainStatus: $chainStatus\n    customerRestriction: $customerRestriction\n    syncStatus: $syncStatus\n    deliveryDays: $deliveryDays\n    boostCategories: $boostCategories\n    nextDeliveryDateTimestamp: $nextDeliveryDateTimestamp\n    isAccount: $isAccount\n    allowsRebates: $allowsRebates\n    accountHoldCode: $accountHoldCode\n    customerGroupIds: $customerGroupIds\n  ) {\n    customers {\n      id\n      integrationID\n      customerRecordID\n      customerName\n      customerCode\n      companyName\n      locationName\n      isAccount\n      salespeople\n      vendorID\n      companyID\n      locationID\n      formID\n      portalEnabledScraperIntegrationStatus\n      hasContactInfo\n      erpCustomerID\n      supplierUserSignedUpStatus\n      lastOrderedTimestamp\n      isRecordOrCompleteIntegration\n      allowsRebates\n      customerStatusType\n      __typename\n    }\n    count\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SupplierPortalCustomersWithSearchQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SupplierPortalCustomersWithSearchQuery($limit: Int, $offset: Int, $sortBy: String, $sortDirection: String, $searchString: String, $salespeople: [String], $signUpStatus: String, $contactStatus: Boolean, $ogStatus: Boolean, $lastOrderedFilter: String, $notOrderedInFilter: String, $tags: [String], $customerActiveStatus: Boolean, $chainStatus: Boolean, $customerRestriction: Boolean, $syncStatus: Boolean, $deliveryDays: [String], $boostCategories: [String], $nextDeliveryDateTimestamp: Int, $isAccount: Boolean, $allowsRebates: Boolean, $accountHoldCode: Int, $customerGroupIds: [ID]) {
  supplierPortalCustomers(
    limit: $limit
    offset: $offset
    sortBy: $sortBy
    sortDirection: $sortDirection
    searchString: $searchString
    salespeople: $salespeople
    signUpStatus: $signUpStatus
    contactStatus: $contactStatus
    ogStatus: $ogStatus
    lastOrderedFilter: $lastOrderedFilter
    notOrderedInFilter: $notOrderedInFilter
    tags: $tags
    customerActiveStatus: $customerActiveStatus
    chainStatus: $chainStatus
    customerRestriction: $customerRestriction
    syncStatus: $syncStatus
    deliveryDays: $deliveryDays
    boostCategories: $boostCategories
    nextDeliveryDateTimestamp: $nextDeliveryDateTimestamp
    isAccount: $isAccount
    allowsRebates: $allowsRebates
    accountHoldCode: $accountHoldCode
    customerGroupIds: $customerGroupIds
  ) {
    customers {
      id
      integrationID
      customerRecordID
      customerName
      customerCode
      companyName
      locationName
      isAccount
      salespeople
      vendorID
      companyID
      locationID
      formID
      portalEnabledScraperIntegrationStatus
      hasContactInfo
      erpCustomerID
      supplierUserSignedUpStatus
      lastOrderedTimestamp
      isRecordOrCompleteIntegration
      allowsRebates
      customerStatusType
      __typename
    }
    count
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;limit&quot;:50,&quot;offset&quot;:0,&quot;sortBy&quot;:&quot;customerName&quot;,&quot;sortDirection&quot;:&quot;asc&quot;,&quot;searchString&quot;:&quot;16579&quot;,&quot;signUpStatus&quot;:null,&quot;contactStatus&quot;:null,&quot;ogStatus&quot;:null,&quot;lastOrderedFilter&quot;:null,&quot;notOrderedInFilter&quot;:null,&quot;tags&quot;:[],&quot;customerActiveStatus&quot;:true,&quot;chainStatus&quot;:null,&quot;customerRestriction&quot;:null,&quot;syncStatus&quot;:null,&quot;allowsRebates&quot;:null,&quot;accountHoldCode&quot;:null,&quot;customerGroupIds&quot;:[]}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">3fe498e517f7ac4fb9ea90c3e49571656f04408f805276e96c73d077ee8423b31751985055</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-425[orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:103430775,&quot;locationId&quot;:103430762},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:103430775,&quot;locationId&quot;:103430762}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">b3a54be0600489824c80bb9c6f697ac77ac04ea7ad5318b2b60b51d890b36bba1751985057</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">if (prev.isSuccessful()) {
    props.put(&quot;runThreadGroup2&quot;, &quot;true&quot;)
} else {
    props.put(&quot;runThreadGroup2&quot;, &quot;false&quot;)
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Load the Order Guide" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-434 [ordersForDate]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;ordersForDate&quot;,&quot;variables&quot;:{&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;},&quot;query&quot;:&quot;query ordersForDate($formId: ID!, $locationId: ID!, $date: String, $orderId: ID) {\n  form(id: $formId) {\n    orderedAmountForDay(\n      locationId: $locationId\n      deliveryDate: $date\n      orderId: $orderId\n    ) {\n      float\n      money\n      __typename\n    }\n    sameDayOrder(locationId: $locationId, deliveryDate: $date) {\n      id\n      __typename\n    }\n    orderedCaseCountForDay(\n      locationId: $locationId\n      deliveryDate: $date\n      orderId: $orderId\n    )\n    isMergeOrdersOk\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">ordersForDate</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query ordersForDate($formId: ID!, $locationId: ID!, $date: String, $orderId: ID) {
  form(id: $formId) {
    orderedAmountForDay(
      locationId: $locationId
      deliveryDate: $date
      orderId: $orderId
    ) {
      float
      money
      __typename
    }
    sameDayOrder(locationId: $locationId, deliveryDate: $date) {
      id
      __typename
    }
    orderedCaseCountForDay(
      locationId: $locationId
      deliveryDate: $date
      orderId: $orderId
    )
    isMergeOrdersOk
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">6c53a4555d9cb3129e802e15d001beb7ad0985461fbc282e684d9180574896891751985058</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-437 [singleDraft]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;singleDraft&quot;,&quot;variables&quot;:{&quot;id&quot;:0,&quot;locationId&quot;:&quot;103430762&quot;},&quot;query&quot;:&quot;query singleDraft($id: ID!, $locationId: ID, $deliveryDate: String) {\n  draft(id: $id) {\n    ...DraftForOrderGuide\n    ...DraftApprovalData\n    form {\n      id\n      vendor {\n        id\n        verifiedvendor {\n          id\n          supplierportalvendordata {\n            id\n            pickupTimeSelectEnabled\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment DraftForOrderGuide on Draft {\n  id\n  updated\n  date\n  itemCount\n  PONumber\n  POUrl\n  POHtml\n  POIssues\n  instructions\n  memoCode\n  internalNotes\n  pickupOrder\n  mailDeliveryOrder\n  deliveryOrder\n  fulfilmentType\n  pickupTime\n  substitutions {\n    id\n    canonicalProductId\n    unit\n    __typename\n  }\n  shipDirectFeeAmount {\n    money\n    float\n    __typename\n  }\n  discountAmount {\n    money\n    float\n    __typename\n  }\n  location {\n    id\n    name\n    archived\n    __typename\n  }\n  creator {\n    id\n    name\n    __typename\n  }\n  products(locationId: $locationId) {\n    id\n    quantity\n    itemCode\n    sourceData {\n      sourcePage\n      sourceLocation\n      __typename\n    }\n    instructionText\n    spotPrice\n    salesMargin\n    addedToCartAt\n    multiUnitProduct {\n      ...MultiUnitProductForOrderFragment\n      __typename\n    }\n    __typename\n  }\n  deliveryFee\n  multiCartData {\n    distributionCentre\n    deliveryDate\n    instructions\n    poNumber\n    memoCode\n    internalNotes\n    noteForCustomer\n    __typename\n  }\n  altshiptoaddress {\n    id\n    __typename\n  }\n  __typename\n}\n\nfragment MultiUnitProductForOrderFragment on MultiUnitProduct {\n  id\n  multiUnitGroupingId\n  itemCode\n  name\n  updated\n  taxable\n  sectionItemSequence\n  products {\n    id\n    name\n    archived(locationId: $locationId)\n    itemCode\n    shipDirect\n    instructionText\n    price(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      cents\n      __typename\n    }\n    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)\n    rebateAmount {\n      money\n      cents\n      __typename\n    }\n    productNotes(locationId: $locationId)\n    precut\n    prioritizePoundPriceInOG(locationId: $locationId)\n    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)\n    unit\n    abbreviatedUnit\n    par\n    lastOrderedLabel(locationId: $locationId)\n    lastOrderTimeAndQuantity(locationId: $locationId) {\n      quantity\n      lastOrderedTime\n      uom\n      daysAgo\n      price\n      poundPrice\n      __typename\n    }\n    showDiscontinued\n    isOutOfStock\n    isUnavailable\n    canonicalproduct {\n      id\n      itemCode\n      normalizedItemCode\n      description\n      pack\n      consumerCategory\n      discontinued(locationId: $locationId)\n      quickbooksRefID\n      syncedWithQB\n      shipDirect\n      specialOrder\n      jitItem\n      DWOItem\n      brandName\n      unavailable\n      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n      productNotes(locationId: $locationId)\n      displayManufacturerProductDetails\n      gtin\n      nameWithoutBrand\n      normalizedUoms\n      supplierOrderOnly(locationId: $locationId)\n      onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n      separateDirectShip\n      isCatchWeight\n      netWeight\n      volume\n      isGPOForCustomer(locationId: $locationId)\n      brokenCaseItem\n      currentStocks(locationId: $locationId) {\n        uom\n        value\n        __typename\n      }\n      quantityOnOrder {\n        uom\n        value\n        __typename\n      }\n      committedQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPOQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPODate {\n        uom\n        value\n        __typename\n      }\n      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        value\n        float\n        __typename\n      }\n      totalCost {\n        uom\n        value\n        float\n        __typename\n      }\n      salesMargin {\n        uom\n        value\n        float\n        __typename\n      }\n      markedAsNew\n      BEPRebatesEnabled\n      ...RebateConfigsFragment\n      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n      specialItem\n      forceShowSubstitutes(locationId: $locationId)\n      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        type\n        value\n        __typename\n      }\n      multiCartEnabled\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      l0category {\n        id\n        name\n        __typename\n      }\n      l1category {\n        id\n        name\n        __typename\n      }\n      l2category {\n        id\n        name\n        __typename\n      }\n      l3category {\n        id\n        name\n        __typename\n      }\n      l4category {\n        id\n        name\n        __typename\n      }\n      packSize\n      thumbnail {\n        id\n        url\n        is360\n        category\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      primaryImage {\n        id\n        url\n        __typename\n      }\n      productShopDataForStore {\n        id\n        sizeDescription\n        onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n        shopifyName\n        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n          unit\n          billedUnit\n          billedPrice {\n            float\n            money\n            __typename\n          }\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        productsubcategories {\n          id\n          name\n          productcategory {\n            id\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      allowsItemLevelInstructions\n      activeSubstitutions(locationId: $locationId) {\n        id\n        itemCode\n        normalizedItemCode\n        shopifyName\n        description\n        normalizedUoms\n        pack\n        activeAdCard {\n          id\n          __typename\n        }\n        manufacturer {\n          id\n          name\n          __typename\n        }\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        unitPriceEstimates {\n          unit\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        thumbnail {\n          id\n          url\n          __typename\n        }\n        primaryImage {\n          id\n          url\n          __typename\n        }\n        productShopDataForStore {\n          id\n          sizeDescription\n          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n            unit\n            price {\n              float\n              money\n              __typename\n            }\n            billedUnit\n            billedPrice {\n              float\n              money\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      verifiedvendor {\n        id\n        name\n        allowsRebates\n        supplierportalvendordata {\n          id\n          showCalculatedSecondaryPriceInCatalog\n          __typename\n        }\n        whiteLabel\n        showStocksInPortal\n        showStocksInOp\n        showCostInPortal\n        uomWiseStocksEnabled\n        uomWiseCostEnabled\n        showMarginInPortal\n        lowStockMargin\n        maxSalesMargin\n        minSalesMargin\n        spotPricingEnabled\n        poundSpotPricingEnabled\n        sendSpotPriceUpdatesEnabled\n        restrictPriceChangesBelowMinimumPriceEnabled\n        showOnlyCatchWeightPriceInOrderFlow\n        hideInventoryForJitAndSpecialOrderItems\n        showPriceWithAvg\n        hideZeroPrice\n        catalogDefaultUnit\n        __typename\n      }\n      manufacturerproduct {\n        id\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      productbrand {\n        id\n        displayName\n        __typename\n      }\n      searchKeywords\n      ...CanonicalProductDimensionsFragment\n      packSizePerUom {\n        uom\n        packSize\n        __typename\n      }\n      buyersName\n      __typename\n    }\n    doNotSub\n    defaultsubstitution {\n      id\n      __typename\n    }\n    eligibleForSwitchCashback\n    locations {\n      id\n      __typename\n    }\n    __typename\n  }\n  defaultUnit\n  __typename\n}\n\nfragment CanonicalProductDimensionsFragment on CanonicalProduct {\n  gtin\n  itemsPerPack\n  packsPerCase\n  totalItems\n  itemSizeType\n  itemSizeValue\n  itemSizeUOM\n  dimensionDetail\n  dimensionNotes\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}\n\nfragment DraftApprovalData on Draft {\n  id\n  approvalStatusCode\n  rejectionNote\n  submittedForApproval\n  rejected\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">singleDraft</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query singleDraft($id: ID!, $locationId: ID, $deliveryDate: String) {
  draft(id: $id) {
    ...DraftForOrderGuide
    ...DraftApprovalData
    form {
      id
      vendor {
        id
        verifiedvendor {
          id
          supplierportalvendordata {
            id
            pickupTimeSelectEnabled
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment DraftForOrderGuide on Draft {
  id
  updated
  date
  itemCount
  PONumber
  POUrl
  POHtml
  POIssues
  instructions
  memoCode
  internalNotes
  pickupOrder
  mailDeliveryOrder
  deliveryOrder
  fulfilmentType
  pickupTime
  substitutions {
    id
    canonicalProductId
    unit
    __typename
  }
  shipDirectFeeAmount {
    money
    float
    __typename
  }
  discountAmount {
    money
    float
    __typename
  }
  location {
    id
    name
    archived
    __typename
  }
  creator {
    id
    name
    __typename
  }
  products(locationId: $locationId) {
    id
    quantity
    itemCode
    sourceData {
      sourcePage
      sourceLocation
      __typename
    }
    instructionText
    spotPrice
    salesMargin
    addedToCartAt
    multiUnitProduct {
      ...MultiUnitProductForOrderFragment
      __typename
    }
    __typename
  }
  deliveryFee
  multiCartData {
    distributionCentre
    deliveryDate
    instructions
    poNumber
    memoCode
    internalNotes
    noteForCustomer
    __typename
  }
  altshiptoaddress {
    id
    __typename
  }
  __typename
}

fragment MultiUnitProductForOrderFragment on MultiUnitProduct {
  id
  multiUnitGroupingId
  itemCode
  name
  updated
  taxable
  sectionItemSequence
  products {
    id
    name
    archived(locationId: $locationId)
    itemCode
    shipDirect
    instructionText
    price(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      cents
      __typename
    }
    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)
    rebateAmount {
      money
      cents
      __typename
    }
    productNotes(locationId: $locationId)
    precut
    prioritizePoundPriceInOG(locationId: $locationId)
    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)
    unit
    abbreviatedUnit
    par
    lastOrderedLabel(locationId: $locationId)
    lastOrderTimeAndQuantity(locationId: $locationId) {
      quantity
      lastOrderedTime
      uom
      daysAgo
      price
      poundPrice
      __typename
    }
    showDiscontinued
    isOutOfStock
    isUnavailable
    canonicalproduct {
      id
      itemCode
      normalizedItemCode
      description
      pack
      consumerCategory
      discontinued(locationId: $locationId)
      quickbooksRefID
      syncedWithQB
      shipDirect
      specialOrder
      jitItem
      DWOItem
      brandName
      unavailable
      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
      productNotes(locationId: $locationId)
      displayManufacturerProductDetails
      gtin
      nameWithoutBrand
      normalizedUoms
      supplierOrderOnly(locationId: $locationId)
      onSale(locationId: $locationId, deliveryDate: $deliveryDate)
      separateDirectShip
      isCatchWeight
      netWeight
      volume
      isGPOForCustomer(locationId: $locationId)
      brokenCaseItem
      currentStocks(locationId: $locationId) {
        uom
        value
        __typename
      }
      quantityOnOrder {
        uom
        value
        __typename
      }
      committedQuantity {
        uom
        value
        __typename
      }
      nextPOQuantity {
        uom
        value
        __typename
      }
      nextPODate {
        uom
        value
        __typename
      }
      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        value
        float
        __typename
      }
      totalCost {
        uom
        value
        float
        __typename
      }
      salesMargin {
        uom
        value
        float
        __typename
      }
      markedAsNew
      BEPRebatesEnabled
      ...RebateConfigsFragment
      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
      specialItem
      forceShowSubstitutes(locationId: $locationId)
      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        type
        value
        __typename
      }
      multiCartEnabled
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      l0category {
        id
        name
        __typename
      }
      l1category {
        id
        name
        __typename
      }
      l2category {
        id
        name
        __typename
      }
      l3category {
        id
        name
        __typename
      }
      l4category {
        id
        name
        __typename
      }
      packSize
      thumbnail {
        id
        url
        is360
        category
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      primaryImage {
        id
        url
        __typename
      }
      productShopDataForStore {
        id
        sizeDescription
        onSale(locationId: $locationId, deliveryDate: $deliveryDate)
        shopifyName
        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
          unit
          billedUnit
          billedPrice {
            float
            money
            __typename
          }
          price {
            float
            money
            __typename
          }
          __typename
        }
        productsubcategories {
          id
          name
          productcategory {
            id
            name
            __typename
          }
          __typename
        }
        __typename
      }
      allowsItemLevelInstructions
      activeSubstitutions(locationId: $locationId) {
        id
        itemCode
        normalizedItemCode
        shopifyName
        description
        normalizedUoms
        pack
        activeAdCard {
          id
          __typename
        }
        manufacturer {
          id
          name
          __typename
        }
        productbrand {
          id
          displayName
          __typename
        }
        unitPriceEstimates {
          unit
          price {
            float
            money
            __typename
          }
          __typename
        }
        thumbnail {
          id
          url
          __typename
        }
        primaryImage {
          id
          url
          __typename
        }
        productShopDataForStore {
          id
          sizeDescription
          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
            unit
            price {
              float
              money
              __typename
            }
            billedUnit
            billedPrice {
              float
              money
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      verifiedvendor {
        id
        name
        allowsRebates
        supplierportalvendordata {
          id
          showCalculatedSecondaryPriceInCatalog
          __typename
        }
        whiteLabel
        showStocksInPortal
        showStocksInOp
        showCostInPortal
        uomWiseStocksEnabled
        uomWiseCostEnabled
        showMarginInPortal
        lowStockMargin
        maxSalesMargin
        minSalesMargin
        spotPricingEnabled
        poundSpotPricingEnabled
        sendSpotPriceUpdatesEnabled
        restrictPriceChangesBelowMinimumPriceEnabled
        showOnlyCatchWeightPriceInOrderFlow
        hideInventoryForJitAndSpecialOrderItems
        showPriceWithAvg
        hideZeroPrice
        catalogDefaultUnit
        __typename
      }
      manufacturerproduct {
        id
        productbrand {
          id
          displayName
          __typename
        }
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      productbrand {
        id
        displayName
        __typename
      }
      searchKeywords
      ...CanonicalProductDimensionsFragment
      packSizePerUom {
        uom
        packSize
        __typename
      }
      buyersName
      __typename
    }
    doNotSub
    defaultsubstitution {
      id
      __typename
    }
    eligibleForSwitchCashback
    locations {
      id
      __typename
    }
    __typename
  }
  defaultUnit
  __typename
}

fragment CanonicalProductDimensionsFragment on CanonicalProduct {
  gtin
  itemsPerPack
  packsPerCase
  totalItems
  itemSizeType
  itemSizeValue
  itemSizeUOM
  dimensionDetail
  dimensionNotes
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}

fragment DraftApprovalData on Draft {
  id
  approvalStatusCode
  rejectionNote
  submittedForApproval
  rejected
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;id&quot;:0,&quot;locationId&quot;:&quot;103430762&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">6c53a4555d9cb3129e802e15d001beb7ad0985461fbc282e684d9180574896891751985058</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-436 [ordersForDate]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;ordersForDate&quot;,&quot;variables&quot;:{&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;date&quot;:&quot;2025-7-9&quot;},&quot;query&quot;:&quot;query ordersForDate($formId: ID!, $locationId: ID!, $date: String, $orderId: ID) {\n  form(id: $formId) {\n    orderedAmountForDay(\n      locationId: $locationId\n      deliveryDate: $date\n      orderId: $orderId\n    ) {\n      float\n      money\n      __typename\n    }\n    sameDayOrder(locationId: $locationId, deliveryDate: $date) {\n      id\n      __typename\n    }\n    orderedCaseCountForDay(\n      locationId: $locationId\n      deliveryDate: $date\n      orderId: $orderId\n    )\n    isMergeOrdersOk\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">ordersForDate</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query ordersForDate($formId: ID!, $locationId: ID!, $date: String, $orderId: ID) {
  form(id: $formId) {
    orderedAmountForDay(
      locationId: $locationId
      deliveryDate: $date
      orderId: $orderId
    ) {
      float
      money
      __typename
    }
    sameDayOrder(locationId: $locationId, deliveryDate: $date) {
      id
      __typename
    }
    orderedCaseCountForDay(
      locationId: $locationId
      deliveryDate: $date
      orderId: $orderId
    )
    isMergeOrdersOk
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;date&quot;:&quot;2025-7-9&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">6c53a4555d9cb3129e802e15d001beb7ad0985461fbc282e684d9180574896891751985058</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-439 [formForOrder]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;formForOrder&quot;,&quot;variables&quot;:{&quot;isStandingOrderFlow&quot;:false,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;sortView&quot;:null,&quot;offset&quot;:0,&quot;limit&quot;:15,&quot;deliveryDate&quot;:&quot;2025-07-09&quot;,&quot;useElasticSearch&quot;:true,&quot;sectionId&quot;:null,&quot;sectionCategoryId&quot;:null},&quot;query&quot;:&quot;query formForOrder($formId: ID!, $locationId: ID!, $showHiddenItems: Boolean, $skipLocationPrivacy: Boolean, $deliveryDate: String, $offset: Int, $limit: Int, $useElasticSearch: Boolean, $sectionId: ID, $sectionCategoryId: ID, $sortView: String, $searchString: String, $isStandingOrderFlow: Boolean = false) {\n  form(id: $formId) {\n    ...OrderGuidePageForm\n    sectionsWithCount(\n      location_id: $locationId\n      showHiddenItems: $showHiddenItems\n      skipLocationPrivacy: $skipLocationPrivacy\n      useElasticSearch: $useElasticSearch\n      sectionId: $sectionId\n      sectionCategoryId: $sectionCategoryId\n      sortView: $sortView\n      offset: $offset\n      limit: $limit\n      searchString: $searchString\n    ) {\n      sections {\n        ...FormSectionFragment\n        __typename\n      }\n      fullCount\n      __typename\n    }\n    offset\n    approvalRequired\n    isApprover(locationId: $locationId)\n    continuableDraft(locationId: $locationId) {\n      id\n      date\n      itemCount\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment OrderGuidePageForm on Form {\n  id\n  name\n  allowsInstructions\n  maxInstructionChars\n  deliveryFee\n  isFromIntegration\n  isEditable\n  shouldDisableOrderingOutOfStockProducts(locationId: $locationId)\n  lastUpdatedTimestamp\n  allowsAddingItems(locationId: $locationId)\n  isCatalogDisabledOnlyForOperator\n  alwaysAddFromCatalog\n  isCutDryDirect\n  shipDirectEnabled\n  cutOffDayOffset(locationId: $locationId)\n  substitutionViewType\n  isFetchStockCountsFromIntegrator\n  multiCartAvailableDeliveryDays(locationId: $locationId) {\n    cartCode\n    deliveryDates {\n      date\n      cutoffTimestamp\n      softCutoffTimestamp\n      isVisibleToOperator\n      __typename\n    }\n    __typename\n  }\n  availableDeliveryDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    softCutoffTimestamp\n    isVisibleToOperator\n    __typename\n  }\n  customerHolidays(locationId: $locationId)\n  allowsPickup(locationId: $locationId)\n  allowedFulfilmentTypes(locationId: $locationId)\n  allowsMailDelivery\n  allowsDelivery\n  availablePickupDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    pickupTimes {\n      time\n      cutoffTimestamp\n      __typename\n    }\n    __typename\n  }\n  availableDispatchDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    __typename\n  }\n  availableWeekdays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    __typename\n  }\n  hasContactMethod(locationId: $locationId)\n  hasShopExperience(locationId: $locationId)\n  orderingDays\n  company {\n    id\n    name\n    whiteLabel\n    hasActivePaymentMethods\n    members @include(if: $isStandingOrderFlow) {\n      id\n      email\n      name\n      __typename\n    }\n    __typename\n  }\n  cutoffTimeString\n  lastOrderedProductIds(location_id: $locationId)\n  info\n  locations(filterByID: $locationId) {\n    id\n    name\n    nameWithCompany\n    address\n    streetAddress2\n    city\n    state\n    zip\n    locationshiptoaddresses {\n      id\n      asString\n      __typename\n    }\n    __typename\n  }\n  vendor {\n    id\n    name\n    isCutDryDirect\n    catalogDisabled\n    createOGDisabled\n    payEnabled\n    activeLocations {\n      id\n      name\n      __typename\n    }\n    salespeople {\n      id\n      name\n      allLocations\n      locations {\n        id\n        __typename\n      }\n      __typename\n    }\n    hideSubstitutions\n    verifiedvendor {\n      id\n      name\n      operatorPortalName\n      dateTerm\n      allowsPickup\n      allowsPickupSupplierPortalOnly\n      manufacturerRebatesEnabled\n      defaultFilters {\n        queryStringKey\n        filterOptions\n        __typename\n      }\n      isQBIntegrated\n      isScraperIntegrated\n      isInstantScraperEnabled\n      catalogViewType\n      nestedCategoryEnabled\n      filtersEnabled\n      logoURL\n      allowsOrderingDiscontinued\n      autoCategorizeEnabled\n      catalogLandingPageActive\n      thumbnail\n      catalogHomePageEnabled\n      whiteLabel\n      hardHoldMessage\n      popularCategories {\n        id\n        name\n        __typename\n      }\n      showDeliveryDateInOg\n      showOnlyCatchWeightPriceInOrderFlow\n      showProductSizeDescriptionInSubs\n      showHeroImage\n      showFeaturedItems\n      showOnSaleItems\n      showHeroImage\n      showSmallerImages\n      showFeaturedItems\n      showOnSaleItems\n      catalogHeroImage\n      catalogSmallerImage1\n      catalogSmallerImage2\n      catalogMobileHeroImage\n      catalogHeroImageUrl\n      catalogSmallerImage1Url\n      catalogSmallerImage2Url\n      showStocksInPortal\n      showPriceWithAvg\n      showStocksInOp\n      showCostInPortal\n      uomWiseStocksEnabled\n      uomWiseCostEnabled\n      showMarginInPortal\n      spotPricingEnabled\n      cartSummaryVolumeEnabled\n      cartSummaryWeightEnabled\n      sendSpotPriceUpdatesEnabled\n      lowStockMargin\n      fetchOGPricesFromPricingServiceEnabled\n      dateBasedPricingEnabled\n      showDeliveryDateBasedJitCutoffs\n      bepRebatesActive\n      allowsRebates\n      showPayBannerOnOrderConfirmation\n      catalogSortIndex\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      supplierportalvendordata {\n        id\n        portalOverridesOrderMins\n        splitWeightsActive\n        sameDayDeliveryOffsetSeconds\n        showLocationWisePricesForSubstitutes\n        showSubstitutionsModalInPortal\n        showItemLevelInstructionsInPortal\n        showItemLevelInstructionsInOperator\n        itemLevelInstructionLimit\n        multipleShipTosEnabled\n        chunkCountWaitLimit\n        ogPageSize\n        ogFirstPageSize\n        defaultViewAsCustomer\n        disableItemDeletesAndSubtractsForOrderEdits\n        disableItemDeletesAndSubtractsForOrderEditsInPortal\n        pickupTimeSelectEnabled\n        showMemoCodeInOperatorPortal\n        showMemoCodeInSupplierPortal\n        multiCartEnabled\n        avoidDefaultCaseStyling\n        catalogInfoOnlyViewIfOnOG\n        catalogInfoOnlyViewMessage\n        totalCostMarginEnabled\n        showOrderSummary\n        disableDeliveryDateChangeForOrderEditsInOp\n        disableDeliveryDateChangeForOrderEditsInPortal\n        disableDeliveryDateChangeWarningMessage\n        showLastOrderedPrice\n        showLastOrderedPriceInPortal\n        useTotalCostForMarginValidation\n        showUnitPriceAsMainPriceInCatalog\n        showCalculatedSecondaryPriceInCatalog\n        persistsItemLevelInstructions\n        hideZeroStockLabelInOP\n        hideOutOfStockLabelInSP\n        showUnavailableInsteadOfOutOfStock\n        poundSpotPricingEnabled\n        disableOrderingOutOfStockProductsWithoutSubstitutes\n        checkForZeroPricedItems\n        showLastOrderedPoundPrice\n        preserveCartItemOrder\n        validateMarginInPortal\n        disableEditingPoundQuantity\n        blockPartialQuantityOrdering\n        blockPartialQuantityOrderingInOperatorPortal\n        accountHoldAlertsEnabled\n        hideCatchWeightUnitPriceInCatalog\n        showDistributionCentreLabels\n        offlineOrderingEnabled\n        catalogOnlyOrderFlowEnabled\n        dateBasedPricingBannerDisabled\n        showPurchaseHistory\n        quickAddViewEnabledStatus\n        simpleListViewEnabledStatus\n        enabledLargeProductTiles\n        enabledAdditionalDescriptions\n        enabledTiHiPalletDetails\n        __typename\n      }\n      restrictPriceChangesBelowMinimumPriceEnabled\n      splitSpecialOrders\n      sortOGByItemCode\n      showCaseDiscountsDisclaimerMessage\n      disableOrderingZeroPricedItems\n      disableOrderingSpecialOrderItems\n      __typename\n    }\n    shipdirectverifiedvendor {\n      id\n      shippingFeeWaived\n      shippingFeeWaivedUntil\n      firstOrderDiscounted\n      firstOrderDiscount\n      firstOrderDiscountMaxCap\n      thumbnail\n      shipDirectLandingPageActive\n      catalogHeroImage\n      catalogMobileHeroImage\n      __typename\n    }\n    integrationDataForLocation(locationId: $locationId) {\n      id\n      customerNumber\n      taxRate\n      isAccountOnHold\n      deliveryDaysNote\n      accountHoldCode\n      isPONumberRequired\n      updatePoNumberWithOgName(isStandingOrderFlow: $isStandingOrderFlow)\n      __typename\n    }\n    orderingStatus\n    __typename\n  }\n  userData {\n    id\n    collapsedsections {\n      id\n      __typename\n    }\n    __typename\n  }\n  accountingcategory {\n    id\n    __typename\n  }\n  productSamples(locationId: $locationId) {\n    ...ProductSampleForOrderFragment\n    __typename\n  }\n  shipDirectEnabled\n  shipdirectvendors {\n    id\n    verifiedvendor {\n      id\n      __typename\n    }\n    __typename\n  }\n  isMergeOrdersOk\n  __typename\n}\n\nfragment ProductSampleForOrderFragment on ManufacturerProductSample {\n  id\n  unit\n  priceAmount {\n    money\n    float\n    __typename\n  }\n  canonicalproduct {\n    id\n    description\n    itemCode\n    normalizedItemCode\n    multiCartEnabled\n    shipDirect\n    thumbnail {\n      id\n      url\n      is360\n      __typename\n    }\n    distributioncentres {\n      id\n      code\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FormSectionFragment on FormSection {\n  id\n  stringID\n  title\n  placeholder\n  updated\n  multiUnitProducts(\n    showHiddenItems: $showHiddenItems\n    skipLocationPrivacy: $skipLocationPrivacy\n    offset: $offset\n    limit: $limit\n    useElasticSearch: $useElasticSearch\n  ) {\n    ...MultiUnitProductForOrderFragment\n    __typename\n  }\n  __typename\n}\n\nfragment MultiUnitProductForOrderFragment on MultiUnitProduct {\n  id\n  multiUnitGroupingId\n  itemCode\n  name\n  updated\n  taxable\n  sectionItemSequence\n  products {\n    id\n    name\n    archived(locationId: $locationId)\n    itemCode\n    shipDirect\n    instructionText\n    price(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      cents\n      __typename\n    }\n    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)\n    rebateAmount {\n      money\n      cents\n      __typename\n    }\n    productNotes(locationId: $locationId)\n    precut\n    prioritizePoundPriceInOG(locationId: $locationId)\n    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)\n    unit\n    abbreviatedUnit\n    par\n    lastOrderedLabel(locationId: $locationId)\n    lastOrderTimeAndQuantity(locationId: $locationId) {\n      quantity\n      lastOrderedTime\n      uom\n      daysAgo\n      price\n      poundPrice\n      __typename\n    }\n    showDiscontinued\n    isOutOfStock\n    isUnavailable\n    canonicalproduct {\n      id\n      itemCode\n      normalizedItemCode\n      description\n      pack\n      consumerCategory\n      discontinued(locationId: $locationId)\n      quickbooksRefID\n      syncedWithQB\n      shipDirect\n      specialOrder\n      jitItem\n      DWOItem\n      brandName\n      unavailable\n      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n      productNotes(locationId: $locationId)\n      displayManufacturerProductDetails\n      gtin\n      nameWithoutBrand\n      normalizedUoms\n      supplierOrderOnly(locationId: $locationId)\n      onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n      separateDirectShip\n      isCatchWeight\n      netWeight\n      volume\n      isGPOForCustomer(locationId: $locationId)\n      brokenCaseItem\n      currentStocks(locationId: $locationId) {\n        uom\n        value\n        __typename\n      }\n      quantityOnOrder {\n        uom\n        value\n        __typename\n      }\n      committedQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPOQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPODate {\n        uom\n        value\n        __typename\n      }\n      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        value\n        float\n        __typename\n      }\n      totalCost {\n        uom\n        value\n        float\n        __typename\n      }\n      salesMargin {\n        uom\n        value\n        float\n        __typename\n      }\n      markedAsNew\n      BEPRebatesEnabled\n      ...RebateConfigsFragment\n      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n      specialItem\n      forceShowSubstitutes(locationId: $locationId)\n      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        type\n        value\n        __typename\n      }\n      multiCartEnabled\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      l0category {\n        id\n        name\n        __typename\n      }\n      l1category {\n        id\n        name\n        __typename\n      }\n      l2category {\n        id\n        name\n        __typename\n      }\n      l3category {\n        id\n        name\n        __typename\n      }\n      l4category {\n        id\n        name\n        __typename\n      }\n      packSize\n      thumbnail {\n        id\n        url\n        is360\n        category\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      primaryImage {\n        id\n        url\n        __typename\n      }\n      productShopDataForStore {\n        id\n        sizeDescription\n        onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n        shopifyName\n        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n          unit\n          billedUnit\n          billedPrice {\n            float\n            money\n            __typename\n          }\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        productsubcategories {\n          id\n          name\n          productcategory {\n            id\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      allowsItemLevelInstructions\n      activeSubstitutions(locationId: $locationId) {\n        id\n        itemCode\n        normalizedItemCode\n        shopifyName\n        description\n        normalizedUoms\n        pack\n        activeAdCard {\n          id\n          __typename\n        }\n        manufacturer {\n          id\n          name\n          __typename\n        }\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        unitPriceEstimates {\n          unit\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        thumbnail {\n          id\n          url\n          __typename\n        }\n        primaryImage {\n          id\n          url\n          __typename\n        }\n        productShopDataForStore {\n          id\n          sizeDescription\n          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n            unit\n            price {\n              float\n              money\n              __typename\n            }\n            billedUnit\n            billedPrice {\n              float\n              money\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      verifiedvendor {\n        id\n        name\n        allowsRebates\n        supplierportalvendordata {\n          id\n          showCalculatedSecondaryPriceInCatalog\n          __typename\n        }\n        whiteLabel\n        showStocksInPortal\n        showStocksInOp\n        showCostInPortal\n        uomWiseStocksEnabled\n        uomWiseCostEnabled\n        showMarginInPortal\n        lowStockMargin\n        maxSalesMargin\n        minSalesMargin\n        spotPricingEnabled\n        poundSpotPricingEnabled\n        sendSpotPriceUpdatesEnabled\n        restrictPriceChangesBelowMinimumPriceEnabled\n        showOnlyCatchWeightPriceInOrderFlow\n        hideInventoryForJitAndSpecialOrderItems\n        showPriceWithAvg\n        hideZeroPrice\n        catalogDefaultUnit\n        __typename\n      }\n      manufacturerproduct {\n        id\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      productbrand {\n        id\n        displayName\n        __typename\n      }\n      searchKeywords\n      ...CanonicalProductDimensionsFragment\n      packSizePerUom {\n        uom\n        packSize\n        __typename\n      }\n      buyersName\n      __typename\n    }\n    doNotSub\n    defaultsubstitution {\n      id\n      __typename\n    }\n    eligibleForSwitchCashback\n    locations {\n      id\n      __typename\n    }\n    __typename\n  }\n  defaultUnit\n  __typename\n}\n\nfragment CanonicalProductDimensionsFragment on CanonicalProduct {\n  gtin\n  itemsPerPack\n  packsPerCase\n  totalItems\n  itemSizeType\n  itemSizeValue\n  itemSizeUOM\n  dimensionDetail\n  dimensionNotes\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">formForOrder</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query formForOrder($formId: ID!, $locationId: ID!, $showHiddenItems: Boolean, $skipLocationPrivacy: Boolean, $deliveryDate: String, $offset: Int, $limit: Int, $useElasticSearch: Boolean, $sectionId: ID, $sectionCategoryId: ID, $sortView: String, $searchString: String, $isStandingOrderFlow: Boolean = false) {
  form(id: $formId) {
    ...OrderGuidePageForm
    sectionsWithCount(
      location_id: $locationId
      showHiddenItems: $showHiddenItems
      skipLocationPrivacy: $skipLocationPrivacy
      useElasticSearch: $useElasticSearch
      sectionId: $sectionId
      sectionCategoryId: $sectionCategoryId
      sortView: $sortView
      offset: $offset
      limit: $limit
      searchString: $searchString
    ) {
      sections {
        ...FormSectionFragment
        __typename
      }
      fullCount
      __typename
    }
    offset
    approvalRequired
    isApprover(locationId: $locationId)
    continuableDraft(locationId: $locationId) {
      id
      date
      itemCount
      __typename
    }
    __typename
  }
}

fragment OrderGuidePageForm on Form {
  id
  name
  allowsInstructions
  maxInstructionChars
  deliveryFee
  isFromIntegration
  isEditable
  shouldDisableOrderingOutOfStockProducts(locationId: $locationId)
  lastUpdatedTimestamp
  allowsAddingItems(locationId: $locationId)
  isCatalogDisabledOnlyForOperator
  alwaysAddFromCatalog
  isCutDryDirect
  shipDirectEnabled
  cutOffDayOffset(locationId: $locationId)
  substitutionViewType
  isFetchStockCountsFromIntegrator
  multiCartAvailableDeliveryDays(locationId: $locationId) {
    cartCode
    deliveryDates {
      date
      cutoffTimestamp
      softCutoffTimestamp
      isVisibleToOperator
      __typename
    }
    __typename
  }
  availableDeliveryDays(locationId: $locationId) {
    date
    cutoffTimestamp
    softCutoffTimestamp
    isVisibleToOperator
    __typename
  }
  customerHolidays(locationId: $locationId)
  allowsPickup(locationId: $locationId)
  allowedFulfilmentTypes(locationId: $locationId)
  allowsMailDelivery
  allowsDelivery
  availablePickupDays(locationId: $locationId) {
    date
    cutoffTimestamp
    pickupTimes {
      time
      cutoffTimestamp
      __typename
    }
    __typename
  }
  availableDispatchDays(locationId: $locationId) {
    date
    cutoffTimestamp
    __typename
  }
  availableWeekdays(locationId: $locationId) {
    date
    cutoffTimestamp
    __typename
  }
  hasContactMethod(locationId: $locationId)
  hasShopExperience(locationId: $locationId)
  orderingDays
  company {
    id
    name
    whiteLabel
    hasActivePaymentMethods
    members @include(if: $isStandingOrderFlow) {
      id
      email
      name
      __typename
    }
    __typename
  }
  cutoffTimeString
  lastOrderedProductIds(location_id: $locationId)
  info
  locations(filterByID: $locationId) {
    id
    name
    nameWithCompany
    address
    streetAddress2
    city
    state
    zip
    locationshiptoaddresses {
      id
      asString
      __typename
    }
    __typename
  }
  vendor {
    id
    name
    isCutDryDirect
    catalogDisabled
    createOGDisabled
    payEnabled
    activeLocations {
      id
      name
      __typename
    }
    salespeople {
      id
      name
      allLocations
      locations {
        id
        __typename
      }
      __typename
    }
    hideSubstitutions
    verifiedvendor {
      id
      name
      operatorPortalName
      dateTerm
      allowsPickup
      allowsPickupSupplierPortalOnly
      manufacturerRebatesEnabled
      defaultFilters {
        queryStringKey
        filterOptions
        __typename
      }
      isQBIntegrated
      isScraperIntegrated
      isInstantScraperEnabled
      catalogViewType
      nestedCategoryEnabled
      filtersEnabled
      logoURL
      allowsOrderingDiscontinued
      autoCategorizeEnabled
      catalogLandingPageActive
      thumbnail
      catalogHomePageEnabled
      whiteLabel
      hardHoldMessage
      popularCategories {
        id
        name
        __typename
      }
      showDeliveryDateInOg
      showOnlyCatchWeightPriceInOrderFlow
      showProductSizeDescriptionInSubs
      showHeroImage
      showFeaturedItems
      showOnSaleItems
      showHeroImage
      showSmallerImages
      showFeaturedItems
      showOnSaleItems
      catalogHeroImage
      catalogSmallerImage1
      catalogSmallerImage2
      catalogMobileHeroImage
      catalogHeroImageUrl
      catalogSmallerImage1Url
      catalogSmallerImage2Url
      showStocksInPortal
      showPriceWithAvg
      showStocksInOp
      showCostInPortal
      uomWiseStocksEnabled
      uomWiseCostEnabled
      showMarginInPortal
      spotPricingEnabled
      cartSummaryVolumeEnabled
      cartSummaryWeightEnabled
      sendSpotPriceUpdatesEnabled
      lowStockMargin
      fetchOGPricesFromPricingServiceEnabled
      dateBasedPricingEnabled
      showDeliveryDateBasedJitCutoffs
      bepRebatesActive
      allowsRebates
      showPayBannerOnOrderConfirmation
      catalogSortIndex
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      supplierportalvendordata {
        id
        portalOverridesOrderMins
        splitWeightsActive
        sameDayDeliveryOffsetSeconds
        showLocationWisePricesForSubstitutes
        showSubstitutionsModalInPortal
        showItemLevelInstructionsInPortal
        showItemLevelInstructionsInOperator
        itemLevelInstructionLimit
        multipleShipTosEnabled
        chunkCountWaitLimit
        ogPageSize
        ogFirstPageSize
        defaultViewAsCustomer
        disableItemDeletesAndSubtractsForOrderEdits
        disableItemDeletesAndSubtractsForOrderEditsInPortal
        pickupTimeSelectEnabled
        showMemoCodeInOperatorPortal
        showMemoCodeInSupplierPortal
        multiCartEnabled
        avoidDefaultCaseStyling
        catalogInfoOnlyViewIfOnOG
        catalogInfoOnlyViewMessage
        totalCostMarginEnabled
        showOrderSummary
        disableDeliveryDateChangeForOrderEditsInOp
        disableDeliveryDateChangeForOrderEditsInPortal
        disableDeliveryDateChangeWarningMessage
        showLastOrderedPrice
        showLastOrderedPriceInPortal
        useTotalCostForMarginValidation
        showUnitPriceAsMainPriceInCatalog
        showCalculatedSecondaryPriceInCatalog
        persistsItemLevelInstructions
        hideZeroStockLabelInOP
        hideOutOfStockLabelInSP
        showUnavailableInsteadOfOutOfStock
        poundSpotPricingEnabled
        disableOrderingOutOfStockProductsWithoutSubstitutes
        checkForZeroPricedItems
        showLastOrderedPoundPrice
        preserveCartItemOrder
        validateMarginInPortal
        disableEditingPoundQuantity
        blockPartialQuantityOrdering
        blockPartialQuantityOrderingInOperatorPortal
        accountHoldAlertsEnabled
        hideCatchWeightUnitPriceInCatalog
        showDistributionCentreLabels
        offlineOrderingEnabled
        catalogOnlyOrderFlowEnabled
        dateBasedPricingBannerDisabled
        showPurchaseHistory
        quickAddViewEnabledStatus
        simpleListViewEnabledStatus
        enabledLargeProductTiles
        enabledAdditionalDescriptions
        enabledTiHiPalletDetails
        __typename
      }
      restrictPriceChangesBelowMinimumPriceEnabled
      splitSpecialOrders
      sortOGByItemCode
      showCaseDiscountsDisclaimerMessage
      disableOrderingZeroPricedItems
      disableOrderingSpecialOrderItems
      __typename
    }
    shipdirectverifiedvendor {
      id
      shippingFeeWaived
      shippingFeeWaivedUntil
      firstOrderDiscounted
      firstOrderDiscount
      firstOrderDiscountMaxCap
      thumbnail
      shipDirectLandingPageActive
      catalogHeroImage
      catalogMobileHeroImage
      __typename
    }
    integrationDataForLocation(locationId: $locationId) {
      id
      customerNumber
      taxRate
      isAccountOnHold
      deliveryDaysNote
      accountHoldCode
      isPONumberRequired
      updatePoNumberWithOgName(isStandingOrderFlow: $isStandingOrderFlow)
      __typename
    }
    orderingStatus
    __typename
  }
  userData {
    id
    collapsedsections {
      id
      __typename
    }
    __typename
  }
  accountingcategory {
    id
    __typename
  }
  productSamples(locationId: $locationId) {
    ...ProductSampleForOrderFragment
    __typename
  }
  shipDirectEnabled
  shipdirectvendors {
    id
    verifiedvendor {
      id
      __typename
    }
    __typename
  }
  isMergeOrdersOk
  __typename
}

fragment ProductSampleForOrderFragment on ManufacturerProductSample {
  id
  unit
  priceAmount {
    money
    float
    __typename
  }
  canonicalproduct {
    id
    description
    itemCode
    normalizedItemCode
    multiCartEnabled
    shipDirect
    thumbnail {
      id
      url
      is360
      __typename
    }
    distributioncentres {
      id
      code
      __typename
    }
    __typename
  }
  __typename
}

fragment FormSectionFragment on FormSection {
  id
  stringID
  title
  placeholder
  updated
  multiUnitProducts(
    showHiddenItems: $showHiddenItems
    skipLocationPrivacy: $skipLocationPrivacy
    offset: $offset
    limit: $limit
    useElasticSearch: $useElasticSearch
  ) {
    ...MultiUnitProductForOrderFragment
    __typename
  }
  __typename
}

fragment MultiUnitProductForOrderFragment on MultiUnitProduct {
  id
  multiUnitGroupingId
  itemCode
  name
  updated
  taxable
  sectionItemSequence
  products {
    id
    name
    archived(locationId: $locationId)
    itemCode
    shipDirect
    instructionText
    price(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      cents
      __typename
    }
    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)
    rebateAmount {
      money
      cents
      __typename
    }
    productNotes(locationId: $locationId)
    precut
    prioritizePoundPriceInOG(locationId: $locationId)
    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)
    unit
    abbreviatedUnit
    par
    lastOrderedLabel(locationId: $locationId)
    lastOrderTimeAndQuantity(locationId: $locationId) {
      quantity
      lastOrderedTime
      uom
      daysAgo
      price
      poundPrice
      __typename
    }
    showDiscontinued
    isOutOfStock
    isUnavailable
    canonicalproduct {
      id
      itemCode
      normalizedItemCode
      description
      pack
      consumerCategory
      discontinued(locationId: $locationId)
      quickbooksRefID
      syncedWithQB
      shipDirect
      specialOrder
      jitItem
      DWOItem
      brandName
      unavailable
      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
      productNotes(locationId: $locationId)
      displayManufacturerProductDetails
      gtin
      nameWithoutBrand
      normalizedUoms
      supplierOrderOnly(locationId: $locationId)
      onSale(locationId: $locationId, deliveryDate: $deliveryDate)
      separateDirectShip
      isCatchWeight
      netWeight
      volume
      isGPOForCustomer(locationId: $locationId)
      brokenCaseItem
      currentStocks(locationId: $locationId) {
        uom
        value
        __typename
      }
      quantityOnOrder {
        uom
        value
        __typename
      }
      committedQuantity {
        uom
        value
        __typename
      }
      nextPOQuantity {
        uom
        value
        __typename
      }
      nextPODate {
        uom
        value
        __typename
      }
      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        value
        float
        __typename
      }
      totalCost {
        uom
        value
        float
        __typename
      }
      salesMargin {
        uom
        value
        float
        __typename
      }
      markedAsNew
      BEPRebatesEnabled
      ...RebateConfigsFragment
      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
      specialItem
      forceShowSubstitutes(locationId: $locationId)
      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        type
        value
        __typename
      }
      multiCartEnabled
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      l0category {
        id
        name
        __typename
      }
      l1category {
        id
        name
        __typename
      }
      l2category {
        id
        name
        __typename
      }
      l3category {
        id
        name
        __typename
      }
      l4category {
        id
        name
        __typename
      }
      packSize
      thumbnail {
        id
        url
        is360
        category
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      primaryImage {
        id
        url
        __typename
      }
      productShopDataForStore {
        id
        sizeDescription
        onSale(locationId: $locationId, deliveryDate: $deliveryDate)
        shopifyName
        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
          unit
          billedUnit
          billedPrice {
            float
            money
            __typename
          }
          price {
            float
            money
            __typename
          }
          __typename
        }
        productsubcategories {
          id
          name
          productcategory {
            id
            name
            __typename
          }
          __typename
        }
        __typename
      }
      allowsItemLevelInstructions
      activeSubstitutions(locationId: $locationId) {
        id
        itemCode
        normalizedItemCode
        shopifyName
        description
        normalizedUoms
        pack
        activeAdCard {
          id
          __typename
        }
        manufacturer {
          id
          name
          __typename
        }
        productbrand {
          id
          displayName
          __typename
        }
        unitPriceEstimates {
          unit
          price {
            float
            money
            __typename
          }
          __typename
        }
        thumbnail {
          id
          url
          __typename
        }
        primaryImage {
          id
          url
          __typename
        }
        productShopDataForStore {
          id
          sizeDescription
          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
            unit
            price {
              float
              money
              __typename
            }
            billedUnit
            billedPrice {
              float
              money
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      verifiedvendor {
        id
        name
        allowsRebates
        supplierportalvendordata {
          id
          showCalculatedSecondaryPriceInCatalog
          __typename
        }
        whiteLabel
        showStocksInPortal
        showStocksInOp
        showCostInPortal
        uomWiseStocksEnabled
        uomWiseCostEnabled
        showMarginInPortal
        lowStockMargin
        maxSalesMargin
        minSalesMargin
        spotPricingEnabled
        poundSpotPricingEnabled
        sendSpotPriceUpdatesEnabled
        restrictPriceChangesBelowMinimumPriceEnabled
        showOnlyCatchWeightPriceInOrderFlow
        hideInventoryForJitAndSpecialOrderItems
        showPriceWithAvg
        hideZeroPrice
        catalogDefaultUnit
        __typename
      }
      manufacturerproduct {
        id
        productbrand {
          id
          displayName
          __typename
        }
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      productbrand {
        id
        displayName
        __typename
      }
      searchKeywords
      ...CanonicalProductDimensionsFragment
      packSizePerUom {
        uom
        packSize
        __typename
      }
      buyersName
      __typename
    }
    doNotSub
    defaultsubstitution {
      id
      __typename
    }
    eligibleForSwitchCashback
    locations {
      id
      __typename
    }
    __typename
  }
  defaultUnit
  __typename
}

fragment CanonicalProductDimensionsFragment on CanonicalProduct {
  gtin
  itemsPerPack
  packsPerCase
  totalItems
  itemSizeType
  itemSizeValue
  itemSizeUOM
  dimensionDetail
  dimensionNotes
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;isStandingOrderFlow&quot;:false,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;sortView&quot;:null,&quot;offset&quot;:0,&quot;limit&quot;:15,&quot;deliveryDate&quot;:&quot;2025-07-09&quot;,&quot;useElasticSearch&quot;:true,&quot;sectionId&quot;:null,&quot;sectionCategoryId&quot;:null}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">6c53a4555d9cb3129e802e15d001beb7ad0985461fbc282e684d9180574896891751985058</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-443 [formForDefaultView]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;formForDefaultView&quot;,&quot;variables&quot;:{&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;},&quot;query&quot;:&quot;query formForDefaultView($formId: ID!, $locationId: ID) {\n  form(id: $formId) {\n    id\n    defaultView(locationId: $locationId)\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">formForDefaultView</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query formForDefaultView($formId: ID!, $locationId: ID) {
  form(id: $formId) {
    id
    defaultView(locationId: $locationId)
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?verifiedVendorId=46017666&amp;ogSortView=categorized_view</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">47b06397ab5ed199e6bd053f192bda6016bce79d41b7d771d123026e496f57df1751985111</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-435 [PurchaseHistoryQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;PurchaseHistoryQuery&quot;,&quot;variables&quot;:{&quot;locationId&quot;:&quot;103430762&quot;,&quot;vendorId&quot;:&quot;103430775&quot;},&quot;query&quot;:&quot;query PurchaseHistoryQuery($locationId: ID!, $vendorId: ID!) {\n  locationById(id: $locationId) {\n    id\n    name\n    purchaseHistory(vendorId: $vendorId) {\n      mupGroupingId\n      itemOrderDatas {\n        orderedTimestamp\n        itemUnitOrderDatas {\n          normalizedUnit\n          abbreviatedUnit\n          quantity\n          price\n          poundPrice\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">PurchaseHistoryQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query PurchaseHistoryQuery($locationId: ID!, $vendorId: ID!) {
  locationById(id: $locationId) {
    id
    name
    purchaseHistory(vendorId: $vendorId) {
      mupGroupingId
      itemOrderDatas {
        orderedTimestamp
        itemUnitOrderDatas {
          normalizedUnit
          abbreviatedUnit
          quantity
          price
          poundPrice
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;locationId&quot;:&quot;103430762&quot;,&quot;vendorId&quot;:&quot;103430775&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">6c53a4555d9cb3129e802e15d001beb7ad0985461fbc282e684d9180574896891751985058</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-453 [orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:&quot;103430775&quot;,&quot;locationId&quot;:&quot;103430762&quot;},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:&quot;103430775&quot;,&quot;locationId&quot;:&quot;103430762&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">2363539d763820d722cf45e38c49d49188a75864a5449dc0668902f3042c6ccc1751985113</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-445 [formForOrder]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;formForOrder&quot;,&quot;variables&quot;:{&quot;isStandingOrderFlow&quot;:false,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;sortView&quot;:&quot;categorized_view&quot;,&quot;offset&quot;:0,&quot;limit&quot;:15,&quot;deliveryDate&quot;:&quot;2025-07-09&quot;,&quot;useElasticSearch&quot;:true,&quot;sectionId&quot;:null,&quot;sectionCategoryId&quot;:null},&quot;query&quot;:&quot;query formForOrder($formId: ID!, $locationId: ID!, $showHiddenItems: Boolean, $skipLocationPrivacy: Boolean, $deliveryDate: String, $offset: Int, $limit: Int, $useElasticSearch: Boolean, $sectionId: ID, $sectionCategoryId: ID, $sortView: String, $searchString: String, $isStandingOrderFlow: Boolean = false) {\n  form(id: $formId) {\n    ...OrderGuidePageForm\n    sectionsWithCount(\n      location_id: $locationId\n      showHiddenItems: $showHiddenItems\n      skipLocationPrivacy: $skipLocationPrivacy\n      useElasticSearch: $useElasticSearch\n      sectionId: $sectionId\n      sectionCategoryId: $sectionCategoryId\n      sortView: $sortView\n      offset: $offset\n      limit: $limit\n      searchString: $searchString\n    ) {\n      sections {\n        ...FormSectionFragment\n        __typename\n      }\n      fullCount\n      __typename\n    }\n    offset\n    approvalRequired\n    isApprover(locationId: $locationId)\n    continuableDraft(locationId: $locationId) {\n      id\n      date\n      itemCount\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment OrderGuidePageForm on Form {\n  id\n  name\n  allowsInstructions\n  maxInstructionChars\n  deliveryFee\n  isFromIntegration\n  isEditable\n  shouldDisableOrderingOutOfStockProducts(locationId: $locationId)\n  lastUpdatedTimestamp\n  allowsAddingItems(locationId: $locationId)\n  isCatalogDisabledOnlyForOperator\n  alwaysAddFromCatalog\n  isCutDryDirect\n  shipDirectEnabled\n  cutOffDayOffset(locationId: $locationId)\n  substitutionViewType\n  isFetchStockCountsFromIntegrator\n  multiCartAvailableDeliveryDays(locationId: $locationId) {\n    cartCode\n    deliveryDates {\n      date\n      cutoffTimestamp\n      softCutoffTimestamp\n      isVisibleToOperator\n      __typename\n    }\n    __typename\n  }\n  availableDeliveryDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    softCutoffTimestamp\n    isVisibleToOperator\n    __typename\n  }\n  customerHolidays(locationId: $locationId)\n  allowsPickup(locationId: $locationId)\n  allowedFulfilmentTypes(locationId: $locationId)\n  allowsMailDelivery\n  allowsDelivery\n  availablePickupDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    pickupTimes {\n      time\n      cutoffTimestamp\n      __typename\n    }\n    __typename\n  }\n  availableDispatchDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    __typename\n  }\n  availableWeekdays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    __typename\n  }\n  hasContactMethod(locationId: $locationId)\n  hasShopExperience(locationId: $locationId)\n  orderingDays\n  company {\n    id\n    name\n    whiteLabel\n    hasActivePaymentMethods\n    members @include(if: $isStandingOrderFlow) {\n      id\n      email\n      name\n      __typename\n    }\n    __typename\n  }\n  cutoffTimeString\n  lastOrderedProductIds(location_id: $locationId)\n  info\n  locations(filterByID: $locationId) {\n    id\n    name\n    nameWithCompany\n    address\n    streetAddress2\n    city\n    state\n    zip\n    locationshiptoaddresses {\n      id\n      asString\n      __typename\n    }\n    __typename\n  }\n  vendor {\n    id\n    name\n    isCutDryDirect\n    catalogDisabled\n    createOGDisabled\n    payEnabled\n    activeLocations {\n      id\n      name\n      __typename\n    }\n    salespeople {\n      id\n      name\n      allLocations\n      locations {\n        id\n        __typename\n      }\n      __typename\n    }\n    hideSubstitutions\n    verifiedvendor {\n      id\n      name\n      operatorPortalName\n      dateTerm\n      allowsPickup\n      allowsPickupSupplierPortalOnly\n      manufacturerRebatesEnabled\n      defaultFilters {\n        queryStringKey\n        filterOptions\n        __typename\n      }\n      isQBIntegrated\n      isScraperIntegrated\n      isInstantScraperEnabled\n      catalogViewType\n      nestedCategoryEnabled\n      filtersEnabled\n      logoURL\n      allowsOrderingDiscontinued\n      autoCategorizeEnabled\n      catalogLandingPageActive\n      thumbnail\n      catalogHomePageEnabled\n      whiteLabel\n      hardHoldMessage\n      popularCategories {\n        id\n        name\n        __typename\n      }\n      showDeliveryDateInOg\n      showOnlyCatchWeightPriceInOrderFlow\n      showProductSizeDescriptionInSubs\n      showHeroImage\n      showFeaturedItems\n      showOnSaleItems\n      showHeroImage\n      showSmallerImages\n      showFeaturedItems\n      showOnSaleItems\n      catalogHeroImage\n      catalogSmallerImage1\n      catalogSmallerImage2\n      catalogMobileHeroImage\n      catalogHeroImageUrl\n      catalogSmallerImage1Url\n      catalogSmallerImage2Url\n      showStocksInPortal\n      showPriceWithAvg\n      showStocksInOp\n      showCostInPortal\n      uomWiseStocksEnabled\n      uomWiseCostEnabled\n      showMarginInPortal\n      spotPricingEnabled\n      cartSummaryVolumeEnabled\n      cartSummaryWeightEnabled\n      sendSpotPriceUpdatesEnabled\n      lowStockMargin\n      fetchOGPricesFromPricingServiceEnabled\n      dateBasedPricingEnabled\n      showDeliveryDateBasedJitCutoffs\n      bepRebatesActive\n      allowsRebates\n      showPayBannerOnOrderConfirmation\n      catalogSortIndex\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      supplierportalvendordata {\n        id\n        portalOverridesOrderMins\n        splitWeightsActive\n        sameDayDeliveryOffsetSeconds\n        showLocationWisePricesForSubstitutes\n        showSubstitutionsModalInPortal\n        showItemLevelInstructionsInPortal\n        showItemLevelInstructionsInOperator\n        itemLevelInstructionLimit\n        multipleShipTosEnabled\n        chunkCountWaitLimit\n        ogPageSize\n        ogFirstPageSize\n        defaultViewAsCustomer\n        disableItemDeletesAndSubtractsForOrderEdits\n        disableItemDeletesAndSubtractsForOrderEditsInPortal\n        pickupTimeSelectEnabled\n        showMemoCodeInOperatorPortal\n        showMemoCodeInSupplierPortal\n        multiCartEnabled\n        avoidDefaultCaseStyling\n        catalogInfoOnlyViewIfOnOG\n        catalogInfoOnlyViewMessage\n        totalCostMarginEnabled\n        showOrderSummary\n        disableDeliveryDateChangeForOrderEditsInOp\n        disableDeliveryDateChangeForOrderEditsInPortal\n        disableDeliveryDateChangeWarningMessage\n        showLastOrderedPrice\n        showLastOrderedPriceInPortal\n        useTotalCostForMarginValidation\n        showUnitPriceAsMainPriceInCatalog\n        showCalculatedSecondaryPriceInCatalog\n        persistsItemLevelInstructions\n        hideZeroStockLabelInOP\n        hideOutOfStockLabelInSP\n        showUnavailableInsteadOfOutOfStock\n        poundSpotPricingEnabled\n        disableOrderingOutOfStockProductsWithoutSubstitutes\n        checkForZeroPricedItems\n        showLastOrderedPoundPrice\n        preserveCartItemOrder\n        validateMarginInPortal\n        disableEditingPoundQuantity\n        blockPartialQuantityOrdering\n        blockPartialQuantityOrderingInOperatorPortal\n        accountHoldAlertsEnabled\n        hideCatchWeightUnitPriceInCatalog\n        showDistributionCentreLabels\n        offlineOrderingEnabled\n        catalogOnlyOrderFlowEnabled\n        dateBasedPricingBannerDisabled\n        showPurchaseHistory\n        quickAddViewEnabledStatus\n        simpleListViewEnabledStatus\n        enabledLargeProductTiles\n        enabledAdditionalDescriptions\n        enabledTiHiPalletDetails\n        __typename\n      }\n      restrictPriceChangesBelowMinimumPriceEnabled\n      splitSpecialOrders\n      sortOGByItemCode\n      showCaseDiscountsDisclaimerMessage\n      disableOrderingZeroPricedItems\n      disableOrderingSpecialOrderItems\n      __typename\n    }\n    shipdirectverifiedvendor {\n      id\n      shippingFeeWaived\n      shippingFeeWaivedUntil\n      firstOrderDiscounted\n      firstOrderDiscount\n      firstOrderDiscountMaxCap\n      thumbnail\n      shipDirectLandingPageActive\n      catalogHeroImage\n      catalogMobileHeroImage\n      __typename\n    }\n    integrationDataForLocation(locationId: $locationId) {\n      id\n      customerNumber\n      taxRate\n      isAccountOnHold\n      deliveryDaysNote\n      accountHoldCode\n      isPONumberRequired\n      updatePoNumberWithOgName(isStandingOrderFlow: $isStandingOrderFlow)\n      __typename\n    }\n    orderingStatus\n    __typename\n  }\n  userData {\n    id\n    collapsedsections {\n      id\n      __typename\n    }\n    __typename\n  }\n  accountingcategory {\n    id\n    __typename\n  }\n  productSamples(locationId: $locationId) {\n    ...ProductSampleForOrderFragment\n    __typename\n  }\n  shipDirectEnabled\n  shipdirectvendors {\n    id\n    verifiedvendor {\n      id\n      __typename\n    }\n    __typename\n  }\n  isMergeOrdersOk\n  __typename\n}\n\nfragment ProductSampleForOrderFragment on ManufacturerProductSample {\n  id\n  unit\n  priceAmount {\n    money\n    float\n    __typename\n  }\n  canonicalproduct {\n    id\n    description\n    itemCode\n    normalizedItemCode\n    multiCartEnabled\n    shipDirect\n    thumbnail {\n      id\n      url\n      is360\n      __typename\n    }\n    distributioncentres {\n      id\n      code\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FormSectionFragment on FormSection {\n  id\n  stringID\n  title\n  placeholder\n  updated\n  multiUnitProducts(\n    showHiddenItems: $showHiddenItems\n    skipLocationPrivacy: $skipLocationPrivacy\n    offset: $offset\n    limit: $limit\n    useElasticSearch: $useElasticSearch\n  ) {\n    ...MultiUnitProductForOrderFragment\n    __typename\n  }\n  __typename\n}\n\nfragment MultiUnitProductForOrderFragment on MultiUnitProduct {\n  id\n  multiUnitGroupingId\n  itemCode\n  name\n  updated\n  taxable\n  sectionItemSequence\n  products {\n    id\n    name\n    archived(locationId: $locationId)\n    itemCode\n    shipDirect\n    instructionText\n    price(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      cents\n      __typename\n    }\n    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)\n    rebateAmount {\n      money\n      cents\n      __typename\n    }\n    productNotes(locationId: $locationId)\n    precut\n    prioritizePoundPriceInOG(locationId: $locationId)\n    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)\n    unit\n    abbreviatedUnit\n    par\n    lastOrderedLabel(locationId: $locationId)\n    lastOrderTimeAndQuantity(locationId: $locationId) {\n      quantity\n      lastOrderedTime\n      uom\n      daysAgo\n      price\n      poundPrice\n      __typename\n    }\n    showDiscontinued\n    isOutOfStock\n    isUnavailable\n    canonicalproduct {\n      id\n      itemCode\n      normalizedItemCode\n      description\n      pack\n      consumerCategory\n      discontinued(locationId: $locationId)\n      quickbooksRefID\n      syncedWithQB\n      shipDirect\n      specialOrder\n      jitItem\n      DWOItem\n      brandName\n      unavailable\n      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n      productNotes(locationId: $locationId)\n      displayManufacturerProductDetails\n      gtin\n      nameWithoutBrand\n      normalizedUoms\n      supplierOrderOnly(locationId: $locationId)\n      onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n      separateDirectShip\n      isCatchWeight\n      netWeight\n      volume\n      isGPOForCustomer(locationId: $locationId)\n      brokenCaseItem\n      currentStocks(locationId: $locationId) {\n        uom\n        value\n        __typename\n      }\n      quantityOnOrder {\n        uom\n        value\n        __typename\n      }\n      committedQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPOQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPODate {\n        uom\n        value\n        __typename\n      }\n      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        value\n        float\n        __typename\n      }\n      totalCost {\n        uom\n        value\n        float\n        __typename\n      }\n      salesMargin {\n        uom\n        value\n        float\n        __typename\n      }\n      markedAsNew\n      BEPRebatesEnabled\n      ...RebateConfigsFragment\n      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n      specialItem\n      forceShowSubstitutes(locationId: $locationId)\n      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        type\n        value\n        __typename\n      }\n      multiCartEnabled\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      l0category {\n        id\n        name\n        __typename\n      }\n      l1category {\n        id\n        name\n        __typename\n      }\n      l2category {\n        id\n        name\n        __typename\n      }\n      l3category {\n        id\n        name\n        __typename\n      }\n      l4category {\n        id\n        name\n        __typename\n      }\n      packSize\n      thumbnail {\n        id\n        url\n        is360\n        category\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      primaryImage {\n        id\n        url\n        __typename\n      }\n      productShopDataForStore {\n        id\n        sizeDescription\n        onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n        shopifyName\n        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n          unit\n          billedUnit\n          billedPrice {\n            float\n            money\n            __typename\n          }\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        productsubcategories {\n          id\n          name\n          productcategory {\n            id\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      allowsItemLevelInstructions\n      activeSubstitutions(locationId: $locationId) {\n        id\n        itemCode\n        normalizedItemCode\n        shopifyName\n        description\n        normalizedUoms\n        pack\n        activeAdCard {\n          id\n          __typename\n        }\n        manufacturer {\n          id\n          name\n          __typename\n        }\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        unitPriceEstimates {\n          unit\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        thumbnail {\n          id\n          url\n          __typename\n        }\n        primaryImage {\n          id\n          url\n          __typename\n        }\n        productShopDataForStore {\n          id\n          sizeDescription\n          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n            unit\n            price {\n              float\n              money\n              __typename\n            }\n            billedUnit\n            billedPrice {\n              float\n              money\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      verifiedvendor {\n        id\n        name\n        allowsRebates\n        supplierportalvendordata {\n          id\n          showCalculatedSecondaryPriceInCatalog\n          __typename\n        }\n        whiteLabel\n        showStocksInPortal\n        showStocksInOp\n        showCostInPortal\n        uomWiseStocksEnabled\n        uomWiseCostEnabled\n        showMarginInPortal\n        lowStockMargin\n        maxSalesMargin\n        minSalesMargin\n        spotPricingEnabled\n        poundSpotPricingEnabled\n        sendSpotPriceUpdatesEnabled\n        restrictPriceChangesBelowMinimumPriceEnabled\n        showOnlyCatchWeightPriceInOrderFlow\n        hideInventoryForJitAndSpecialOrderItems\n        showPriceWithAvg\n        hideZeroPrice\n        catalogDefaultUnit\n        __typename\n      }\n      manufacturerproduct {\n        id\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      productbrand {\n        id\n        displayName\n        __typename\n      }\n      searchKeywords\n      ...CanonicalProductDimensionsFragment\n      packSizePerUom {\n        uom\n        packSize\n        __typename\n      }\n      buyersName\n      __typename\n    }\n    doNotSub\n    defaultsubstitution {\n      id\n      __typename\n    }\n    eligibleForSwitchCashback\n    locations {\n      id\n      __typename\n    }\n    __typename\n  }\n  defaultUnit\n  __typename\n}\n\nfragment CanonicalProductDimensionsFragment on CanonicalProduct {\n  gtin\n  itemsPerPack\n  packsPerCase\n  totalItems\n  itemSizeType\n  itemSizeValue\n  itemSizeUOM\n  dimensionDetail\n  dimensionNotes\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">formForOrder</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query formForOrder($formId: ID!, $locationId: ID!, $showHiddenItems: Boolean, $skipLocationPrivacy: Boolean, $deliveryDate: String, $offset: Int, $limit: Int, $useElasticSearch: Boolean, $sectionId: ID, $sectionCategoryId: ID, $sortView: String, $searchString: String, $isStandingOrderFlow: Boolean = false) {
  form(id: $formId) {
    ...OrderGuidePageForm
    sectionsWithCount(
      location_id: $locationId
      showHiddenItems: $showHiddenItems
      skipLocationPrivacy: $skipLocationPrivacy
      useElasticSearch: $useElasticSearch
      sectionId: $sectionId
      sectionCategoryId: $sectionCategoryId
      sortView: $sortView
      offset: $offset
      limit: $limit
      searchString: $searchString
    ) {
      sections {
        ...FormSectionFragment
        __typename
      }
      fullCount
      __typename
    }
    offset
    approvalRequired
    isApprover(locationId: $locationId)
    continuableDraft(locationId: $locationId) {
      id
      date
      itemCount
      __typename
    }
    __typename
  }
}

fragment OrderGuidePageForm on Form {
  id
  name
  allowsInstructions
  maxInstructionChars
  deliveryFee
  isFromIntegration
  isEditable
  shouldDisableOrderingOutOfStockProducts(locationId: $locationId)
  lastUpdatedTimestamp
  allowsAddingItems(locationId: $locationId)
  isCatalogDisabledOnlyForOperator
  alwaysAddFromCatalog
  isCutDryDirect
  shipDirectEnabled
  cutOffDayOffset(locationId: $locationId)
  substitutionViewType
  isFetchStockCountsFromIntegrator
  multiCartAvailableDeliveryDays(locationId: $locationId) {
    cartCode
    deliveryDates {
      date
      cutoffTimestamp
      softCutoffTimestamp
      isVisibleToOperator
      __typename
    }
    __typename
  }
  availableDeliveryDays(locationId: $locationId) {
    date
    cutoffTimestamp
    softCutoffTimestamp
    isVisibleToOperator
    __typename
  }
  customerHolidays(locationId: $locationId)
  allowsPickup(locationId: $locationId)
  allowedFulfilmentTypes(locationId: $locationId)
  allowsMailDelivery
  allowsDelivery
  availablePickupDays(locationId: $locationId) {
    date
    cutoffTimestamp
    pickupTimes {
      time
      cutoffTimestamp
      __typename
    }
    __typename
  }
  availableDispatchDays(locationId: $locationId) {
    date
    cutoffTimestamp
    __typename
  }
  availableWeekdays(locationId: $locationId) {
    date
    cutoffTimestamp
    __typename
  }
  hasContactMethod(locationId: $locationId)
  hasShopExperience(locationId: $locationId)
  orderingDays
  company {
    id
    name
    whiteLabel
    hasActivePaymentMethods
    members @include(if: $isStandingOrderFlow) {
      id
      email
      name
      __typename
    }
    __typename
  }
  cutoffTimeString
  lastOrderedProductIds(location_id: $locationId)
  info
  locations(filterByID: $locationId) {
    id
    name
    nameWithCompany
    address
    streetAddress2
    city
    state
    zip
    locationshiptoaddresses {
      id
      asString
      __typename
    }
    __typename
  }
  vendor {
    id
    name
    isCutDryDirect
    catalogDisabled
    createOGDisabled
    payEnabled
    activeLocations {
      id
      name
      __typename
    }
    salespeople {
      id
      name
      allLocations
      locations {
        id
        __typename
      }
      __typename
    }
    hideSubstitutions
    verifiedvendor {
      id
      name
      operatorPortalName
      dateTerm
      allowsPickup
      allowsPickupSupplierPortalOnly
      manufacturerRebatesEnabled
      defaultFilters {
        queryStringKey
        filterOptions
        __typename
      }
      isQBIntegrated
      isScraperIntegrated
      isInstantScraperEnabled
      catalogViewType
      nestedCategoryEnabled
      filtersEnabled
      logoURL
      allowsOrderingDiscontinued
      autoCategorizeEnabled
      catalogLandingPageActive
      thumbnail
      catalogHomePageEnabled
      whiteLabel
      hardHoldMessage
      popularCategories {
        id
        name
        __typename
      }
      showDeliveryDateInOg
      showOnlyCatchWeightPriceInOrderFlow
      showProductSizeDescriptionInSubs
      showHeroImage
      showFeaturedItems
      showOnSaleItems
      showHeroImage
      showSmallerImages
      showFeaturedItems
      showOnSaleItems
      catalogHeroImage
      catalogSmallerImage1
      catalogSmallerImage2
      catalogMobileHeroImage
      catalogHeroImageUrl
      catalogSmallerImage1Url
      catalogSmallerImage2Url
      showStocksInPortal
      showPriceWithAvg
      showStocksInOp
      showCostInPortal
      uomWiseStocksEnabled
      uomWiseCostEnabled
      showMarginInPortal
      spotPricingEnabled
      cartSummaryVolumeEnabled
      cartSummaryWeightEnabled
      sendSpotPriceUpdatesEnabled
      lowStockMargin
      fetchOGPricesFromPricingServiceEnabled
      dateBasedPricingEnabled
      showDeliveryDateBasedJitCutoffs
      bepRebatesActive
      allowsRebates
      showPayBannerOnOrderConfirmation
      catalogSortIndex
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      supplierportalvendordata {
        id
        portalOverridesOrderMins
        splitWeightsActive
        sameDayDeliveryOffsetSeconds
        showLocationWisePricesForSubstitutes
        showSubstitutionsModalInPortal
        showItemLevelInstructionsInPortal
        showItemLevelInstructionsInOperator
        itemLevelInstructionLimit
        multipleShipTosEnabled
        chunkCountWaitLimit
        ogPageSize
        ogFirstPageSize
        defaultViewAsCustomer
        disableItemDeletesAndSubtractsForOrderEdits
        disableItemDeletesAndSubtractsForOrderEditsInPortal
        pickupTimeSelectEnabled
        showMemoCodeInOperatorPortal
        showMemoCodeInSupplierPortal
        multiCartEnabled
        avoidDefaultCaseStyling
        catalogInfoOnlyViewIfOnOG
        catalogInfoOnlyViewMessage
        totalCostMarginEnabled
        showOrderSummary
        disableDeliveryDateChangeForOrderEditsInOp
        disableDeliveryDateChangeForOrderEditsInPortal
        disableDeliveryDateChangeWarningMessage
        showLastOrderedPrice
        showLastOrderedPriceInPortal
        useTotalCostForMarginValidation
        showUnitPriceAsMainPriceInCatalog
        showCalculatedSecondaryPriceInCatalog
        persistsItemLevelInstructions
        hideZeroStockLabelInOP
        hideOutOfStockLabelInSP
        showUnavailableInsteadOfOutOfStock
        poundSpotPricingEnabled
        disableOrderingOutOfStockProductsWithoutSubstitutes
        checkForZeroPricedItems
        showLastOrderedPoundPrice
        preserveCartItemOrder
        validateMarginInPortal
        disableEditingPoundQuantity
        blockPartialQuantityOrdering
        blockPartialQuantityOrderingInOperatorPortal
        accountHoldAlertsEnabled
        hideCatchWeightUnitPriceInCatalog
        showDistributionCentreLabels
        offlineOrderingEnabled
        catalogOnlyOrderFlowEnabled
        dateBasedPricingBannerDisabled
        showPurchaseHistory
        quickAddViewEnabledStatus
        simpleListViewEnabledStatus
        enabledLargeProductTiles
        enabledAdditionalDescriptions
        enabledTiHiPalletDetails
        __typename
      }
      restrictPriceChangesBelowMinimumPriceEnabled
      splitSpecialOrders
      sortOGByItemCode
      showCaseDiscountsDisclaimerMessage
      disableOrderingZeroPricedItems
      disableOrderingSpecialOrderItems
      __typename
    }
    shipdirectverifiedvendor {
      id
      shippingFeeWaived
      shippingFeeWaivedUntil
      firstOrderDiscounted
      firstOrderDiscount
      firstOrderDiscountMaxCap
      thumbnail
      shipDirectLandingPageActive
      catalogHeroImage
      catalogMobileHeroImage
      __typename
    }
    integrationDataForLocation(locationId: $locationId) {
      id
      customerNumber
      taxRate
      isAccountOnHold
      deliveryDaysNote
      accountHoldCode
      isPONumberRequired
      updatePoNumberWithOgName(isStandingOrderFlow: $isStandingOrderFlow)
      __typename
    }
    orderingStatus
    __typename
  }
  userData {
    id
    collapsedsections {
      id
      __typename
    }
    __typename
  }
  accountingcategory {
    id
    __typename
  }
  productSamples(locationId: $locationId) {
    ...ProductSampleForOrderFragment
    __typename
  }
  shipDirectEnabled
  shipdirectvendors {
    id
    verifiedvendor {
      id
      __typename
    }
    __typename
  }
  isMergeOrdersOk
  __typename
}

fragment ProductSampleForOrderFragment on ManufacturerProductSample {
  id
  unit
  priceAmount {
    money
    float
    __typename
  }
  canonicalproduct {
    id
    description
    itemCode
    normalizedItemCode
    multiCartEnabled
    shipDirect
    thumbnail {
      id
      url
      is360
      __typename
    }
    distributioncentres {
      id
      code
      __typename
    }
    __typename
  }
  __typename
}

fragment FormSectionFragment on FormSection {
  id
  stringID
  title
  placeholder
  updated
  multiUnitProducts(
    showHiddenItems: $showHiddenItems
    skipLocationPrivacy: $skipLocationPrivacy
    offset: $offset
    limit: $limit
    useElasticSearch: $useElasticSearch
  ) {
    ...MultiUnitProductForOrderFragment
    __typename
  }
  __typename
}

fragment MultiUnitProductForOrderFragment on MultiUnitProduct {
  id
  multiUnitGroupingId
  itemCode
  name
  updated
  taxable
  sectionItemSequence
  products {
    id
    name
    archived(locationId: $locationId)
    itemCode
    shipDirect
    instructionText
    price(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      cents
      __typename
    }
    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)
    rebateAmount {
      money
      cents
      __typename
    }
    productNotes(locationId: $locationId)
    precut
    prioritizePoundPriceInOG(locationId: $locationId)
    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)
    unit
    abbreviatedUnit
    par
    lastOrderedLabel(locationId: $locationId)
    lastOrderTimeAndQuantity(locationId: $locationId) {
      quantity
      lastOrderedTime
      uom
      daysAgo
      price
      poundPrice
      __typename
    }
    showDiscontinued
    isOutOfStock
    isUnavailable
    canonicalproduct {
      id
      itemCode
      normalizedItemCode
      description
      pack
      consumerCategory
      discontinued(locationId: $locationId)
      quickbooksRefID
      syncedWithQB
      shipDirect
      specialOrder
      jitItem
      DWOItem
      brandName
      unavailable
      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
      productNotes(locationId: $locationId)
      displayManufacturerProductDetails
      gtin
      nameWithoutBrand
      normalizedUoms
      supplierOrderOnly(locationId: $locationId)
      onSale(locationId: $locationId, deliveryDate: $deliveryDate)
      separateDirectShip
      isCatchWeight
      netWeight
      volume
      isGPOForCustomer(locationId: $locationId)
      brokenCaseItem
      currentStocks(locationId: $locationId) {
        uom
        value
        __typename
      }
      quantityOnOrder {
        uom
        value
        __typename
      }
      committedQuantity {
        uom
        value
        __typename
      }
      nextPOQuantity {
        uom
        value
        __typename
      }
      nextPODate {
        uom
        value
        __typename
      }
      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        value
        float
        __typename
      }
      totalCost {
        uom
        value
        float
        __typename
      }
      salesMargin {
        uom
        value
        float
        __typename
      }
      markedAsNew
      BEPRebatesEnabled
      ...RebateConfigsFragment
      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
      specialItem
      forceShowSubstitutes(locationId: $locationId)
      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        type
        value
        __typename
      }
      multiCartEnabled
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      l0category {
        id
        name
        __typename
      }
      l1category {
        id
        name
        __typename
      }
      l2category {
        id
        name
        __typename
      }
      l3category {
        id
        name
        __typename
      }
      l4category {
        id
        name
        __typename
      }
      packSize
      thumbnail {
        id
        url
        is360
        category
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      primaryImage {
        id
        url
        __typename
      }
      productShopDataForStore {
        id
        sizeDescription
        onSale(locationId: $locationId, deliveryDate: $deliveryDate)
        shopifyName
        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
          unit
          billedUnit
          billedPrice {
            float
            money
            __typename
          }
          price {
            float
            money
            __typename
          }
          __typename
        }
        productsubcategories {
          id
          name
          productcategory {
            id
            name
            __typename
          }
          __typename
        }
        __typename
      }
      allowsItemLevelInstructions
      activeSubstitutions(locationId: $locationId) {
        id
        itemCode
        normalizedItemCode
        shopifyName
        description
        normalizedUoms
        pack
        activeAdCard {
          id
          __typename
        }
        manufacturer {
          id
          name
          __typename
        }
        productbrand {
          id
          displayName
          __typename
        }
        unitPriceEstimates {
          unit
          price {
            float
            money
            __typename
          }
          __typename
        }
        thumbnail {
          id
          url
          __typename
        }
        primaryImage {
          id
          url
          __typename
        }
        productShopDataForStore {
          id
          sizeDescription
          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
            unit
            price {
              float
              money
              __typename
            }
            billedUnit
            billedPrice {
              float
              money
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      verifiedvendor {
        id
        name
        allowsRebates
        supplierportalvendordata {
          id
          showCalculatedSecondaryPriceInCatalog
          __typename
        }
        whiteLabel
        showStocksInPortal
        showStocksInOp
        showCostInPortal
        uomWiseStocksEnabled
        uomWiseCostEnabled
        showMarginInPortal
        lowStockMargin
        maxSalesMargin
        minSalesMargin
        spotPricingEnabled
        poundSpotPricingEnabled
        sendSpotPriceUpdatesEnabled
        restrictPriceChangesBelowMinimumPriceEnabled
        showOnlyCatchWeightPriceInOrderFlow
        hideInventoryForJitAndSpecialOrderItems
        showPriceWithAvg
        hideZeroPrice
        catalogDefaultUnit
        __typename
      }
      manufacturerproduct {
        id
        productbrand {
          id
          displayName
          __typename
        }
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      productbrand {
        id
        displayName
        __typename
      }
      searchKeywords
      ...CanonicalProductDimensionsFragment
      packSizePerUom {
        uom
        packSize
        __typename
      }
      buyersName
      __typename
    }
    doNotSub
    defaultsubstitution {
      id
      __typename
    }
    eligibleForSwitchCashback
    locations {
      id
      __typename
    }
    __typename
  }
  defaultUnit
  __typename
}

fragment CanonicalProductDimensionsFragment on CanonicalProduct {
  gtin
  itemsPerPack
  packsPerCase
  totalItems
  itemSizeType
  itemSizeValue
  itemSizeUOM
  dimensionDetail
  dimensionNotes
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;isStandingOrderFlow&quot;:false,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;sortView&quot;:&quot;categorized_view&quot;,&quot;offset&quot;:0,&quot;limit&quot;:15,&quot;deliveryDate&quot;:&quot;2025-07-09&quot;,&quot;useElasticSearch&quot;:true,&quot;sectionId&quot;:null,&quot;sectionCategoryId&quot;:null}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?verifiedVendorId=46017666&amp;ogSortView=categorized_view</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">47b06397ab5ed199e6bd053f192bda6016bce79d41b7d771d123026e496f57df1751985111</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-455 [formForOrder]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;formForOrder&quot;,&quot;variables&quot;:{&quot;isStandingOrderFlow&quot;:false,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;sortView&quot;:&quot;custom_view&quot;,&quot;offset&quot;:0,&quot;limit&quot;:15,&quot;deliveryDate&quot;:&quot;2025-07-09&quot;,&quot;useElasticSearch&quot;:true,&quot;sectionId&quot;:null,&quot;sectionCategoryId&quot;:null},&quot;query&quot;:&quot;query formForOrder($formId: ID!, $locationId: ID!, $showHiddenItems: Boolean, $skipLocationPrivacy: Boolean, $deliveryDate: String, $offset: Int, $limit: Int, $useElasticSearch: Boolean, $sectionId: ID, $sectionCategoryId: ID, $sortView: String, $searchString: String, $isStandingOrderFlow: Boolean = false) {\n  form(id: $formId) {\n    ...OrderGuidePageForm\n    sectionsWithCount(\n      location_id: $locationId\n      showHiddenItems: $showHiddenItems\n      skipLocationPrivacy: $skipLocationPrivacy\n      useElasticSearch: $useElasticSearch\n      sectionId: $sectionId\n      sectionCategoryId: $sectionCategoryId\n      sortView: $sortView\n      offset: $offset\n      limit: $limit\n      searchString: $searchString\n    ) {\n      sections {\n        ...FormSectionFragment\n        __typename\n      }\n      fullCount\n      __typename\n    }\n    offset\n    approvalRequired\n    isApprover(locationId: $locationId)\n    continuableDraft(locationId: $locationId) {\n      id\n      date\n      itemCount\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment OrderGuidePageForm on Form {\n  id\n  name\n  allowsInstructions\n  maxInstructionChars\n  deliveryFee\n  isFromIntegration\n  isEditable\n  shouldDisableOrderingOutOfStockProducts(locationId: $locationId)\n  lastUpdatedTimestamp\n  allowsAddingItems(locationId: $locationId)\n  isCatalogDisabledOnlyForOperator\n  alwaysAddFromCatalog\n  isCutDryDirect\n  shipDirectEnabled\n  cutOffDayOffset(locationId: $locationId)\n  substitutionViewType\n  isFetchStockCountsFromIntegrator\n  multiCartAvailableDeliveryDays(locationId: $locationId) {\n    cartCode\n    deliveryDates {\n      date\n      cutoffTimestamp\n      softCutoffTimestamp\n      isVisibleToOperator\n      __typename\n    }\n    __typename\n  }\n  availableDeliveryDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    softCutoffTimestamp\n    isVisibleToOperator\n    __typename\n  }\n  customerHolidays(locationId: $locationId)\n  allowsPickup(locationId: $locationId)\n  allowedFulfilmentTypes(locationId: $locationId)\n  allowsMailDelivery\n  allowsDelivery\n  availablePickupDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    pickupTimes {\n      time\n      cutoffTimestamp\n      __typename\n    }\n    __typename\n  }\n  availableDispatchDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    __typename\n  }\n  availableWeekdays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    __typename\n  }\n  hasContactMethod(locationId: $locationId)\n  hasShopExperience(locationId: $locationId)\n  orderingDays\n  company {\n    id\n    name\n    whiteLabel\n    hasActivePaymentMethods\n    members @include(if: $isStandingOrderFlow) {\n      id\n      email\n      name\n      __typename\n    }\n    __typename\n  }\n  cutoffTimeString\n  lastOrderedProductIds(location_id: $locationId)\n  info\n  locations(filterByID: $locationId) {\n    id\n    name\n    nameWithCompany\n    address\n    streetAddress2\n    city\n    state\n    zip\n    locationshiptoaddresses {\n      id\n      asString\n      __typename\n    }\n    __typename\n  }\n  vendor {\n    id\n    name\n    isCutDryDirect\n    catalogDisabled\n    createOGDisabled\n    payEnabled\n    activeLocations {\n      id\n      name\n      __typename\n    }\n    salespeople {\n      id\n      name\n      allLocations\n      locations {\n        id\n        __typename\n      }\n      __typename\n    }\n    hideSubstitutions\n    verifiedvendor {\n      id\n      name\n      operatorPortalName\n      dateTerm\n      allowsPickup\n      allowsPickupSupplierPortalOnly\n      manufacturerRebatesEnabled\n      defaultFilters {\n        queryStringKey\n        filterOptions\n        __typename\n      }\n      isQBIntegrated\n      isScraperIntegrated\n      isInstantScraperEnabled\n      catalogViewType\n      nestedCategoryEnabled\n      filtersEnabled\n      logoURL\n      allowsOrderingDiscontinued\n      autoCategorizeEnabled\n      catalogLandingPageActive\n      thumbnail\n      catalogHomePageEnabled\n      whiteLabel\n      hardHoldMessage\n      popularCategories {\n        id\n        name\n        __typename\n      }\n      showDeliveryDateInOg\n      showOnlyCatchWeightPriceInOrderFlow\n      showProductSizeDescriptionInSubs\n      showHeroImage\n      showFeaturedItems\n      showOnSaleItems\n      showHeroImage\n      showSmallerImages\n      showFeaturedItems\n      showOnSaleItems\n      catalogHeroImage\n      catalogSmallerImage1\n      catalogSmallerImage2\n      catalogMobileHeroImage\n      catalogHeroImageUrl\n      catalogSmallerImage1Url\n      catalogSmallerImage2Url\n      showStocksInPortal\n      showPriceWithAvg\n      showStocksInOp\n      showCostInPortal\n      uomWiseStocksEnabled\n      uomWiseCostEnabled\n      showMarginInPortal\n      spotPricingEnabled\n      cartSummaryVolumeEnabled\n      cartSummaryWeightEnabled\n      sendSpotPriceUpdatesEnabled\n      lowStockMargin\n      fetchOGPricesFromPricingServiceEnabled\n      dateBasedPricingEnabled\n      showDeliveryDateBasedJitCutoffs\n      bepRebatesActive\n      allowsRebates\n      showPayBannerOnOrderConfirmation\n      catalogSortIndex\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      supplierportalvendordata {\n        id\n        portalOverridesOrderMins\n        splitWeightsActive\n        sameDayDeliveryOffsetSeconds\n        showLocationWisePricesForSubstitutes\n        showSubstitutionsModalInPortal\n        showItemLevelInstructionsInPortal\n        showItemLevelInstructionsInOperator\n        itemLevelInstructionLimit\n        multipleShipTosEnabled\n        chunkCountWaitLimit\n        ogPageSize\n        ogFirstPageSize\n        defaultViewAsCustomer\n        disableItemDeletesAndSubtractsForOrderEdits\n        disableItemDeletesAndSubtractsForOrderEditsInPortal\n        pickupTimeSelectEnabled\n        showMemoCodeInOperatorPortal\n        showMemoCodeInSupplierPortal\n        multiCartEnabled\n        avoidDefaultCaseStyling\n        catalogInfoOnlyViewIfOnOG\n        catalogInfoOnlyViewMessage\n        totalCostMarginEnabled\n        showOrderSummary\n        disableDeliveryDateChangeForOrderEditsInOp\n        disableDeliveryDateChangeForOrderEditsInPortal\n        disableDeliveryDateChangeWarningMessage\n        showLastOrderedPrice\n        showLastOrderedPriceInPortal\n        useTotalCostForMarginValidation\n        showUnitPriceAsMainPriceInCatalog\n        showCalculatedSecondaryPriceInCatalog\n        persistsItemLevelInstructions\n        hideZeroStockLabelInOP\n        hideOutOfStockLabelInSP\n        showUnavailableInsteadOfOutOfStock\n        poundSpotPricingEnabled\n        disableOrderingOutOfStockProductsWithoutSubstitutes\n        checkForZeroPricedItems\n        showLastOrderedPoundPrice\n        preserveCartItemOrder\n        validateMarginInPortal\n        disableEditingPoundQuantity\n        blockPartialQuantityOrdering\n        blockPartialQuantityOrderingInOperatorPortal\n        accountHoldAlertsEnabled\n        hideCatchWeightUnitPriceInCatalog\n        showDistributionCentreLabels\n        offlineOrderingEnabled\n        catalogOnlyOrderFlowEnabled\n        dateBasedPricingBannerDisabled\n        showPurchaseHistory\n        quickAddViewEnabledStatus\n        simpleListViewEnabledStatus\n        enabledLargeProductTiles\n        enabledAdditionalDescriptions\n        enabledTiHiPalletDetails\n        __typename\n      }\n      restrictPriceChangesBelowMinimumPriceEnabled\n      splitSpecialOrders\n      sortOGByItemCode\n      showCaseDiscountsDisclaimerMessage\n      disableOrderingZeroPricedItems\n      disableOrderingSpecialOrderItems\n      __typename\n    }\n    shipdirectverifiedvendor {\n      id\n      shippingFeeWaived\n      shippingFeeWaivedUntil\n      firstOrderDiscounted\n      firstOrderDiscount\n      firstOrderDiscountMaxCap\n      thumbnail\n      shipDirectLandingPageActive\n      catalogHeroImage\n      catalogMobileHeroImage\n      __typename\n    }\n    integrationDataForLocation(locationId: $locationId) {\n      id\n      customerNumber\n      taxRate\n      isAccountOnHold\n      deliveryDaysNote\n      accountHoldCode\n      isPONumberRequired\n      updatePoNumberWithOgName(isStandingOrderFlow: $isStandingOrderFlow)\n      __typename\n    }\n    orderingStatus\n    __typename\n  }\n  userData {\n    id\n    collapsedsections {\n      id\n      __typename\n    }\n    __typename\n  }\n  accountingcategory {\n    id\n    __typename\n  }\n  productSamples(locationId: $locationId) {\n    ...ProductSampleForOrderFragment\n    __typename\n  }\n  shipDirectEnabled\n  shipdirectvendors {\n    id\n    verifiedvendor {\n      id\n      __typename\n    }\n    __typename\n  }\n  isMergeOrdersOk\n  __typename\n}\n\nfragment ProductSampleForOrderFragment on ManufacturerProductSample {\n  id\n  unit\n  priceAmount {\n    money\n    float\n    __typename\n  }\n  canonicalproduct {\n    id\n    description\n    itemCode\n    normalizedItemCode\n    multiCartEnabled\n    shipDirect\n    thumbnail {\n      id\n      url\n      is360\n      __typename\n    }\n    distributioncentres {\n      id\n      code\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FormSectionFragment on FormSection {\n  id\n  stringID\n  title\n  placeholder\n  updated\n  multiUnitProducts(\n    showHiddenItems: $showHiddenItems\n    skipLocationPrivacy: $skipLocationPrivacy\n    offset: $offset\n    limit: $limit\n    useElasticSearch: $useElasticSearch\n  ) {\n    ...MultiUnitProductForOrderFragment\n    __typename\n  }\n  __typename\n}\n\nfragment MultiUnitProductForOrderFragment on MultiUnitProduct {\n  id\n  multiUnitGroupingId\n  itemCode\n  name\n  updated\n  taxable\n  sectionItemSequence\n  products {\n    id\n    name\n    archived(locationId: $locationId)\n    itemCode\n    shipDirect\n    instructionText\n    price(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      cents\n      __typename\n    }\n    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)\n    rebateAmount {\n      money\n      cents\n      __typename\n    }\n    productNotes(locationId: $locationId)\n    precut\n    prioritizePoundPriceInOG(locationId: $locationId)\n    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)\n    unit\n    abbreviatedUnit\n    par\n    lastOrderedLabel(locationId: $locationId)\n    lastOrderTimeAndQuantity(locationId: $locationId) {\n      quantity\n      lastOrderedTime\n      uom\n      daysAgo\n      price\n      poundPrice\n      __typename\n    }\n    showDiscontinued\n    isOutOfStock\n    isUnavailable\n    canonicalproduct {\n      id\n      itemCode\n      normalizedItemCode\n      description\n      pack\n      consumerCategory\n      discontinued(locationId: $locationId)\n      quickbooksRefID\n      syncedWithQB\n      shipDirect\n      specialOrder\n      jitItem\n      DWOItem\n      brandName\n      unavailable\n      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n      productNotes(locationId: $locationId)\n      displayManufacturerProductDetails\n      gtin\n      nameWithoutBrand\n      normalizedUoms\n      supplierOrderOnly(locationId: $locationId)\n      onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n      separateDirectShip\n      isCatchWeight\n      netWeight\n      volume\n      isGPOForCustomer(locationId: $locationId)\n      brokenCaseItem\n      currentStocks(locationId: $locationId) {\n        uom\n        value\n        __typename\n      }\n      quantityOnOrder {\n        uom\n        value\n        __typename\n      }\n      committedQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPOQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPODate {\n        uom\n        value\n        __typename\n      }\n      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        value\n        float\n        __typename\n      }\n      totalCost {\n        uom\n        value\n        float\n        __typename\n      }\n      salesMargin {\n        uom\n        value\n        float\n        __typename\n      }\n      markedAsNew\n      BEPRebatesEnabled\n      ...RebateConfigsFragment\n      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n      specialItem\n      forceShowSubstitutes(locationId: $locationId)\n      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        type\n        value\n        __typename\n      }\n      multiCartEnabled\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      l0category {\n        id\n        name\n        __typename\n      }\n      l1category {\n        id\n        name\n        __typename\n      }\n      l2category {\n        id\n        name\n        __typename\n      }\n      l3category {\n        id\n        name\n        __typename\n      }\n      l4category {\n        id\n        name\n        __typename\n      }\n      packSize\n      thumbnail {\n        id\n        url\n        is360\n        category\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      primaryImage {\n        id\n        url\n        __typename\n      }\n      productShopDataForStore {\n        id\n        sizeDescription\n        onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n        shopifyName\n        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n          unit\n          billedUnit\n          billedPrice {\n            float\n            money\n            __typename\n          }\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        productsubcategories {\n          id\n          name\n          productcategory {\n            id\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      allowsItemLevelInstructions\n      activeSubstitutions(locationId: $locationId) {\n        id\n        itemCode\n        normalizedItemCode\n        shopifyName\n        description\n        normalizedUoms\n        pack\n        activeAdCard {\n          id\n          __typename\n        }\n        manufacturer {\n          id\n          name\n          __typename\n        }\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        unitPriceEstimates {\n          unit\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        thumbnail {\n          id\n          url\n          __typename\n        }\n        primaryImage {\n          id\n          url\n          __typename\n        }\n        productShopDataForStore {\n          id\n          sizeDescription\n          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n            unit\n            price {\n              float\n              money\n              __typename\n            }\n            billedUnit\n            billedPrice {\n              float\n              money\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      verifiedvendor {\n        id\n        name\n        allowsRebates\n        supplierportalvendordata {\n          id\n          showCalculatedSecondaryPriceInCatalog\n          __typename\n        }\n        whiteLabel\n        showStocksInPortal\n        showStocksInOp\n        showCostInPortal\n        uomWiseStocksEnabled\n        uomWiseCostEnabled\n        showMarginInPortal\n        lowStockMargin\n        maxSalesMargin\n        minSalesMargin\n        spotPricingEnabled\n        poundSpotPricingEnabled\n        sendSpotPriceUpdatesEnabled\n        restrictPriceChangesBelowMinimumPriceEnabled\n        showOnlyCatchWeightPriceInOrderFlow\n        hideInventoryForJitAndSpecialOrderItems\n        showPriceWithAvg\n        hideZeroPrice\n        catalogDefaultUnit\n        __typename\n      }\n      manufacturerproduct {\n        id\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      productbrand {\n        id\n        displayName\n        __typename\n      }\n      searchKeywords\n      ...CanonicalProductDimensionsFragment\n      packSizePerUom {\n        uom\n        packSize\n        __typename\n      }\n      buyersName\n      __typename\n    }\n    doNotSub\n    defaultsubstitution {\n      id\n      __typename\n    }\n    eligibleForSwitchCashback\n    locations {\n      id\n      __typename\n    }\n    __typename\n  }\n  defaultUnit\n  __typename\n}\n\nfragment CanonicalProductDimensionsFragment on CanonicalProduct {\n  gtin\n  itemsPerPack\n  packsPerCase\n  totalItems\n  itemSizeType\n  itemSizeValue\n  itemSizeUOM\n  dimensionDetail\n  dimensionNotes\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">formForOrder</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query formForOrder($formId: ID!, $locationId: ID!, $showHiddenItems: Boolean, $skipLocationPrivacy: Boolean, $deliveryDate: String, $offset: Int, $limit: Int, $useElasticSearch: Boolean, $sectionId: ID, $sectionCategoryId: ID, $sortView: String, $searchString: String, $isStandingOrderFlow: Boolean = false) {
  form(id: $formId) {
    ...OrderGuidePageForm
    sectionsWithCount(
      location_id: $locationId
      showHiddenItems: $showHiddenItems
      skipLocationPrivacy: $skipLocationPrivacy
      useElasticSearch: $useElasticSearch
      sectionId: $sectionId
      sectionCategoryId: $sectionCategoryId
      sortView: $sortView
      offset: $offset
      limit: $limit
      searchString: $searchString
    ) {
      sections {
        ...FormSectionFragment
        __typename
      }
      fullCount
      __typename
    }
    offset
    approvalRequired
    isApprover(locationId: $locationId)
    continuableDraft(locationId: $locationId) {
      id
      date
      itemCount
      __typename
    }
    __typename
  }
}

fragment OrderGuidePageForm on Form {
  id
  name
  allowsInstructions
  maxInstructionChars
  deliveryFee
  isFromIntegration
  isEditable
  shouldDisableOrderingOutOfStockProducts(locationId: $locationId)
  lastUpdatedTimestamp
  allowsAddingItems(locationId: $locationId)
  isCatalogDisabledOnlyForOperator
  alwaysAddFromCatalog
  isCutDryDirect
  shipDirectEnabled
  cutOffDayOffset(locationId: $locationId)
  substitutionViewType
  isFetchStockCountsFromIntegrator
  multiCartAvailableDeliveryDays(locationId: $locationId) {
    cartCode
    deliveryDates {
      date
      cutoffTimestamp
      softCutoffTimestamp
      isVisibleToOperator
      __typename
    }
    __typename
  }
  availableDeliveryDays(locationId: $locationId) {
    date
    cutoffTimestamp
    softCutoffTimestamp
    isVisibleToOperator
    __typename
  }
  customerHolidays(locationId: $locationId)
  allowsPickup(locationId: $locationId)
  allowedFulfilmentTypes(locationId: $locationId)
  allowsMailDelivery
  allowsDelivery
  availablePickupDays(locationId: $locationId) {
    date
    cutoffTimestamp
    pickupTimes {
      time
      cutoffTimestamp
      __typename
    }
    __typename
  }
  availableDispatchDays(locationId: $locationId) {
    date
    cutoffTimestamp
    __typename
  }
  availableWeekdays(locationId: $locationId) {
    date
    cutoffTimestamp
    __typename
  }
  hasContactMethod(locationId: $locationId)
  hasShopExperience(locationId: $locationId)
  orderingDays
  company {
    id
    name
    whiteLabel
    hasActivePaymentMethods
    members @include(if: $isStandingOrderFlow) {
      id
      email
      name
      __typename
    }
    __typename
  }
  cutoffTimeString
  lastOrderedProductIds(location_id: $locationId)
  info
  locations(filterByID: $locationId) {
    id
    name
    nameWithCompany
    address
    streetAddress2
    city
    state
    zip
    locationshiptoaddresses {
      id
      asString
      __typename
    }
    __typename
  }
  vendor {
    id
    name
    isCutDryDirect
    catalogDisabled
    createOGDisabled
    payEnabled
    activeLocations {
      id
      name
      __typename
    }
    salespeople {
      id
      name
      allLocations
      locations {
        id
        __typename
      }
      __typename
    }
    hideSubstitutions
    verifiedvendor {
      id
      name
      operatorPortalName
      dateTerm
      allowsPickup
      allowsPickupSupplierPortalOnly
      manufacturerRebatesEnabled
      defaultFilters {
        queryStringKey
        filterOptions
        __typename
      }
      isQBIntegrated
      isScraperIntegrated
      isInstantScraperEnabled
      catalogViewType
      nestedCategoryEnabled
      filtersEnabled
      logoURL
      allowsOrderingDiscontinued
      autoCategorizeEnabled
      catalogLandingPageActive
      thumbnail
      catalogHomePageEnabled
      whiteLabel
      hardHoldMessage
      popularCategories {
        id
        name
        __typename
      }
      showDeliveryDateInOg
      showOnlyCatchWeightPriceInOrderFlow
      showProductSizeDescriptionInSubs
      showHeroImage
      showFeaturedItems
      showOnSaleItems
      showHeroImage
      showSmallerImages
      showFeaturedItems
      showOnSaleItems
      catalogHeroImage
      catalogSmallerImage1
      catalogSmallerImage2
      catalogMobileHeroImage
      catalogHeroImageUrl
      catalogSmallerImage1Url
      catalogSmallerImage2Url
      showStocksInPortal
      showPriceWithAvg
      showStocksInOp
      showCostInPortal
      uomWiseStocksEnabled
      uomWiseCostEnabled
      showMarginInPortal
      spotPricingEnabled
      cartSummaryVolumeEnabled
      cartSummaryWeightEnabled
      sendSpotPriceUpdatesEnabled
      lowStockMargin
      fetchOGPricesFromPricingServiceEnabled
      dateBasedPricingEnabled
      showDeliveryDateBasedJitCutoffs
      bepRebatesActive
      allowsRebates
      showPayBannerOnOrderConfirmation
      catalogSortIndex
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      supplierportalvendordata {
        id
        portalOverridesOrderMins
        splitWeightsActive
        sameDayDeliveryOffsetSeconds
        showLocationWisePricesForSubstitutes
        showSubstitutionsModalInPortal
        showItemLevelInstructionsInPortal
        showItemLevelInstructionsInOperator
        itemLevelInstructionLimit
        multipleShipTosEnabled
        chunkCountWaitLimit
        ogPageSize
        ogFirstPageSize
        defaultViewAsCustomer
        disableItemDeletesAndSubtractsForOrderEdits
        disableItemDeletesAndSubtractsForOrderEditsInPortal
        pickupTimeSelectEnabled
        showMemoCodeInOperatorPortal
        showMemoCodeInSupplierPortal
        multiCartEnabled
        avoidDefaultCaseStyling
        catalogInfoOnlyViewIfOnOG
        catalogInfoOnlyViewMessage
        totalCostMarginEnabled
        showOrderSummary
        disableDeliveryDateChangeForOrderEditsInOp
        disableDeliveryDateChangeForOrderEditsInPortal
        disableDeliveryDateChangeWarningMessage
        showLastOrderedPrice
        showLastOrderedPriceInPortal
        useTotalCostForMarginValidation
        showUnitPriceAsMainPriceInCatalog
        showCalculatedSecondaryPriceInCatalog
        persistsItemLevelInstructions
        hideZeroStockLabelInOP
        hideOutOfStockLabelInSP
        showUnavailableInsteadOfOutOfStock
        poundSpotPricingEnabled
        disableOrderingOutOfStockProductsWithoutSubstitutes
        checkForZeroPricedItems
        showLastOrderedPoundPrice
        preserveCartItemOrder
        validateMarginInPortal
        disableEditingPoundQuantity
        blockPartialQuantityOrdering
        blockPartialQuantityOrderingInOperatorPortal
        accountHoldAlertsEnabled
        hideCatchWeightUnitPriceInCatalog
        showDistributionCentreLabels
        offlineOrderingEnabled
        catalogOnlyOrderFlowEnabled
        dateBasedPricingBannerDisabled
        showPurchaseHistory
        quickAddViewEnabledStatus
        simpleListViewEnabledStatus
        enabledLargeProductTiles
        enabledAdditionalDescriptions
        enabledTiHiPalletDetails
        __typename
      }
      restrictPriceChangesBelowMinimumPriceEnabled
      splitSpecialOrders
      sortOGByItemCode
      showCaseDiscountsDisclaimerMessage
      disableOrderingZeroPricedItems
      disableOrderingSpecialOrderItems
      __typename
    }
    shipdirectverifiedvendor {
      id
      shippingFeeWaived
      shippingFeeWaivedUntil
      firstOrderDiscounted
      firstOrderDiscount
      firstOrderDiscountMaxCap
      thumbnail
      shipDirectLandingPageActive
      catalogHeroImage
      catalogMobileHeroImage
      __typename
    }
    integrationDataForLocation(locationId: $locationId) {
      id
      customerNumber
      taxRate
      isAccountOnHold
      deliveryDaysNote
      accountHoldCode
      isPONumberRequired
      updatePoNumberWithOgName(isStandingOrderFlow: $isStandingOrderFlow)
      __typename
    }
    orderingStatus
    __typename
  }
  userData {
    id
    collapsedsections {
      id
      __typename
    }
    __typename
  }
  accountingcategory {
    id
    __typename
  }
  productSamples(locationId: $locationId) {
    ...ProductSampleForOrderFragment
    __typename
  }
  shipDirectEnabled
  shipdirectvendors {
    id
    verifiedvendor {
      id
      __typename
    }
    __typename
  }
  isMergeOrdersOk
  __typename
}

fragment ProductSampleForOrderFragment on ManufacturerProductSample {
  id
  unit
  priceAmount {
    money
    float
    __typename
  }
  canonicalproduct {
    id
    description
    itemCode
    normalizedItemCode
    multiCartEnabled
    shipDirect
    thumbnail {
      id
      url
      is360
      __typename
    }
    distributioncentres {
      id
      code
      __typename
    }
    __typename
  }
  __typename
}

fragment FormSectionFragment on FormSection {
  id
  stringID
  title
  placeholder
  updated
  multiUnitProducts(
    showHiddenItems: $showHiddenItems
    skipLocationPrivacy: $skipLocationPrivacy
    offset: $offset
    limit: $limit
    useElasticSearch: $useElasticSearch
  ) {
    ...MultiUnitProductForOrderFragment
    __typename
  }
  __typename
}

fragment MultiUnitProductForOrderFragment on MultiUnitProduct {
  id
  multiUnitGroupingId
  itemCode
  name
  updated
  taxable
  sectionItemSequence
  products {
    id
    name
    archived(locationId: $locationId)
    itemCode
    shipDirect
    instructionText
    price(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      cents
      __typename
    }
    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)
    rebateAmount {
      money
      cents
      __typename
    }
    productNotes(locationId: $locationId)
    precut
    prioritizePoundPriceInOG(locationId: $locationId)
    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)
    unit
    abbreviatedUnit
    par
    lastOrderedLabel(locationId: $locationId)
    lastOrderTimeAndQuantity(locationId: $locationId) {
      quantity
      lastOrderedTime
      uom
      daysAgo
      price
      poundPrice
      __typename
    }
    showDiscontinued
    isOutOfStock
    isUnavailable
    canonicalproduct {
      id
      itemCode
      normalizedItemCode
      description
      pack
      consumerCategory
      discontinued(locationId: $locationId)
      quickbooksRefID
      syncedWithQB
      shipDirect
      specialOrder
      jitItem
      DWOItem
      brandName
      unavailable
      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
      productNotes(locationId: $locationId)
      displayManufacturerProductDetails
      gtin
      nameWithoutBrand
      normalizedUoms
      supplierOrderOnly(locationId: $locationId)
      onSale(locationId: $locationId, deliveryDate: $deliveryDate)
      separateDirectShip
      isCatchWeight
      netWeight
      volume
      isGPOForCustomer(locationId: $locationId)
      brokenCaseItem
      currentStocks(locationId: $locationId) {
        uom
        value
        __typename
      }
      quantityOnOrder {
        uom
        value
        __typename
      }
      committedQuantity {
        uom
        value
        __typename
      }
      nextPOQuantity {
        uom
        value
        __typename
      }
      nextPODate {
        uom
        value
        __typename
      }
      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        value
        float
        __typename
      }
      totalCost {
        uom
        value
        float
        __typename
      }
      salesMargin {
        uom
        value
        float
        __typename
      }
      markedAsNew
      BEPRebatesEnabled
      ...RebateConfigsFragment
      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
      specialItem
      forceShowSubstitutes(locationId: $locationId)
      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        type
        value
        __typename
      }
      multiCartEnabled
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      l0category {
        id
        name
        __typename
      }
      l1category {
        id
        name
        __typename
      }
      l2category {
        id
        name
        __typename
      }
      l3category {
        id
        name
        __typename
      }
      l4category {
        id
        name
        __typename
      }
      packSize
      thumbnail {
        id
        url
        is360
        category
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      primaryImage {
        id
        url
        __typename
      }
      productShopDataForStore {
        id
        sizeDescription
        onSale(locationId: $locationId, deliveryDate: $deliveryDate)
        shopifyName
        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
          unit
          billedUnit
          billedPrice {
            float
            money
            __typename
          }
          price {
            float
            money
            __typename
          }
          __typename
        }
        productsubcategories {
          id
          name
          productcategory {
            id
            name
            __typename
          }
          __typename
        }
        __typename
      }
      allowsItemLevelInstructions
      activeSubstitutions(locationId: $locationId) {
        id
        itemCode
        normalizedItemCode
        shopifyName
        description
        normalizedUoms
        pack
        activeAdCard {
          id
          __typename
        }
        manufacturer {
          id
          name
          __typename
        }
        productbrand {
          id
          displayName
          __typename
        }
        unitPriceEstimates {
          unit
          price {
            float
            money
            __typename
          }
          __typename
        }
        thumbnail {
          id
          url
          __typename
        }
        primaryImage {
          id
          url
          __typename
        }
        productShopDataForStore {
          id
          sizeDescription
          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
            unit
            price {
              float
              money
              __typename
            }
            billedUnit
            billedPrice {
              float
              money
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      verifiedvendor {
        id
        name
        allowsRebates
        supplierportalvendordata {
          id
          showCalculatedSecondaryPriceInCatalog
          __typename
        }
        whiteLabel
        showStocksInPortal
        showStocksInOp
        showCostInPortal
        uomWiseStocksEnabled
        uomWiseCostEnabled
        showMarginInPortal
        lowStockMargin
        maxSalesMargin
        minSalesMargin
        spotPricingEnabled
        poundSpotPricingEnabled
        sendSpotPriceUpdatesEnabled
        restrictPriceChangesBelowMinimumPriceEnabled
        showOnlyCatchWeightPriceInOrderFlow
        hideInventoryForJitAndSpecialOrderItems
        showPriceWithAvg
        hideZeroPrice
        catalogDefaultUnit
        __typename
      }
      manufacturerproduct {
        id
        productbrand {
          id
          displayName
          __typename
        }
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      productbrand {
        id
        displayName
        __typename
      }
      searchKeywords
      ...CanonicalProductDimensionsFragment
      packSizePerUom {
        uom
        packSize
        __typename
      }
      buyersName
      __typename
    }
    doNotSub
    defaultsubstitution {
      id
      __typename
    }
    eligibleForSwitchCashback
    locations {
      id
      __typename
    }
    __typename
  }
  defaultUnit
  __typename
}

fragment CanonicalProductDimensionsFragment on CanonicalProduct {
  gtin
  itemsPerPack
  packsPerCase
  totalItems
  itemSizeType
  itemSizeValue
  itemSizeUOM
  dimensionDetail
  dimensionNotes
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;isStandingOrderFlow&quot;:false,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;sortView&quot;:&quot;custom_view&quot;,&quot;offset&quot;:0,&quot;limit&quot;:15,&quot;deliveryDate&quot;:&quot;2025-07-09&quot;,&quot;useElasticSearch&quot;:true,&quot;sectionId&quot;:null,&quot;sectionCategoryId&quot;:null}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">2363539d763820d722cf45e38c49d49188a75864a5449dc0668902f3042c6ccc1751985113</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-460 [user]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;user&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query user {\n  user {\n    ...LoggedInUser\n    usersettings {\n      id\n      financialEmailAlerts\n      language\n      allLanguages\n      notificationsFormatted {\n        new_orders\n        order_viewed_by_vendor\n        order_confirmed_by_vendor\n        chat_message\n        check_in_complete\n        invoice_notifications\n        price_alerts\n        unavailable_items\n        delivery_scheduled\n        order_arriving\n        arrival_confirmation\n        order_delivered\n        updated_delivery_time\n        delivery_issues\n        cashback_notifications\n        invoice_copy\n        account_statement\n        __typename\n      }\n      textNotificationsFormatted {\n        order_confirmed_by_vendor\n        new_orders\n        chat_message\n        delivery_scheduled\n        order_arriving\n        arrival_confirmation\n        order_delivered\n        updated_delivery_time\n        delivery_issues\n        invoice_copy\n        account_statement\n        __typename\n      }\n      pushNotificationsFormatted {\n        new_orders\n        order_confirmed_by_vendor\n        chat_message\n        invoice_notifications\n        delivery_scheduled\n        order_arriving\n        arrival_confirmation\n        order_delivered\n        updated_delivery_time\n        delivery_issues\n        invoice_copy\n        account_statement\n        __typename\n      }\n      supplierPortalEmailNotificationsFormatted {\n        sp_new_orders\n        sp_special_orders_only\n        sp_cancellation_request\n        sp_order_edit_request\n        sp_order_issues\n        sp_issue_order_delivery\n        sp_order_delivery_skipped\n        sp_order_delivery_notes\n        chat_message\n        auto_order_desk_alerts\n        sales_rep_og_change_log\n        __typename\n      }\n      supplierPortalTextNotificationsFormatted {\n        sp_new_orders\n        sp_special_orders_only\n        sp_cancellation_request\n        sp_order_edit_request\n        sp_order_issues\n        sp_issue_order_delivery\n        sp_order_delivery_skipped\n        sp_order_delivery_notes\n        chat_message\n        auto_order_desk_alerts\n        sales_rep_og_change_log\n        __typename\n      }\n      shouldShowShipDirectInfoModal\n      __typename\n    }\n    verified\n    verificationAttemptCount\n    invitedBy\n    appPermissions\n    ...GeneralUserAlertFragment\n    warehouses {\n      id\n      name\n      warehousesettings {\n        id\n        smsEnabled\n        __typename\n      }\n      address {\n        id\n        latitude\n        longitude\n        __typename\n      }\n      __typename\n    }\n    initialIntegrationDataId\n    initialScraperUsername\n    userrole {\n      id\n      name\n      permissions\n      __typename\n    }\n    __typename\n  }\n  isLoggedIn\n  appVersion\n  serverTime\n  company {\n    id\n    name\n    logo\n    allowOrderlessInvoiceUploads\n    hideWhiteLabelHome\n    bepCustomer\n    gpoProgram\n    bepSignUpTimestamp\n    bepParticipantType\n    unseenCashback\n    canUserAddItemsToAnyForm\n    billingaddress {\n      id\n      street1\n      city\n      state\n      zip\n      country\n      __typename\n    }\n    locations {\n      id\n      name\n      address\n      city\n      state\n      zip\n      smsPhone\n      __typename\n    }\n    orders(limit: 3, dontBatchLoad: true) {\n      id\n      invoiceOnly\n      __typename\n    }\n    verifiedvendor {\n      ...VerifiedVendorFragment\n      isQBIntegrated\n      domainconfig {\n        id\n        domainWithProtocol\n        __typename\n      }\n      __typename\n    }\n    manufacturer {\n      id\n      name\n      description\n      logoUrl\n      websiteUrl\n      universalCatalogEnabled\n      inviteEnabled\n      claimEnabled\n      foundingBrand\n      gdsnEnabled\n      __typename\n    }\n    segmentDataSubmitted\n    askSegmentDataAtCashbackPage\n    useForTesting\n    hasUserSignedIn\n    vendorcampaign {\n      id\n      name\n      shortName\n      portalEnabledScraper\n      __typename\n    }\n    whiteLabel\n    multiWhiteLabelLinked\n    __typename\n  }\n}\n\nfragment LoggedInUser on User {\n  id\n  name\n  firstName\n  email\n  typeOfUser\n  createdTimestamp\n  phone\n  picture\n  canEdit\n  employee\n  isEmployeeEmail\n  role\n  hasPassword\n  passwordStage\n  supplierPortalRole\n  customerAccessRestricted\n  supplierInvitationStatus\n  menuOptions {\n    name\n    nameMobile\n    uri\n    spa\n    platform\n    dataTip\n    __typename\n  }\n  visibleLocations {\n    id\n    name\n    archived\n    __typename\n  }\n  company {\n    id\n    name\n    companyType\n    whiteLabel\n    multiWhiteLabelLinked\n    whiteLabelVendor {\n      id\n      verifiedvendor {\n        id\n        logoURL\n        logoURLAlternate\n        supplierportalvendordata {\n          disableAddContactButton\n          disableEditContactInformation\n          disableEditNotification\n          modules\n          disableEditRestaurantInformation\n          disableEditLocationInformation\n          disableDownloadAppBanner\n          appStoreUrl\n          playStoreUrl\n          showInvoiceFieldNameAsERPOrderNumber\n          defaultSortForOrderHistory\n          erpUserNotificationSettings {\n            notificationType\n            notificationSettings {\n              text\n              push\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    activeVendors {\n      id\n      verifiedvendor {\n        id\n        logoURL\n        logoURLAlternate\n        __typename\n      }\n      __typename\n    }\n    verifiedvendor {\n      id\n      __typename\n    }\n    invitedVendor {\n      id\n      __typename\n    }\n    vendorcampaign {\n      id\n      logoURL\n      logoURLAlternate\n      __typename\n    }\n    __typename\n  }\n  companies {\n    id\n    name\n    __typename\n  }\n  additionalCompanies {\n    id\n    name\n    isVendorCompany\n    whiteLabel\n    whiteLabelVendor {\n      id\n      verifiedvendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  authUser {\n    id\n    appPermissions\n    employee\n    vendorUser\n    hasPassword\n    email\n    inviteCampaign\n    __typename\n  }\n  authRedirect\n  vendorUser\n  picture\n  lastlocation {\n    id\n    name\n    archived\n    __typename\n  }\n  paymentOptions {\n    name\n    enabled\n    __typename\n  }\n  manufacturerOnboardingCompleted\n  timezoneCode\n  timezoneForTrack\n  timezoneString\n  __typename\n}\n\nfragment VerifiedVendorFragment on VerifiedVendor {\n  id\n  name\n  consumerCode\n  storageTypeEnabled\n  shift\n  collectionMethod\n  automaticPriceResolve\n  supplierLiteIntegrated\n  portalEnabledScraper\n  showDispatchDate\n  deductTransactionFees\n  activateUrl\n  isPricingModuleEnabled\n  qbProductsSyncIntegrated\n  qbCustomerSyncIntegrated\n  qboEnabled\n  nestedCategoryEnabled\n  filtersEnabled\n  promotionsEditingEnabled\n  thumbnail\n  logoURL\n  catalogHomePageEnabled\n  whiteLabel\n  hidePriceFromCatalogCards\n  showProductScores\n  popularCategories {\n    id\n    name\n    __typename\n  }\n  catalogSortIndex\n  defaultFilters {\n    queryStringKey\n    filterOptions\n    __typename\n  }\n  __typename\n}\n\nfragment GeneralUserAlertFragment on User {\n  generalUserAlert {\n    visible\n    title\n    text\n    icon\n    actionUrl\n    showCancelButton\n    confirmButtonText\n    cancelButtonText\n    showCloseButton\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">user</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query user {
  user {
    ...LoggedInUser
    usersettings {
      id
      financialEmailAlerts
      language
      allLanguages
      notificationsFormatted {
        new_orders
        order_viewed_by_vendor
        order_confirmed_by_vendor
        chat_message
        check_in_complete
        invoice_notifications
        price_alerts
        unavailable_items
        delivery_scheduled
        order_arriving
        arrival_confirmation
        order_delivered
        updated_delivery_time
        delivery_issues
        cashback_notifications
        invoice_copy
        account_statement
        __typename
      }
      textNotificationsFormatted {
        order_confirmed_by_vendor
        new_orders
        chat_message
        delivery_scheduled
        order_arriving
        arrival_confirmation
        order_delivered
        updated_delivery_time
        delivery_issues
        invoice_copy
        account_statement
        __typename
      }
      pushNotificationsFormatted {
        new_orders
        order_confirmed_by_vendor
        chat_message
        invoice_notifications
        delivery_scheduled
        order_arriving
        arrival_confirmation
        order_delivered
        updated_delivery_time
        delivery_issues
        invoice_copy
        account_statement
        __typename
      }
      supplierPortalEmailNotificationsFormatted {
        sp_new_orders
        sp_special_orders_only
        sp_cancellation_request
        sp_order_edit_request
        sp_order_issues
        sp_issue_order_delivery
        sp_order_delivery_skipped
        sp_order_delivery_notes
        chat_message
        auto_order_desk_alerts
        sales_rep_og_change_log
        __typename
      }
      supplierPortalTextNotificationsFormatted {
        sp_new_orders
        sp_special_orders_only
        sp_cancellation_request
        sp_order_edit_request
        sp_order_issues
        sp_issue_order_delivery
        sp_order_delivery_skipped
        sp_order_delivery_notes
        chat_message
        auto_order_desk_alerts
        sales_rep_og_change_log
        __typename
      }
      shouldShowShipDirectInfoModal
      __typename
    }
    verified
    verificationAttemptCount
    invitedBy
    appPermissions
    ...GeneralUserAlertFragment
    warehouses {
      id
      name
      warehousesettings {
        id
        smsEnabled
        __typename
      }
      address {
        id
        latitude
        longitude
        __typename
      }
      __typename
    }
    initialIntegrationDataId
    initialScraperUsername
    userrole {
      id
      name
      permissions
      __typename
    }
    __typename
  }
  isLoggedIn
  appVersion
  serverTime
  company {
    id
    name
    logo
    allowOrderlessInvoiceUploads
    hideWhiteLabelHome
    bepCustomer
    gpoProgram
    bepSignUpTimestamp
    bepParticipantType
    unseenCashback
    canUserAddItemsToAnyForm
    billingaddress {
      id
      street1
      city
      state
      zip
      country
      __typename
    }
    locations {
      id
      name
      address
      city
      state
      zip
      smsPhone
      __typename
    }
    orders(limit: 3, dontBatchLoad: true) {
      id
      invoiceOnly
      __typename
    }
    verifiedvendor {
      ...VerifiedVendorFragment
      isQBIntegrated
      domainconfig {
        id
        domainWithProtocol
        __typename
      }
      __typename
    }
    manufacturer {
      id
      name
      description
      logoUrl
      websiteUrl
      universalCatalogEnabled
      inviteEnabled
      claimEnabled
      foundingBrand
      gdsnEnabled
      __typename
    }
    segmentDataSubmitted
    askSegmentDataAtCashbackPage
    useForTesting
    hasUserSignedIn
    vendorcampaign {
      id
      name
      shortName
      portalEnabledScraper
      __typename
    }
    whiteLabel
    multiWhiteLabelLinked
    __typename
  }
}

fragment LoggedInUser on User {
  id
  name
  firstName
  email
  typeOfUser
  createdTimestamp
  phone
  picture
  canEdit
  employee
  isEmployeeEmail
  role
  hasPassword
  passwordStage
  supplierPortalRole
  customerAccessRestricted
  supplierInvitationStatus
  menuOptions {
    name
    nameMobile
    uri
    spa
    platform
    dataTip
    __typename
  }
  visibleLocations {
    id
    name
    archived
    __typename
  }
  company {
    id
    name
    companyType
    whiteLabel
    multiWhiteLabelLinked
    whiteLabelVendor {
      id
      verifiedvendor {
        id
        logoURL
        logoURLAlternate
        supplierportalvendordata {
          disableAddContactButton
          disableEditContactInformation
          disableEditNotification
          modules
          disableEditRestaurantInformation
          disableEditLocationInformation
          disableDownloadAppBanner
          appStoreUrl
          playStoreUrl
          showInvoiceFieldNameAsERPOrderNumber
          defaultSortForOrderHistory
          erpUserNotificationSettings {
            notificationType
            notificationSettings {
              text
              push
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    activeVendors {
      id
      verifiedvendor {
        id
        logoURL
        logoURLAlternate
        __typename
      }
      __typename
    }
    verifiedvendor {
      id
      __typename
    }
    invitedVendor {
      id
      __typename
    }
    vendorcampaign {
      id
      logoURL
      logoURLAlternate
      __typename
    }
    __typename
  }
  companies {
    id
    name
    __typename
  }
  additionalCompanies {
    id
    name
    isVendorCompany
    whiteLabel
    whiteLabelVendor {
      id
      verifiedvendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
  authUser {
    id
    appPermissions
    employee
    vendorUser
    hasPassword
    email
    inviteCampaign
    __typename
  }
  authRedirect
  vendorUser
  picture
  lastlocation {
    id
    name
    archived
    __typename
  }
  paymentOptions {
    name
    enabled
    __typename
  }
  manufacturerOnboardingCompleted
  timezoneCode
  timezoneForTrack
  timezoneString
  __typename
}

fragment VerifiedVendorFragment on VerifiedVendor {
  id
  name
  consumerCode
  storageTypeEnabled
  shift
  collectionMethod
  automaticPriceResolve
  supplierLiteIntegrated
  portalEnabledScraper
  showDispatchDate
  deductTransactionFees
  activateUrl
  isPricingModuleEnabled
  qbProductsSyncIntegrated
  qbCustomerSyncIntegrated
  qboEnabled
  nestedCategoryEnabled
  filtersEnabled
  promotionsEditingEnabled
  thumbnail
  logoURL
  catalogHomePageEnabled
  whiteLabel
  hidePriceFromCatalogCards
  showProductScores
  popularCategories {
    id
    name
    __typename
  }
  catalogSortIndex
  defaultFilters {
    queryStringKey
    filterOptions
    __typename
  }
  __typename
}

fragment GeneralUserAlertFragment on User {
  generalUserAlert {
    visible
    title
    text
    icon
    actionUrl
    showCancelButton
    confirmButtonText
    cancelButtonText
    showCloseButton
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">c109ef8c8f4a53a5f6ae25ef68b8b457774a9480311f68360bbf6b59ee7d12731751985115</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-472 [ConsumerCanonicalProductsSearchQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;ConsumerCanonicalProductsSearchQuery&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;operatingVerifiedVendorId&quot;:&quot;46017666&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;searchString&quot;:&quot;01700&quot;,&quot;fuzziness&quot;:&quot;AUTO&quot;,&quot;deliveryDate&quot;:&quot;2025-07-09&quot;,&quot;limit&quot;:200,&quot;offset&quot;:0,&quot;showHidden&quot;:false,&quot;productDescriptionTagFilters&quot;:[],&quot;manufacturerIds&quot;:[],&quot;productBrandIds&quot;:[],&quot;storageTypes&quot;:[],&quot;rewardTypes&quot;:[],&quot;applyUomWiseVisibilityFilter&quot;:true,&quot;applyPublicCatalogFilter&quot;:false,&quot;showSpecialItems&quot;:false,&quot;distributionCentreIds&quot;:[],&quot;regionIds&quot;:[],&quot;itemTypes&quot;:[],&quot;itemAvailabilities&quot;:[],&quot;itemDeals&quot;:[],&quot;ignoreAdvertisedProducts&quot;:false,&quot;hideNewProducts&quot;:true,&quot;showInstacartAds&quot;:true,&quot;tagFilters&quot;:[]},&quot;query&quot;:&quot;query ConsumerCanonicalProductsSearchQuery($verifiedVendorId: ID!, $operatingVerifiedVendorId: ID, $formId: ID, $locationId: ID, $searchString: String, $activeOnly: Boolean, $showHidden: Boolean, $productBrandIds: [ID], $manufacturerIds: [ID], $storageTypes: [String], $rewardTypes: [String], $productDescriptionTagFilters: [productDescriptionTagFilter], $applyUomWiseVisibilityFilter: Boolean, $fuzziness: String, $deliveryDate: String, $limit: Int, $offset: Int, $applyPublicCatalogFilter: Boolean, $showSpecialItems: Boolean, $distributionCentreIds: [ID], $regionIds: [ID], $considerProductAvailability: Boolean, $itemTypes: [String], $itemAvailabilities: [String], $itemDeals: [String], $ignoreAdvertisedProducts: Boolean, $showInstacartAds: Boolean, $tagFilters: [tagFilter]) {\n  catalogProductsSearchRootQuery(\n    verifiedVendorId: $verifiedVendorId\n    operatingVerifiedVendorId: $operatingVerifiedVendorId\n    locationId: $locationId\n    searchString: $searchString\n    activeOnly: $activeOnly\n    showHidden: $showHidden\n    productBrandIds: $productBrandIds\n    manufacturerIds: $manufacturerIds\n    storageTypes: $storageTypes\n    rewardTypes: $rewardTypes\n    productDescriptionTagFilters: $productDescriptionTagFilters\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    fuzziness: $fuzziness\n    deliveryDate: $deliveryDate\n    limit: $limit\n    offset: $offset\n    applyPublicCatalogFilter: $applyPublicCatalogFilter\n    showSpecialItems: $showSpecialItems\n    distributionCentreIds: $distributionCentreIds\n    regionIds: $regionIds\n    considerProductAvailability: $considerProductAvailability\n    itemTypes: $itemTypes\n    itemAvailabilities: $itemAvailabilities\n    itemDeals: $itemDeals\n    ignoreAdvertisedProducts: $ignoreAdvertisedProducts\n    showInstacartAds: $showInstacartAds\n    tagFilters: $tagFilters\n  ) {\n    count\n    canonicalProducts {\n      ...ConsumerCanonicalProductFragment\n      ...InstacartAdCardConfigFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ConsumerCanonicalProductFragment on CanonicalProduct {\n  ...CanonicalProductForShopLargeListQuery\n  ...RebateConfigsFragment\n  productShopDataForStore {\n    id\n    productsubcategories {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    __typename\n  }\n  displayManufacturerProductDetails\n  productbrand {\n    id\n    displayName\n    __typename\n  }\n  earliestDeliveryDate(locationId: $locationId)\n  manufacturerproduct {\n    id\n    manufacturer {\n      id\n      name\n      websiteUrl\n      __typename\n    }\n    productbrand {\n      id\n      displayName\n      __typename\n    }\n    primaryImage {\n      id\n      url\n      is360\n      category\n      __typename\n    }\n    __typename\n  }\n  supplierOrderOnly(locationId: $locationId)\n  __typename\n}\n\nfragment CanonicalProductForShopLargeListQuery on CanonicalProduct {\n  ...CanonicalProductForLargeList\n  productShopDataForStore {\n    ...ProductShopDataForLargeList\n    __typename\n  }\n  __typename\n}\n\nfragment CanonicalProductForLargeList on CanonicalProduct {\n  id\n  isAddedToOG(formId: $formId, locationId: $locationId)\n  description\n  additionalDescriptions\n  tiHi\n  name\n  nameWithoutBrand\n  itemCode\n  normalizedItemCode\n  uoms\n  normalizedUoms\n  gtin\n  separateDirectShip\n  multiCartEnabled\n  shipDirect\n  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n  isProductInOrderGuide(locationId: $locationId)\n  currentStocks(locationId: $locationId) {\n    uom\n    value\n    __typename\n  }\n  quantityOnOrder {\n    uom\n    value\n    __typename\n  }\n  committedQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPOQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPODate {\n    uom\n    value\n    __typename\n  }\n  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n    uom\n    value\n    float\n    __typename\n  }\n  totalCost {\n    uom\n    value\n    float\n    __typename\n  }\n  distributioncentres {\n    id\n    name\n    code\n    textColor\n    backgroundColor\n    __typename\n  }\n  l0category {\n    id\n    name\n    __typename\n  }\n  l1category {\n    id\n    name\n    displayName\n    __typename\n  }\n  l2category {\n    id\n    name\n    __typename\n  }\n  l3category {\n    id\n    name\n    __typename\n  }\n  l4category {\n    id\n    name\n    __typename\n  }\n  manufacturer {\n    id\n    name\n    __typename\n  }\n  shopifyUOM\n  productNotes(locationId: $locationId)\n  consumerWeight\n  consumerWeightVisible\n  consumerWeightUOM\n  employeeOnly\n  consumerStockCount\n  consumerItemCount\n  consumerItemCountUOM\n  consumerSubcategory\n  displayManufacturerProductDetails\n  productcategory {\n    id\n    name\n    __typename\n  }\n  itemSize\n  itemSizeUOM\n  itemSizeValue\n  itemsPerPack\n  packSize\n  pack\n  packsPerCase\n  size\n  markedAsNew\n  unavailable\n  allowsItemLevelInstructions\n  discontinued(locationId: $locationId)\n  isCatchWeight\n  consumerPerWeightPrice {\n    float\n    money\n    __typename\n  }\n  markedUpPrice(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n  ) {\n    uom\n    price {\n      float\n      money\n      __typename\n    }\n    type\n    value\n    __typename\n  }\n  activeSubstitutions(locationId: $locationId) {\n    id\n    __typename\n  }\n  verifiedvendor {\n    id\n    name\n    logoURL\n    catalogPlaceholder\n    shipDirectSupplier\n    hideZeroPrice\n    catalogDefaultUnit\n    allowsOrderingDiscontinued\n    allowsRebates\n    whiteLabel\n    showStocksInPortal\n    showStocksInOp\n    showCostInPortal\n    showPriceWithAvg\n    uomWiseStocksEnabled\n    uomWiseCostEnabled\n    lowStockMargin\n    showOnlyCatchWeightPriceInOrderFlow\n    hideInventoryForJitAndSpecialOrderItems\n    disableOrderingZeroPricedItems\n    disableOrderingSpecialOrderItems\n    __typename\n  }\n  thumbnail {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  activeAdCard {\n    id\n    __typename\n  }\n  createdTimestamp\n  updated\n  activeDate\n  inactiveDate\n  preOrderable\n  deliveryDays\n  specialOrder\n  jitItem\n  DWOItem\n  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n  BEPRebatesEnabled\n  specialItem\n  packSizePerUom {\n    uom\n    packSize\n    __typename\n  }\n  isGPOForCustomer(locationId: $locationId)\n  buyersName\n  brokenCaseItem\n  __typename\n}\n\nfragment ProductShopDataForLargeList on ProductShopData {\n  id\n  active\n  hidden\n  consumerManualOrdering\n  sizeDescription\n  onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n  discountPercentage\n  consumerPrice(locationId: $locationId) {\n    float\n    money\n    __typename\n  }\n  shopifyName\n  storageType\n  productdescriptiontags {\n    id\n    name\n    visible\n    __typename\n  }\n  productimages {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  hidePrice\n  unitPrices(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    deliveryDate: $deliveryDate\n  ) {\n    unit\n    price {\n      float\n      money\n      cents\n      __typename\n    }\n    billedUnit\n    billedPrice {\n      float\n      money\n      cents\n      __typename\n    }\n    __typename\n  }\n  productsubcategories {\n    id\n    name\n    productcategory {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}\n\nfragment InstacartAdCardConfigFragment on CanonicalProduct {\n  instacartAdCardConfig {\n    objectTrackingId\n    productId\n    displayPosition\n    pageViewId\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">ConsumerCanonicalProductsSearchQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query ConsumerCanonicalProductsSearchQuery($verifiedVendorId: ID!, $operatingVerifiedVendorId: ID, $formId: ID, $locationId: ID, $searchString: String, $activeOnly: Boolean, $showHidden: Boolean, $productBrandIds: [ID], $manufacturerIds: [ID], $storageTypes: [String], $rewardTypes: [String], $productDescriptionTagFilters: [productDescriptionTagFilter], $applyUomWiseVisibilityFilter: Boolean, $fuzziness: String, $deliveryDate: String, $limit: Int, $offset: Int, $applyPublicCatalogFilter: Boolean, $showSpecialItems: Boolean, $distributionCentreIds: [ID], $regionIds: [ID], $considerProductAvailability: Boolean, $itemTypes: [String], $itemAvailabilities: [String], $itemDeals: [String], $ignoreAdvertisedProducts: Boolean, $showInstacartAds: Boolean, $tagFilters: [tagFilter]) {
  catalogProductsSearchRootQuery(
    verifiedVendorId: $verifiedVendorId
    operatingVerifiedVendorId: $operatingVerifiedVendorId
    locationId: $locationId
    searchString: $searchString
    activeOnly: $activeOnly
    showHidden: $showHidden
    productBrandIds: $productBrandIds
    manufacturerIds: $manufacturerIds
    storageTypes: $storageTypes
    rewardTypes: $rewardTypes
    productDescriptionTagFilters: $productDescriptionTagFilters
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    fuzziness: $fuzziness
    deliveryDate: $deliveryDate
    limit: $limit
    offset: $offset
    applyPublicCatalogFilter: $applyPublicCatalogFilter
    showSpecialItems: $showSpecialItems
    distributionCentreIds: $distributionCentreIds
    regionIds: $regionIds
    considerProductAvailability: $considerProductAvailability
    itemTypes: $itemTypes
    itemAvailabilities: $itemAvailabilities
    itemDeals: $itemDeals
    ignoreAdvertisedProducts: $ignoreAdvertisedProducts
    showInstacartAds: $showInstacartAds
    tagFilters: $tagFilters
  ) {
    count
    canonicalProducts {
      ...ConsumerCanonicalProductFragment
      ...InstacartAdCardConfigFragment
      __typename
    }
    __typename
  }
}

fragment ConsumerCanonicalProductFragment on CanonicalProduct {
  ...CanonicalProductForShopLargeListQuery
  ...RebateConfigsFragment
  productShopDataForStore {
    id
    productsubcategories {
      id
      name
      sortIndex
      __typename
    }
    __typename
  }
  displayManufacturerProductDetails
  productbrand {
    id
    displayName
    __typename
  }
  earliestDeliveryDate(locationId: $locationId)
  manufacturerproduct {
    id
    manufacturer {
      id
      name
      websiteUrl
      __typename
    }
    productbrand {
      id
      displayName
      __typename
    }
    primaryImage {
      id
      url
      is360
      category
      __typename
    }
    __typename
  }
  supplierOrderOnly(locationId: $locationId)
  __typename
}

fragment CanonicalProductForShopLargeListQuery on CanonicalProduct {
  ...CanonicalProductForLargeList
  productShopDataForStore {
    ...ProductShopDataForLargeList
    __typename
  }
  __typename
}

fragment CanonicalProductForLargeList on CanonicalProduct {
  id
  isAddedToOG(formId: $formId, locationId: $locationId)
  description
  additionalDescriptions
  tiHi
  name
  nameWithoutBrand
  itemCode
  normalizedItemCode
  uoms
  normalizedUoms
  gtin
  separateDirectShip
  multiCartEnabled
  shipDirect
  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
  isProductInOrderGuide(locationId: $locationId)
  currentStocks(locationId: $locationId) {
    uom
    value
    __typename
  }
  quantityOnOrder {
    uom
    value
    __typename
  }
  committedQuantity {
    uom
    value
    __typename
  }
  nextPOQuantity {
    uom
    value
    __typename
  }
  nextPODate {
    uom
    value
    __typename
  }
  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
    uom
    value
    float
    __typename
  }
  totalCost {
    uom
    value
    float
    __typename
  }
  distributioncentres {
    id
    name
    code
    textColor
    backgroundColor
    __typename
  }
  l0category {
    id
    name
    __typename
  }
  l1category {
    id
    name
    displayName
    __typename
  }
  l2category {
    id
    name
    __typename
  }
  l3category {
    id
    name
    __typename
  }
  l4category {
    id
    name
    __typename
  }
  manufacturer {
    id
    name
    __typename
  }
  shopifyUOM
  productNotes(locationId: $locationId)
  consumerWeight
  consumerWeightVisible
  consumerWeightUOM
  employeeOnly
  consumerStockCount
  consumerItemCount
  consumerItemCountUOM
  consumerSubcategory
  displayManufacturerProductDetails
  productcategory {
    id
    name
    __typename
  }
  itemSize
  itemSizeUOM
  itemSizeValue
  itemsPerPack
  packSize
  pack
  packsPerCase
  size
  markedAsNew
  unavailable
  allowsItemLevelInstructions
  discontinued(locationId: $locationId)
  isCatchWeight
  consumerPerWeightPrice {
    float
    money
    __typename
  }
  markedUpPrice(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
  ) {
    uom
    price {
      float
      money
      __typename
    }
    type
    value
    __typename
  }
  activeSubstitutions(locationId: $locationId) {
    id
    __typename
  }
  verifiedvendor {
    id
    name
    logoURL
    catalogPlaceholder
    shipDirectSupplier
    hideZeroPrice
    catalogDefaultUnit
    allowsOrderingDiscontinued
    allowsRebates
    whiteLabel
    showStocksInPortal
    showStocksInOp
    showCostInPortal
    showPriceWithAvg
    uomWiseStocksEnabled
    uomWiseCostEnabled
    lowStockMargin
    showOnlyCatchWeightPriceInOrderFlow
    hideInventoryForJitAndSpecialOrderItems
    disableOrderingZeroPricedItems
    disableOrderingSpecialOrderItems
    __typename
  }
  thumbnail {
    id
    url
    is360
    category
    __typename
  }
  activeAdCard {
    id
    __typename
  }
  createdTimestamp
  updated
  activeDate
  inactiveDate
  preOrderable
  deliveryDays
  specialOrder
  jitItem
  DWOItem
  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
  BEPRebatesEnabled
  specialItem
  packSizePerUom {
    uom
    packSize
    __typename
  }
  isGPOForCustomer(locationId: $locationId)
  buyersName
  brokenCaseItem
  __typename
}

fragment ProductShopDataForLargeList on ProductShopData {
  id
  active
  hidden
  consumerManualOrdering
  sizeDescription
  onSale(locationId: $locationId, deliveryDate: $deliveryDate)
  discountPercentage
  consumerPrice(locationId: $locationId) {
    float
    money
    __typename
  }
  shopifyName
  storageType
  productdescriptiontags {
    id
    name
    visible
    __typename
  }
  productimages {
    id
    url
    is360
    category
    __typename
  }
  hidePrice
  unitPrices(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    deliveryDate: $deliveryDate
  ) {
    unit
    price {
      float
      money
      cents
      __typename
    }
    billedUnit
    billedPrice {
      float
      money
      cents
      __typename
    }
    __typename
  }
  productsubcategories {
    id
    name
    productcategory {
      id
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}

fragment InstacartAdCardConfigFragment on CanonicalProduct {
  instacartAdCardConfig {
    objectTrackingId
    productId
    displayPosition
    pageViewId
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;operatingVerifiedVendorId&quot;:&quot;46017666&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;searchString&quot;:&quot;01700&quot;,&quot;fuzziness&quot;:&quot;AUTO&quot;,&quot;deliveryDate&quot;:&quot;2025-07-09&quot;,&quot;limit&quot;:200,&quot;offset&quot;:0,&quot;showHidden&quot;:false,&quot;productDescriptionTagFilters&quot;:[],&quot;manufacturerIds&quot;:[],&quot;productBrandIds&quot;:[],&quot;storageTypes&quot;:[],&quot;rewardTypes&quot;:[],&quot;applyUomWiseVisibilityFilter&quot;:true,&quot;applyPublicCatalogFilter&quot;:false,&quot;showSpecialItems&quot;:false,&quot;distributionCentreIds&quot;:[],&quot;regionIds&quot;:[],&quot;itemTypes&quot;:[],&quot;itemAvailabilities&quot;:[],&quot;itemDeals&quot;:[],&quot;ignoreAdvertisedProducts&quot;:false,&quot;hideNewProducts&quot;:true,&quot;showInstacartAds&quot;:true,&quot;tagFilters&quot;:[]}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;page=1&amp;search=01700</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">129a4c3b903229c2b318066220c94ef2177a48437c1b9e1b3e16119e5fb504081751985155</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-473 [formForOrder]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;formForOrder&quot;,&quot;variables&quot;:{&quot;isStandingOrderFlow&quot;:false,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;searchString&quot;:&quot;01700&quot;,&quot;sortView&quot;:&quot;custom_view&quot;,&quot;offset&quot;:0,&quot;limit&quot;:15,&quot;deliveryDate&quot;:&quot;2025-07-09&quot;,&quot;useElasticSearch&quot;:true,&quot;sectionId&quot;:null,&quot;sectionCategoryId&quot;:null},&quot;query&quot;:&quot;query formForOrder($formId: ID!, $locationId: ID!, $showHiddenItems: Boolean, $skipLocationPrivacy: Boolean, $deliveryDate: String, $offset: Int, $limit: Int, $useElasticSearch: Boolean, $sectionId: ID, $sectionCategoryId: ID, $sortView: String, $searchString: String, $isStandingOrderFlow: Boolean = false) {\n  form(id: $formId) {\n    ...OrderGuidePageForm\n    sectionsWithCount(\n      location_id: $locationId\n      showHiddenItems: $showHiddenItems\n      skipLocationPrivacy: $skipLocationPrivacy\n      useElasticSearch: $useElasticSearch\n      sectionId: $sectionId\n      sectionCategoryId: $sectionCategoryId\n      sortView: $sortView\n      offset: $offset\n      limit: $limit\n      searchString: $searchString\n    ) {\n      sections {\n        ...FormSectionFragment\n        __typename\n      }\n      fullCount\n      __typename\n    }\n    offset\n    approvalRequired\n    isApprover(locationId: $locationId)\n    continuableDraft(locationId: $locationId) {\n      id\n      date\n      itemCount\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment OrderGuidePageForm on Form {\n  id\n  name\n  allowsInstructions\n  maxInstructionChars\n  deliveryFee\n  isFromIntegration\n  isEditable\n  shouldDisableOrderingOutOfStockProducts(locationId: $locationId)\n  lastUpdatedTimestamp\n  allowsAddingItems(locationId: $locationId)\n  isCatalogDisabledOnlyForOperator\n  alwaysAddFromCatalog\n  isCutDryDirect\n  shipDirectEnabled\n  cutOffDayOffset(locationId: $locationId)\n  substitutionViewType\n  isFetchStockCountsFromIntegrator\n  multiCartAvailableDeliveryDays(locationId: $locationId) {\n    cartCode\n    deliveryDates {\n      date\n      cutoffTimestamp\n      softCutoffTimestamp\n      isVisibleToOperator\n      __typename\n    }\n    __typename\n  }\n  availableDeliveryDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    softCutoffTimestamp\n    isVisibleToOperator\n    __typename\n  }\n  customerHolidays(locationId: $locationId)\n  allowsPickup(locationId: $locationId)\n  allowedFulfilmentTypes(locationId: $locationId)\n  allowsMailDelivery\n  allowsDelivery\n  availablePickupDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    pickupTimes {\n      time\n      cutoffTimestamp\n      __typename\n    }\n    __typename\n  }\n  availableDispatchDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    __typename\n  }\n  availableWeekdays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    __typename\n  }\n  hasContactMethod(locationId: $locationId)\n  hasShopExperience(locationId: $locationId)\n  orderingDays\n  company {\n    id\n    name\n    whiteLabel\n    hasActivePaymentMethods\n    members @include(if: $isStandingOrderFlow) {\n      id\n      email\n      name\n      __typename\n    }\n    __typename\n  }\n  cutoffTimeString\n  lastOrderedProductIds(location_id: $locationId)\n  info\n  locations(filterByID: $locationId) {\n    id\n    name\n    nameWithCompany\n    address\n    streetAddress2\n    city\n    state\n    zip\n    locationshiptoaddresses {\n      id\n      asString\n      __typename\n    }\n    __typename\n  }\n  vendor {\n    id\n    name\n    isCutDryDirect\n    catalogDisabled\n    createOGDisabled\n    payEnabled\n    activeLocations {\n      id\n      name\n      __typename\n    }\n    salespeople {\n      id\n      name\n      allLocations\n      locations {\n        id\n        __typename\n      }\n      __typename\n    }\n    hideSubstitutions\n    verifiedvendor {\n      id\n      name\n      operatorPortalName\n      dateTerm\n      allowsPickup\n      allowsPickupSupplierPortalOnly\n      manufacturerRebatesEnabled\n      defaultFilters {\n        queryStringKey\n        filterOptions\n        __typename\n      }\n      isQBIntegrated\n      isScraperIntegrated\n      isInstantScraperEnabled\n      catalogViewType\n      nestedCategoryEnabled\n      filtersEnabled\n      logoURL\n      allowsOrderingDiscontinued\n      autoCategorizeEnabled\n      catalogLandingPageActive\n      thumbnail\n      catalogHomePageEnabled\n      whiteLabel\n      hardHoldMessage\n      popularCategories {\n        id\n        name\n        __typename\n      }\n      showDeliveryDateInOg\n      showOnlyCatchWeightPriceInOrderFlow\n      showProductSizeDescriptionInSubs\n      showHeroImage\n      showFeaturedItems\n      showOnSaleItems\n      showHeroImage\n      showSmallerImages\n      showFeaturedItems\n      showOnSaleItems\n      catalogHeroImage\n      catalogSmallerImage1\n      catalogSmallerImage2\n      catalogMobileHeroImage\n      catalogHeroImageUrl\n      catalogSmallerImage1Url\n      catalogSmallerImage2Url\n      showStocksInPortal\n      showPriceWithAvg\n      showStocksInOp\n      showCostInPortal\n      uomWiseStocksEnabled\n      uomWiseCostEnabled\n      showMarginInPortal\n      spotPricingEnabled\n      cartSummaryVolumeEnabled\n      cartSummaryWeightEnabled\n      sendSpotPriceUpdatesEnabled\n      lowStockMargin\n      fetchOGPricesFromPricingServiceEnabled\n      dateBasedPricingEnabled\n      showDeliveryDateBasedJitCutoffs\n      bepRebatesActive\n      allowsRebates\n      showPayBannerOnOrderConfirmation\n      catalogSortIndex\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      supplierportalvendordata {\n        id\n        portalOverridesOrderMins\n        splitWeightsActive\n        sameDayDeliveryOffsetSeconds\n        showLocationWisePricesForSubstitutes\n        showSubstitutionsModalInPortal\n        showItemLevelInstructionsInPortal\n        showItemLevelInstructionsInOperator\n        itemLevelInstructionLimit\n        multipleShipTosEnabled\n        chunkCountWaitLimit\n        ogPageSize\n        ogFirstPageSize\n        defaultViewAsCustomer\n        disableItemDeletesAndSubtractsForOrderEdits\n        disableItemDeletesAndSubtractsForOrderEditsInPortal\n        pickupTimeSelectEnabled\n        showMemoCodeInOperatorPortal\n        showMemoCodeInSupplierPortal\n        multiCartEnabled\n        avoidDefaultCaseStyling\n        catalogInfoOnlyViewIfOnOG\n        catalogInfoOnlyViewMessage\n        totalCostMarginEnabled\n        showOrderSummary\n        disableDeliveryDateChangeForOrderEditsInOp\n        disableDeliveryDateChangeForOrderEditsInPortal\n        disableDeliveryDateChangeWarningMessage\n        showLastOrderedPrice\n        showLastOrderedPriceInPortal\n        useTotalCostForMarginValidation\n        showUnitPriceAsMainPriceInCatalog\n        showCalculatedSecondaryPriceInCatalog\n        persistsItemLevelInstructions\n        hideZeroStockLabelInOP\n        hideOutOfStockLabelInSP\n        showUnavailableInsteadOfOutOfStock\n        poundSpotPricingEnabled\n        disableOrderingOutOfStockProductsWithoutSubstitutes\n        checkForZeroPricedItems\n        showLastOrderedPoundPrice\n        preserveCartItemOrder\n        validateMarginInPortal\n        disableEditingPoundQuantity\n        blockPartialQuantityOrdering\n        blockPartialQuantityOrderingInOperatorPortal\n        accountHoldAlertsEnabled\n        hideCatchWeightUnitPriceInCatalog\n        showDistributionCentreLabels\n        offlineOrderingEnabled\n        catalogOnlyOrderFlowEnabled\n        dateBasedPricingBannerDisabled\n        showPurchaseHistory\n        quickAddViewEnabledStatus\n        simpleListViewEnabledStatus\n        enabledLargeProductTiles\n        enabledAdditionalDescriptions\n        enabledTiHiPalletDetails\n        __typename\n      }\n      restrictPriceChangesBelowMinimumPriceEnabled\n      splitSpecialOrders\n      sortOGByItemCode\n      showCaseDiscountsDisclaimerMessage\n      disableOrderingZeroPricedItems\n      disableOrderingSpecialOrderItems\n      __typename\n    }\n    shipdirectverifiedvendor {\n      id\n      shippingFeeWaived\n      shippingFeeWaivedUntil\n      firstOrderDiscounted\n      firstOrderDiscount\n      firstOrderDiscountMaxCap\n      thumbnail\n      shipDirectLandingPageActive\n      catalogHeroImage\n      catalogMobileHeroImage\n      __typename\n    }\n    integrationDataForLocation(locationId: $locationId) {\n      id\n      customerNumber\n      taxRate\n      isAccountOnHold\n      deliveryDaysNote\n      accountHoldCode\n      isPONumberRequired\n      updatePoNumberWithOgName(isStandingOrderFlow: $isStandingOrderFlow)\n      __typename\n    }\n    orderingStatus\n    __typename\n  }\n  userData {\n    id\n    collapsedsections {\n      id\n      __typename\n    }\n    __typename\n  }\n  accountingcategory {\n    id\n    __typename\n  }\n  productSamples(locationId: $locationId) {\n    ...ProductSampleForOrderFragment\n    __typename\n  }\n  shipDirectEnabled\n  shipdirectvendors {\n    id\n    verifiedvendor {\n      id\n      __typename\n    }\n    __typename\n  }\n  isMergeOrdersOk\n  __typename\n}\n\nfragment ProductSampleForOrderFragment on ManufacturerProductSample {\n  id\n  unit\n  priceAmount {\n    money\n    float\n    __typename\n  }\n  canonicalproduct {\n    id\n    description\n    itemCode\n    normalizedItemCode\n    multiCartEnabled\n    shipDirect\n    thumbnail {\n      id\n      url\n      is360\n      __typename\n    }\n    distributioncentres {\n      id\n      code\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FormSectionFragment on FormSection {\n  id\n  stringID\n  title\n  placeholder\n  updated\n  multiUnitProducts(\n    showHiddenItems: $showHiddenItems\n    skipLocationPrivacy: $skipLocationPrivacy\n    offset: $offset\n    limit: $limit\n    useElasticSearch: $useElasticSearch\n  ) {\n    ...MultiUnitProductForOrderFragment\n    __typename\n  }\n  __typename\n}\n\nfragment MultiUnitProductForOrderFragment on MultiUnitProduct {\n  id\n  multiUnitGroupingId\n  itemCode\n  name\n  updated\n  taxable\n  sectionItemSequence\n  products {\n    id\n    name\n    archived(locationId: $locationId)\n    itemCode\n    shipDirect\n    instructionText\n    price(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      cents\n      __typename\n    }\n    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)\n    rebateAmount {\n      money\n      cents\n      __typename\n    }\n    productNotes(locationId: $locationId)\n    precut\n    prioritizePoundPriceInOG(locationId: $locationId)\n    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)\n    unit\n    abbreviatedUnit\n    par\n    lastOrderedLabel(locationId: $locationId)\n    lastOrderTimeAndQuantity(locationId: $locationId) {\n      quantity\n      lastOrderedTime\n      uom\n      daysAgo\n      price\n      poundPrice\n      __typename\n    }\n    showDiscontinued\n    isOutOfStock\n    isUnavailable\n    canonicalproduct {\n      id\n      itemCode\n      normalizedItemCode\n      description\n      pack\n      consumerCategory\n      discontinued(locationId: $locationId)\n      quickbooksRefID\n      syncedWithQB\n      shipDirect\n      specialOrder\n      jitItem\n      DWOItem\n      brandName\n      unavailable\n      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n      productNotes(locationId: $locationId)\n      displayManufacturerProductDetails\n      gtin\n      nameWithoutBrand\n      normalizedUoms\n      supplierOrderOnly(locationId: $locationId)\n      onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n      separateDirectShip\n      isCatchWeight\n      netWeight\n      volume\n      isGPOForCustomer(locationId: $locationId)\n      brokenCaseItem\n      currentStocks(locationId: $locationId) {\n        uom\n        value\n        __typename\n      }\n      quantityOnOrder {\n        uom\n        value\n        __typename\n      }\n      committedQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPOQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPODate {\n        uom\n        value\n        __typename\n      }\n      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        value\n        float\n        __typename\n      }\n      totalCost {\n        uom\n        value\n        float\n        __typename\n      }\n      salesMargin {\n        uom\n        value\n        float\n        __typename\n      }\n      markedAsNew\n      BEPRebatesEnabled\n      ...RebateConfigsFragment\n      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n      specialItem\n      forceShowSubstitutes(locationId: $locationId)\n      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        type\n        value\n        __typename\n      }\n      multiCartEnabled\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      l0category {\n        id\n        name\n        __typename\n      }\n      l1category {\n        id\n        name\n        __typename\n      }\n      l2category {\n        id\n        name\n        __typename\n      }\n      l3category {\n        id\n        name\n        __typename\n      }\n      l4category {\n        id\n        name\n        __typename\n      }\n      packSize\n      thumbnail {\n        id\n        url\n        is360\n        category\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      primaryImage {\n        id\n        url\n        __typename\n      }\n      productShopDataForStore {\n        id\n        sizeDescription\n        onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n        shopifyName\n        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n          unit\n          billedUnit\n          billedPrice {\n            float\n            money\n            __typename\n          }\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        productsubcategories {\n          id\n          name\n          productcategory {\n            id\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      allowsItemLevelInstructions\n      activeSubstitutions(locationId: $locationId) {\n        id\n        itemCode\n        normalizedItemCode\n        shopifyName\n        description\n        normalizedUoms\n        pack\n        activeAdCard {\n          id\n          __typename\n        }\n        manufacturer {\n          id\n          name\n          __typename\n        }\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        unitPriceEstimates {\n          unit\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        thumbnail {\n          id\n          url\n          __typename\n        }\n        primaryImage {\n          id\n          url\n          __typename\n        }\n        productShopDataForStore {\n          id\n          sizeDescription\n          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n            unit\n            price {\n              float\n              money\n              __typename\n            }\n            billedUnit\n            billedPrice {\n              float\n              money\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      verifiedvendor {\n        id\n        name\n        allowsRebates\n        supplierportalvendordata {\n          id\n          showCalculatedSecondaryPriceInCatalog\n          __typename\n        }\n        whiteLabel\n        showStocksInPortal\n        showStocksInOp\n        showCostInPortal\n        uomWiseStocksEnabled\n        uomWiseCostEnabled\n        showMarginInPortal\n        lowStockMargin\n        maxSalesMargin\n        minSalesMargin\n        spotPricingEnabled\n        poundSpotPricingEnabled\n        sendSpotPriceUpdatesEnabled\n        restrictPriceChangesBelowMinimumPriceEnabled\n        showOnlyCatchWeightPriceInOrderFlow\n        hideInventoryForJitAndSpecialOrderItems\n        showPriceWithAvg\n        hideZeroPrice\n        catalogDefaultUnit\n        __typename\n      }\n      manufacturerproduct {\n        id\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      productbrand {\n        id\n        displayName\n        __typename\n      }\n      searchKeywords\n      ...CanonicalProductDimensionsFragment\n      packSizePerUom {\n        uom\n        packSize\n        __typename\n      }\n      buyersName\n      __typename\n    }\n    doNotSub\n    defaultsubstitution {\n      id\n      __typename\n    }\n    eligibleForSwitchCashback\n    locations {\n      id\n      __typename\n    }\n    __typename\n  }\n  defaultUnit\n  __typename\n}\n\nfragment CanonicalProductDimensionsFragment on CanonicalProduct {\n  gtin\n  itemsPerPack\n  packsPerCase\n  totalItems\n  itemSizeType\n  itemSizeValue\n  itemSizeUOM\n  dimensionDetail\n  dimensionNotes\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">formForOrder</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query formForOrder($formId: ID!, $locationId: ID!, $showHiddenItems: Boolean, $skipLocationPrivacy: Boolean, $deliveryDate: String, $offset: Int, $limit: Int, $useElasticSearch: Boolean, $sectionId: ID, $sectionCategoryId: ID, $sortView: String, $searchString: String, $isStandingOrderFlow: Boolean = false) {
  form(id: $formId) {
    ...OrderGuidePageForm
    sectionsWithCount(
      location_id: $locationId
      showHiddenItems: $showHiddenItems
      skipLocationPrivacy: $skipLocationPrivacy
      useElasticSearch: $useElasticSearch
      sectionId: $sectionId
      sectionCategoryId: $sectionCategoryId
      sortView: $sortView
      offset: $offset
      limit: $limit
      searchString: $searchString
    ) {
      sections {
        ...FormSectionFragment
        __typename
      }
      fullCount
      __typename
    }
    offset
    approvalRequired
    isApprover(locationId: $locationId)
    continuableDraft(locationId: $locationId) {
      id
      date
      itemCount
      __typename
    }
    __typename
  }
}

fragment OrderGuidePageForm on Form {
  id
  name
  allowsInstructions
  maxInstructionChars
  deliveryFee
  isFromIntegration
  isEditable
  shouldDisableOrderingOutOfStockProducts(locationId: $locationId)
  lastUpdatedTimestamp
  allowsAddingItems(locationId: $locationId)
  isCatalogDisabledOnlyForOperator
  alwaysAddFromCatalog
  isCutDryDirect
  shipDirectEnabled
  cutOffDayOffset(locationId: $locationId)
  substitutionViewType
  isFetchStockCountsFromIntegrator
  multiCartAvailableDeliveryDays(locationId: $locationId) {
    cartCode
    deliveryDates {
      date
      cutoffTimestamp
      softCutoffTimestamp
      isVisibleToOperator
      __typename
    }
    __typename
  }
  availableDeliveryDays(locationId: $locationId) {
    date
    cutoffTimestamp
    softCutoffTimestamp
    isVisibleToOperator
    __typename
  }
  customerHolidays(locationId: $locationId)
  allowsPickup(locationId: $locationId)
  allowedFulfilmentTypes(locationId: $locationId)
  allowsMailDelivery
  allowsDelivery
  availablePickupDays(locationId: $locationId) {
    date
    cutoffTimestamp
    pickupTimes {
      time
      cutoffTimestamp
      __typename
    }
    __typename
  }
  availableDispatchDays(locationId: $locationId) {
    date
    cutoffTimestamp
    __typename
  }
  availableWeekdays(locationId: $locationId) {
    date
    cutoffTimestamp
    __typename
  }
  hasContactMethod(locationId: $locationId)
  hasShopExperience(locationId: $locationId)
  orderingDays
  company {
    id
    name
    whiteLabel
    hasActivePaymentMethods
    members @include(if: $isStandingOrderFlow) {
      id
      email
      name
      __typename
    }
    __typename
  }
  cutoffTimeString
  lastOrderedProductIds(location_id: $locationId)
  info
  locations(filterByID: $locationId) {
    id
    name
    nameWithCompany
    address
    streetAddress2
    city
    state
    zip
    locationshiptoaddresses {
      id
      asString
      __typename
    }
    __typename
  }
  vendor {
    id
    name
    isCutDryDirect
    catalogDisabled
    createOGDisabled
    payEnabled
    activeLocations {
      id
      name
      __typename
    }
    salespeople {
      id
      name
      allLocations
      locations {
        id
        __typename
      }
      __typename
    }
    hideSubstitutions
    verifiedvendor {
      id
      name
      operatorPortalName
      dateTerm
      allowsPickup
      allowsPickupSupplierPortalOnly
      manufacturerRebatesEnabled
      defaultFilters {
        queryStringKey
        filterOptions
        __typename
      }
      isQBIntegrated
      isScraperIntegrated
      isInstantScraperEnabled
      catalogViewType
      nestedCategoryEnabled
      filtersEnabled
      logoURL
      allowsOrderingDiscontinued
      autoCategorizeEnabled
      catalogLandingPageActive
      thumbnail
      catalogHomePageEnabled
      whiteLabel
      hardHoldMessage
      popularCategories {
        id
        name
        __typename
      }
      showDeliveryDateInOg
      showOnlyCatchWeightPriceInOrderFlow
      showProductSizeDescriptionInSubs
      showHeroImage
      showFeaturedItems
      showOnSaleItems
      showHeroImage
      showSmallerImages
      showFeaturedItems
      showOnSaleItems
      catalogHeroImage
      catalogSmallerImage1
      catalogSmallerImage2
      catalogMobileHeroImage
      catalogHeroImageUrl
      catalogSmallerImage1Url
      catalogSmallerImage2Url
      showStocksInPortal
      showPriceWithAvg
      showStocksInOp
      showCostInPortal
      uomWiseStocksEnabled
      uomWiseCostEnabled
      showMarginInPortal
      spotPricingEnabled
      cartSummaryVolumeEnabled
      cartSummaryWeightEnabled
      sendSpotPriceUpdatesEnabled
      lowStockMargin
      fetchOGPricesFromPricingServiceEnabled
      dateBasedPricingEnabled
      showDeliveryDateBasedJitCutoffs
      bepRebatesActive
      allowsRebates
      showPayBannerOnOrderConfirmation
      catalogSortIndex
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      supplierportalvendordata {
        id
        portalOverridesOrderMins
        splitWeightsActive
        sameDayDeliveryOffsetSeconds
        showLocationWisePricesForSubstitutes
        showSubstitutionsModalInPortal
        showItemLevelInstructionsInPortal
        showItemLevelInstructionsInOperator
        itemLevelInstructionLimit
        multipleShipTosEnabled
        chunkCountWaitLimit
        ogPageSize
        ogFirstPageSize
        defaultViewAsCustomer
        disableItemDeletesAndSubtractsForOrderEdits
        disableItemDeletesAndSubtractsForOrderEditsInPortal
        pickupTimeSelectEnabled
        showMemoCodeInOperatorPortal
        showMemoCodeInSupplierPortal
        multiCartEnabled
        avoidDefaultCaseStyling
        catalogInfoOnlyViewIfOnOG
        catalogInfoOnlyViewMessage
        totalCostMarginEnabled
        showOrderSummary
        disableDeliveryDateChangeForOrderEditsInOp
        disableDeliveryDateChangeForOrderEditsInPortal
        disableDeliveryDateChangeWarningMessage
        showLastOrderedPrice
        showLastOrderedPriceInPortal
        useTotalCostForMarginValidation
        showUnitPriceAsMainPriceInCatalog
        showCalculatedSecondaryPriceInCatalog
        persistsItemLevelInstructions
        hideZeroStockLabelInOP
        hideOutOfStockLabelInSP
        showUnavailableInsteadOfOutOfStock
        poundSpotPricingEnabled
        disableOrderingOutOfStockProductsWithoutSubstitutes
        checkForZeroPricedItems
        showLastOrderedPoundPrice
        preserveCartItemOrder
        validateMarginInPortal
        disableEditingPoundQuantity
        blockPartialQuantityOrdering
        blockPartialQuantityOrderingInOperatorPortal
        accountHoldAlertsEnabled
        hideCatchWeightUnitPriceInCatalog
        showDistributionCentreLabels
        offlineOrderingEnabled
        catalogOnlyOrderFlowEnabled
        dateBasedPricingBannerDisabled
        showPurchaseHistory
        quickAddViewEnabledStatus
        simpleListViewEnabledStatus
        enabledLargeProductTiles
        enabledAdditionalDescriptions
        enabledTiHiPalletDetails
        __typename
      }
      restrictPriceChangesBelowMinimumPriceEnabled
      splitSpecialOrders
      sortOGByItemCode
      showCaseDiscountsDisclaimerMessage
      disableOrderingZeroPricedItems
      disableOrderingSpecialOrderItems
      __typename
    }
    shipdirectverifiedvendor {
      id
      shippingFeeWaived
      shippingFeeWaivedUntil
      firstOrderDiscounted
      firstOrderDiscount
      firstOrderDiscountMaxCap
      thumbnail
      shipDirectLandingPageActive
      catalogHeroImage
      catalogMobileHeroImage
      __typename
    }
    integrationDataForLocation(locationId: $locationId) {
      id
      customerNumber
      taxRate
      isAccountOnHold
      deliveryDaysNote
      accountHoldCode
      isPONumberRequired
      updatePoNumberWithOgName(isStandingOrderFlow: $isStandingOrderFlow)
      __typename
    }
    orderingStatus
    __typename
  }
  userData {
    id
    collapsedsections {
      id
      __typename
    }
    __typename
  }
  accountingcategory {
    id
    __typename
  }
  productSamples(locationId: $locationId) {
    ...ProductSampleForOrderFragment
    __typename
  }
  shipDirectEnabled
  shipdirectvendors {
    id
    verifiedvendor {
      id
      __typename
    }
    __typename
  }
  isMergeOrdersOk
  __typename
}

fragment ProductSampleForOrderFragment on ManufacturerProductSample {
  id
  unit
  priceAmount {
    money
    float
    __typename
  }
  canonicalproduct {
    id
    description
    itemCode
    normalizedItemCode
    multiCartEnabled
    shipDirect
    thumbnail {
      id
      url
      is360
      __typename
    }
    distributioncentres {
      id
      code
      __typename
    }
    __typename
  }
  __typename
}

fragment FormSectionFragment on FormSection {
  id
  stringID
  title
  placeholder
  updated
  multiUnitProducts(
    showHiddenItems: $showHiddenItems
    skipLocationPrivacy: $skipLocationPrivacy
    offset: $offset
    limit: $limit
    useElasticSearch: $useElasticSearch
  ) {
    ...MultiUnitProductForOrderFragment
    __typename
  }
  __typename
}

fragment MultiUnitProductForOrderFragment on MultiUnitProduct {
  id
  multiUnitGroupingId
  itemCode
  name
  updated
  taxable
  sectionItemSequence
  products {
    id
    name
    archived(locationId: $locationId)
    itemCode
    shipDirect
    instructionText
    price(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      cents
      __typename
    }
    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)
    rebateAmount {
      money
      cents
      __typename
    }
    productNotes(locationId: $locationId)
    precut
    prioritizePoundPriceInOG(locationId: $locationId)
    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)
    unit
    abbreviatedUnit
    par
    lastOrderedLabel(locationId: $locationId)
    lastOrderTimeAndQuantity(locationId: $locationId) {
      quantity
      lastOrderedTime
      uom
      daysAgo
      price
      poundPrice
      __typename
    }
    showDiscontinued
    isOutOfStock
    isUnavailable
    canonicalproduct {
      id
      itemCode
      normalizedItemCode
      description
      pack
      consumerCategory
      discontinued(locationId: $locationId)
      quickbooksRefID
      syncedWithQB
      shipDirect
      specialOrder
      jitItem
      DWOItem
      brandName
      unavailable
      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
      productNotes(locationId: $locationId)
      displayManufacturerProductDetails
      gtin
      nameWithoutBrand
      normalizedUoms
      supplierOrderOnly(locationId: $locationId)
      onSale(locationId: $locationId, deliveryDate: $deliveryDate)
      separateDirectShip
      isCatchWeight
      netWeight
      volume
      isGPOForCustomer(locationId: $locationId)
      brokenCaseItem
      currentStocks(locationId: $locationId) {
        uom
        value
        __typename
      }
      quantityOnOrder {
        uom
        value
        __typename
      }
      committedQuantity {
        uom
        value
        __typename
      }
      nextPOQuantity {
        uom
        value
        __typename
      }
      nextPODate {
        uom
        value
        __typename
      }
      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        value
        float
        __typename
      }
      totalCost {
        uom
        value
        float
        __typename
      }
      salesMargin {
        uom
        value
        float
        __typename
      }
      markedAsNew
      BEPRebatesEnabled
      ...RebateConfigsFragment
      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
      specialItem
      forceShowSubstitutes(locationId: $locationId)
      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        type
        value
        __typename
      }
      multiCartEnabled
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      l0category {
        id
        name
        __typename
      }
      l1category {
        id
        name
        __typename
      }
      l2category {
        id
        name
        __typename
      }
      l3category {
        id
        name
        __typename
      }
      l4category {
        id
        name
        __typename
      }
      packSize
      thumbnail {
        id
        url
        is360
        category
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      primaryImage {
        id
        url
        __typename
      }
      productShopDataForStore {
        id
        sizeDescription
        onSale(locationId: $locationId, deliveryDate: $deliveryDate)
        shopifyName
        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
          unit
          billedUnit
          billedPrice {
            float
            money
            __typename
          }
          price {
            float
            money
            __typename
          }
          __typename
        }
        productsubcategories {
          id
          name
          productcategory {
            id
            name
            __typename
          }
          __typename
        }
        __typename
      }
      allowsItemLevelInstructions
      activeSubstitutions(locationId: $locationId) {
        id
        itemCode
        normalizedItemCode
        shopifyName
        description
        normalizedUoms
        pack
        activeAdCard {
          id
          __typename
        }
        manufacturer {
          id
          name
          __typename
        }
        productbrand {
          id
          displayName
          __typename
        }
        unitPriceEstimates {
          unit
          price {
            float
            money
            __typename
          }
          __typename
        }
        thumbnail {
          id
          url
          __typename
        }
        primaryImage {
          id
          url
          __typename
        }
        productShopDataForStore {
          id
          sizeDescription
          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
            unit
            price {
              float
              money
              __typename
            }
            billedUnit
            billedPrice {
              float
              money
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      verifiedvendor {
        id
        name
        allowsRebates
        supplierportalvendordata {
          id
          showCalculatedSecondaryPriceInCatalog
          __typename
        }
        whiteLabel
        showStocksInPortal
        showStocksInOp
        showCostInPortal
        uomWiseStocksEnabled
        uomWiseCostEnabled
        showMarginInPortal
        lowStockMargin
        maxSalesMargin
        minSalesMargin
        spotPricingEnabled
        poundSpotPricingEnabled
        sendSpotPriceUpdatesEnabled
        restrictPriceChangesBelowMinimumPriceEnabled
        showOnlyCatchWeightPriceInOrderFlow
        hideInventoryForJitAndSpecialOrderItems
        showPriceWithAvg
        hideZeroPrice
        catalogDefaultUnit
        __typename
      }
      manufacturerproduct {
        id
        productbrand {
          id
          displayName
          __typename
        }
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      productbrand {
        id
        displayName
        __typename
      }
      searchKeywords
      ...CanonicalProductDimensionsFragment
      packSizePerUom {
        uom
        packSize
        __typename
      }
      buyersName
      __typename
    }
    doNotSub
    defaultsubstitution {
      id
      __typename
    }
    eligibleForSwitchCashback
    locations {
      id
      __typename
    }
    __typename
  }
  defaultUnit
  __typename
}

fragment CanonicalProductDimensionsFragment on CanonicalProduct {
  gtin
  itemsPerPack
  packsPerCase
  totalItems
  itemSizeType
  itemSizeValue
  itemSizeUOM
  dimensionDetail
  dimensionNotes
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;isStandingOrderFlow&quot;:false,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;searchString&quot;:&quot;01700&quot;,&quot;sortView&quot;:&quot;custom_view&quot;,&quot;offset&quot;:0,&quot;limit&quot;:15,&quot;deliveryDate&quot;:&quot;2025-07-09&quot;,&quot;useElasticSearch&quot;:true,&quot;sectionId&quot;:null,&quot;sectionCategoryId&quot;:null}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;page=1&amp;search=01700</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">129a4c3b903229c2b318066220c94ef2177a48437c1b9e1b3e16119e5fb504081751985155</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-474 [ConsumerCanonicalProductLastOrderedDataQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;ConsumerCanonicalProductLastOrderedDataQuery&quot;,&quot;variables&quot;:{&quot;productIds&quot;:[&quot;46056522&quot;,&quot;46056525&quot;,&quot;46056543&quot;],&quot;locationId&quot;:&quot;103430762&quot;,&quot;vendorId&quot;:&quot;103430775&quot;},&quot;query&quot;:&quot;query ConsumerCanonicalProductLastOrderedDataQuery($productIds: [ID!]!, $locationId: ID!, $vendorId: ID!) {\n  canonicalProductsWithLastOrderTimeAndQuantity(\n    productIds: $productIds\n    locationId: $locationId\n    vendorId: $vendorId\n  ) {\n    id\n    lastOrderedData(locationId: $locationId, vendorId: $vendorId) {\n      unit\n      lastOrderData {\n        quantity\n        lastOrderedTime\n        uom\n        unit\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">ConsumerCanonicalProductLastOrderedDataQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query ConsumerCanonicalProductLastOrderedDataQuery($productIds: [ID!]!, $locationId: ID!, $vendorId: ID!) {
  canonicalProductsWithLastOrderTimeAndQuantity(
    productIds: $productIds
    locationId: $locationId
    vendorId: $vendorId
  ) {
    id
    lastOrderedData(locationId: $locationId, vendorId: $vendorId) {
      unit
      lastOrderData {
        quantity
        lastOrderedTime
        uom
        unit
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;productIds&quot;:[&quot;46056522&quot;,&quot;46056525&quot;,&quot;46056543&quot;],&quot;locationId&quot;:&quot;103430762&quot;,&quot;vendorId&quot;:&quot;103430775&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;page=1&amp;search=01700</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">bee82cb6f1ab1f258885291bd815f0b264ccffaf0b4d3fa2f19703cd659538ec1751985164</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-478 [GateKeeperQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GateKeeperQuery&quot;,&quot;variables&quot;:{&quot;features&quot;:[&quot;hide_calculated_secondary_pound_price_for_non_cw&quot;],&quot;companyId&quot;:null,&quot;verifiedVendorId&quot;:&quot;46017666&quot;},&quot;query&quot;:&quot;query GateKeeperQuery($features: [String]!, $companyId: ID, $verifiedVendorId: ID) {\n  gateKeeper(\n    features: $features\n    companyId: $companyId\n    verifiedVendorId: $verifiedVendorId\n  )\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GateKeeperQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GateKeeperQuery($features: [String]!, $companyId: ID, $verifiedVendorId: ID) {
  gateKeeper(
    features: $features
    companyId: $companyId
    verifiedVendorId: $verifiedVendorId
  )
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;features&quot;:[&quot;hide_calculated_secondary_pound_price_for_non_cw&quot;],&quot;companyId&quot;:null,&quot;verifiedVendorId&quot;:&quot;46017666&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;page=1&amp;search=01700</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">52ca699c8dc563b4a3695ed6dd6d91327175731923faadffb7156afcdabc4f661751985166</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">86491bbee02917f41c8864ed98871f4722ad2c3a</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">if (prev.isSuccessful()) {
    props.put(&quot;runThreadGroup2&quot;, &quot;true&quot;)
} else {
    props.put(&quot;runThreadGroup2&quot;, &quot;false&quot;)
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Load the Catalog" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-534 [CatalogFilterOptionsQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;CatalogFilterOptionsQuery&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;operatingVerifiedVendorId&quot;:&quot;46017666&quot;,&quot;searchTerm&quot;:null,&quot;fuzziness&quot;:&quot;AUTO&quot;,&quot;categoryId&quot;:&quot;1&quot;,&quot;subcategoryId&quot;:null,&quot;activeOnly&quot;:true,&quot;showHidden&quot;:false,&quot;applyUomWiseVisibilityFilter&quot;:false,&quot;locationId&quot;:&quot;103430762&quot;,&quot;applyPublicCatalogFilter&quot;:false,&quot;categoryName&quot;:null,&quot;subcategoryName&quot;:null},&quot;query&quot;:&quot;query CatalogFilterOptionsQuery($verifiedVendorId: ID!, $operatingVerifiedVendorId: ID, $locationId: ID, $categoryId: ID, $subcategoryId: ID, $activeOnly: Boolean, $showHidden: Boolean, $applyUomWiseVisibilityFilter: Boolean, $searchTerm: String, $fuzziness: String, $applyPublicCatalogFilter: Boolean, $categoryName: String, $subcategoryName: String) {\n  catalogFilterOptions(\n    verifiedVendorId: $verifiedVendorId\n    operatingVerifiedVendorId: $operatingVerifiedVendorId\n    locationId: $locationId\n    categoryId: $categoryId\n    subcategoryId: $subcategoryId\n    activeOnly: $activeOnly\n    showHidden: $showHidden\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    searchTerm: $searchTerm\n    fuzziness: $fuzziness\n    applyPublicCatalogFilter: $applyPublicCatalogFilter\n    categoryName: $categoryName\n    subcategoryName: $subcategoryName\n  ) {\n    manufacturers {\n      id\n      name\n      __typename\n    }\n    productBrands {\n      id\n      name\n      displayName\n      __typename\n    }\n    storageTypes\n    rewardTypes\n    tagFilters {\n      id\n      name\n      productdescriptiontags {\n        id\n        name\n        displayName\n        __typename\n      }\n      __typename\n    }\n    distributionCentres {\n      id\n      name\n      __typename\n    }\n    regions {\n      id\n      name\n      __typename\n    }\n    itemTypes\n    itemAvailabilities\n    itemDeals\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CatalogFilterOptionsQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CatalogFilterOptionsQuery($verifiedVendorId: ID!, $operatingVerifiedVendorId: ID, $locationId: ID, $categoryId: ID, $subcategoryId: ID, $activeOnly: Boolean, $showHidden: Boolean, $applyUomWiseVisibilityFilter: Boolean, $searchTerm: String, $fuzziness: String, $applyPublicCatalogFilter: Boolean, $categoryName: String, $subcategoryName: String) {
  catalogFilterOptions(
    verifiedVendorId: $verifiedVendorId
    operatingVerifiedVendorId: $operatingVerifiedVendorId
    locationId: $locationId
    categoryId: $categoryId
    subcategoryId: $subcategoryId
    activeOnly: $activeOnly
    showHidden: $showHidden
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    searchTerm: $searchTerm
    fuzziness: $fuzziness
    applyPublicCatalogFilter: $applyPublicCatalogFilter
    categoryName: $categoryName
    subcategoryName: $subcategoryName
  ) {
    manufacturers {
      id
      name
      __typename
    }
    productBrands {
      id
      name
      displayName
      __typename
    }
    storageTypes
    rewardTypes
    tagFilters {
      id
      name
      productdescriptiontags {
        id
        name
        displayName
        __typename
      }
      __typename
    }
    distributionCentres {
      id
      name
      __typename
    }
    regions {
      id
      name
      __typename
    }
    itemTypes
    itemAvailabilities
    itemDeals
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;operatingVerifiedVendorId&quot;:&quot;46017666&quot;,&quot;searchTerm&quot;:null,&quot;fuzziness&quot;:&quot;AUTO&quot;,&quot;categoryId&quot;:&quot;1&quot;,&quot;subcategoryId&quot;:null,&quot;activeOnly&quot;:true,&quot;showHidden&quot;:false,&quot;applyUomWiseVisibilityFilter&quot;:false,&quot;locationId&quot;:&quot;103430762&quot;,&quot;applyPublicCatalogFilter&quot;:false,&quot;categoryName&quot;:null,&quot;subcategoryName&quot;:null}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?catalog=true&amp;verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;categoryId=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">8902c355e102d61c3d8f0f282ea9b82e80e9def7ce10e8636cef069a7331ee711752080999</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-539 [ConsumerCanonicalProductsByCategoriesQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;ConsumerCanonicalProductsByCategoriesQuery&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;operatingVerifiedVendorId&quot;:&quot;46017666&quot;,&quot;categoryId&quot;:&quot;1&quot;,&quot;subcategoryId&quot;:null,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;,&quot;limit&quot;:0,&quot;offset&quot;:0,&quot;showHidden&quot;:false,&quot;applyUomWiseVisibilityFilter&quot;:true,&quot;productDescriptionTagFilters&quot;:[],&quot;manufacturerIds&quot;:[],&quot;productBrandIds&quot;:[],&quot;storageTypes&quot;:[],&quot;rewardTypes&quot;:[],&quot;sortBy&quot;:&quot;productName&quot;,&quot;sortDirection&quot;:&quot;asc&quot;,&quot;applyPublicCatalogFilter&quot;:false,&quot;showSpecialItems&quot;:false,&quot;distributionCentreIds&quot;:[],&quot;regionIds&quot;:[],&quot;itemTypes&quot;:[],&quot;itemAvailabilities&quot;:[],&quot;itemDeals&quot;:[],&quot;ignoreAdvertisedProducts&quot;:false,&quot;hideNewProducts&quot;:true,&quot;showInstacartAds&quot;:true,&quot;categoryName&quot;:null,&quot;subcategoryName&quot;:null,&quot;tagFilters&quot;:[]},&quot;query&quot;:&quot;query ConsumerCanonicalProductsByCategoriesQuery($verifiedVendorId: ID!, $operatingVerifiedVendorId: ID, $categoryId: ID, $subcategoryId: ID, $formId: ID, $locationId: ID, $activeOnly: Boolean, $showHidden: Boolean, $productBrandIds: [ID], $manufacturerIds: [ID], $storageTypes: [String], $rewardTypes: [String], $productDescriptionTagFilters: [productDescriptionTagFilter], $applyUomWiseVisibilityFilter: Boolean, $limit: Int, $offset: Int, $deliveryDate: String, $sortBy: String, $sortDirection: String, $applyPublicCatalogFilter: Boolean, $showSpecialItems: Boolean, $distributionCentreIds: [ID], $regionIds: [ID], $itemTypes: [String], $itemAvailabilities: [String], $itemDeals: [String], $ignoreAdvertisedProducts: Boolean, $hideNewProducts: Boolean, $showInstacartAds: Boolean, $categoryName: String, $subcategoryName: String, $tagFilters: [tagFilter]) {\n  catalogProductsRootQuery(\n    verifiedVendorId: $verifiedVendorId\n    operatingVerifiedVendorId: $operatingVerifiedVendorId\n    categoryId: $categoryId\n    subcategoryId: $subcategoryId\n    locationId: $locationId\n    activeOnly: $activeOnly\n    showHidden: $showHidden\n    productBrandIds: $productBrandIds\n    manufacturerIds: $manufacturerIds\n    storageTypes: $storageTypes\n    rewardTypes: $rewardTypes\n    productDescriptionTagFilters: $productDescriptionTagFilters\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    limit: $limit\n    offset: $offset\n    deliveryDate: $deliveryDate\n    sortBy: $sortBy\n    sortDirection: $sortDirection\n    applyPublicCatalogFilter: $applyPublicCatalogFilter\n    showSpecialItems: $showSpecialItems\n    distributionCentreIds: $distributionCentreIds\n    regionIds: $regionIds\n    itemTypes: $itemTypes\n    itemAvailabilities: $itemAvailabilities\n    itemDeals: $itemDeals\n    ignoreAdvertisedProducts: $ignoreAdvertisedProducts\n    hideNewProducts: $hideNewProducts\n    showInstacartAds: $showInstacartAds\n    categoryName: $categoryName\n    subcategoryName: $subcategoryName\n    tagFilters: $tagFilters\n  ) {\n    count\n    canonicalProducts {\n      ...ConsumerCanonicalProductFragment\n      ...InstacartAdCardConfigFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ConsumerCanonicalProductFragment on CanonicalProduct {\n  ...CanonicalProductForShopLargeListQuery\n  ...RebateConfigsFragment\n  productShopDataForStore {\n    id\n    productsubcategories {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    __typename\n  }\n  displayManufacturerProductDetails\n  productbrand {\n    id\n    displayName\n    __typename\n  }\n  earliestDeliveryDate(locationId: $locationId)\n  manufacturerproduct {\n    id\n    manufacturer {\n      id\n      name\n      websiteUrl\n      __typename\n    }\n    productbrand {\n      id\n      displayName\n      __typename\n    }\n    primaryImage {\n      id\n      url\n      is360\n      category\n      __typename\n    }\n    __typename\n  }\n  supplierOrderOnly(locationId: $locationId)\n  __typename\n}\n\nfragment CanonicalProductForShopLargeListQuery on CanonicalProduct {\n  ...CanonicalProductForLargeList\n  productShopDataForStore {\n    ...ProductShopDataForLargeList\n    __typename\n  }\n  __typename\n}\n\nfragment CanonicalProductForLargeList on CanonicalProduct {\n  id\n  isAddedToOG(formId: $formId, locationId: $locationId)\n  description\n  additionalDescriptions\n  tiHi\n  name\n  nameWithoutBrand\n  itemCode\n  normalizedItemCode\n  uoms\n  normalizedUoms\n  gtin\n  separateDirectShip\n  multiCartEnabled\n  shipDirect\n  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n  isProductInOrderGuide(locationId: $locationId)\n  currentStocks(locationId: $locationId) {\n    uom\n    value\n    __typename\n  }\n  quantityOnOrder {\n    uom\n    value\n    __typename\n  }\n  committedQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPOQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPODate {\n    uom\n    value\n    __typename\n  }\n  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n    uom\n    value\n    float\n    __typename\n  }\n  totalCost {\n    uom\n    value\n    float\n    __typename\n  }\n  distributioncentres {\n    id\n    name\n    code\n    textColor\n    backgroundColor\n    __typename\n  }\n  l0category {\n    id\n    name\n    __typename\n  }\n  l1category {\n    id\n    name\n    displayName\n    __typename\n  }\n  l2category {\n    id\n    name\n    __typename\n  }\n  l3category {\n    id\n    name\n    __typename\n  }\n  l4category {\n    id\n    name\n    __typename\n  }\n  manufacturer {\n    id\n    name\n    __typename\n  }\n  shopifyUOM\n  productNotes(locationId: $locationId)\n  consumerWeight\n  consumerWeightVisible\n  consumerWeightUOM\n  employeeOnly\n  consumerStockCount\n  consumerItemCount\n  consumerItemCountUOM\n  consumerSubcategory\n  displayManufacturerProductDetails\n  productcategory {\n    id\n    name\n    __typename\n  }\n  itemSize\n  itemSizeUOM\n  itemSizeValue\n  itemsPerPack\n  packSize\n  pack\n  packsPerCase\n  size\n  markedAsNew\n  unavailable\n  allowsItemLevelInstructions\n  discontinued(locationId: $locationId)\n  isCatchWeight\n  consumerPerWeightPrice {\n    float\n    money\n    __typename\n  }\n  markedUpPrice(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n  ) {\n    uom\n    price {\n      float\n      money\n      __typename\n    }\n    type\n    value\n    __typename\n  }\n  activeSubstitutions(locationId: $locationId) {\n    id\n    __typename\n  }\n  verifiedvendor {\n    id\n    name\n    logoURL\n    catalogPlaceholder\n    shipDirectSupplier\n    hideZeroPrice\n    catalogDefaultUnit\n    allowsOrderingDiscontinued\n    allowsRebates\n    whiteLabel\n    showStocksInPortal\n    showStocksInOp\n    showCostInPortal\n    showPriceWithAvg\n    uomWiseStocksEnabled\n    uomWiseCostEnabled\n    lowStockMargin\n    showOnlyCatchWeightPriceInOrderFlow\n    hideInventoryForJitAndSpecialOrderItems\n    disableOrderingZeroPricedItems\n    disableOrderingSpecialOrderItems\n    __typename\n  }\n  thumbnail {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  activeAdCard {\n    id\n    __typename\n  }\n  createdTimestamp\n  updated\n  activeDate\n  inactiveDate\n  preOrderable\n  deliveryDays\n  specialOrder\n  jitItem\n  DWOItem\n  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n  BEPRebatesEnabled\n  specialItem\n  packSizePerUom {\n    uom\n    packSize\n    __typename\n  }\n  isGPOForCustomer(locationId: $locationId)\n  buyersName\n  brokenCaseItem\n  __typename\n}\n\nfragment ProductShopDataForLargeList on ProductShopData {\n  id\n  active\n  hidden\n  consumerManualOrdering\n  sizeDescription\n  onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n  discountPercentage\n  consumerPrice(locationId: $locationId) {\n    float\n    money\n    __typename\n  }\n  shopifyName\n  storageType\n  productdescriptiontags {\n    id\n    name\n    visible\n    __typename\n  }\n  productimages {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  hidePrice\n  unitPrices(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    deliveryDate: $deliveryDate\n  ) {\n    unit\n    price {\n      float\n      money\n      cents\n      __typename\n    }\n    billedUnit\n    billedPrice {\n      float\n      money\n      cents\n      __typename\n    }\n    __typename\n  }\n  productsubcategories {\n    id\n    name\n    productcategory {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}\n\nfragment InstacartAdCardConfigFragment on CanonicalProduct {\n  instacartAdCardConfig {\n    objectTrackingId\n    productId\n    displayPosition\n    pageViewId\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">ConsumerCanonicalProductsByCategoriesQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query ConsumerCanonicalProductsByCategoriesQuery($verifiedVendorId: ID!, $operatingVerifiedVendorId: ID, $categoryId: ID, $subcategoryId: ID, $formId: ID, $locationId: ID, $activeOnly: Boolean, $showHidden: Boolean, $productBrandIds: [ID], $manufacturerIds: [ID], $storageTypes: [String], $rewardTypes: [String], $productDescriptionTagFilters: [productDescriptionTagFilter], $applyUomWiseVisibilityFilter: Boolean, $limit: Int, $offset: Int, $deliveryDate: String, $sortBy: String, $sortDirection: String, $applyPublicCatalogFilter: Boolean, $showSpecialItems: Boolean, $distributionCentreIds: [ID], $regionIds: [ID], $itemTypes: [String], $itemAvailabilities: [String], $itemDeals: [String], $ignoreAdvertisedProducts: Boolean, $hideNewProducts: Boolean, $showInstacartAds: Boolean, $categoryName: String, $subcategoryName: String, $tagFilters: [tagFilter]) {
  catalogProductsRootQuery(
    verifiedVendorId: $verifiedVendorId
    operatingVerifiedVendorId: $operatingVerifiedVendorId
    categoryId: $categoryId
    subcategoryId: $subcategoryId
    locationId: $locationId
    activeOnly: $activeOnly
    showHidden: $showHidden
    productBrandIds: $productBrandIds
    manufacturerIds: $manufacturerIds
    storageTypes: $storageTypes
    rewardTypes: $rewardTypes
    productDescriptionTagFilters: $productDescriptionTagFilters
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    limit: $limit
    offset: $offset
    deliveryDate: $deliveryDate
    sortBy: $sortBy
    sortDirection: $sortDirection
    applyPublicCatalogFilter: $applyPublicCatalogFilter
    showSpecialItems: $showSpecialItems
    distributionCentreIds: $distributionCentreIds
    regionIds: $regionIds
    itemTypes: $itemTypes
    itemAvailabilities: $itemAvailabilities
    itemDeals: $itemDeals
    ignoreAdvertisedProducts: $ignoreAdvertisedProducts
    hideNewProducts: $hideNewProducts
    showInstacartAds: $showInstacartAds
    categoryName: $categoryName
    subcategoryName: $subcategoryName
    tagFilters: $tagFilters
  ) {
    count
    canonicalProducts {
      ...ConsumerCanonicalProductFragment
      ...InstacartAdCardConfigFragment
      __typename
    }
    __typename
  }
}

fragment ConsumerCanonicalProductFragment on CanonicalProduct {
  ...CanonicalProductForShopLargeListQuery
  ...RebateConfigsFragment
  productShopDataForStore {
    id
    productsubcategories {
      id
      name
      sortIndex
      __typename
    }
    __typename
  }
  displayManufacturerProductDetails
  productbrand {
    id
    displayName
    __typename
  }
  earliestDeliveryDate(locationId: $locationId)
  manufacturerproduct {
    id
    manufacturer {
      id
      name
      websiteUrl
      __typename
    }
    productbrand {
      id
      displayName
      __typename
    }
    primaryImage {
      id
      url
      is360
      category
      __typename
    }
    __typename
  }
  supplierOrderOnly(locationId: $locationId)
  __typename
}

fragment CanonicalProductForShopLargeListQuery on CanonicalProduct {
  ...CanonicalProductForLargeList
  productShopDataForStore {
    ...ProductShopDataForLargeList
    __typename
  }
  __typename
}

fragment CanonicalProductForLargeList on CanonicalProduct {
  id
  isAddedToOG(formId: $formId, locationId: $locationId)
  description
  additionalDescriptions
  tiHi
  name
  nameWithoutBrand
  itemCode
  normalizedItemCode
  uoms
  normalizedUoms
  gtin
  separateDirectShip
  multiCartEnabled
  shipDirect
  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
  isProductInOrderGuide(locationId: $locationId)
  currentStocks(locationId: $locationId) {
    uom
    value
    __typename
  }
  quantityOnOrder {
    uom
    value
    __typename
  }
  committedQuantity {
    uom
    value
    __typename
  }
  nextPOQuantity {
    uom
    value
    __typename
  }
  nextPODate {
    uom
    value
    __typename
  }
  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
    uom
    value
    float
    __typename
  }
  totalCost {
    uom
    value
    float
    __typename
  }
  distributioncentres {
    id
    name
    code
    textColor
    backgroundColor
    __typename
  }
  l0category {
    id
    name
    __typename
  }
  l1category {
    id
    name
    displayName
    __typename
  }
  l2category {
    id
    name
    __typename
  }
  l3category {
    id
    name
    __typename
  }
  l4category {
    id
    name
    __typename
  }
  manufacturer {
    id
    name
    __typename
  }
  shopifyUOM
  productNotes(locationId: $locationId)
  consumerWeight
  consumerWeightVisible
  consumerWeightUOM
  employeeOnly
  consumerStockCount
  consumerItemCount
  consumerItemCountUOM
  consumerSubcategory
  displayManufacturerProductDetails
  productcategory {
    id
    name
    __typename
  }
  itemSize
  itemSizeUOM
  itemSizeValue
  itemsPerPack
  packSize
  pack
  packsPerCase
  size
  markedAsNew
  unavailable
  allowsItemLevelInstructions
  discontinued(locationId: $locationId)
  isCatchWeight
  consumerPerWeightPrice {
    float
    money
    __typename
  }
  markedUpPrice(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
  ) {
    uom
    price {
      float
      money
      __typename
    }
    type
    value
    __typename
  }
  activeSubstitutions(locationId: $locationId) {
    id
    __typename
  }
  verifiedvendor {
    id
    name
    logoURL
    catalogPlaceholder
    shipDirectSupplier
    hideZeroPrice
    catalogDefaultUnit
    allowsOrderingDiscontinued
    allowsRebates
    whiteLabel
    showStocksInPortal
    showStocksInOp
    showCostInPortal
    showPriceWithAvg
    uomWiseStocksEnabled
    uomWiseCostEnabled
    lowStockMargin
    showOnlyCatchWeightPriceInOrderFlow
    hideInventoryForJitAndSpecialOrderItems
    disableOrderingZeroPricedItems
    disableOrderingSpecialOrderItems
    __typename
  }
  thumbnail {
    id
    url
    is360
    category
    __typename
  }
  activeAdCard {
    id
    __typename
  }
  createdTimestamp
  updated
  activeDate
  inactiveDate
  preOrderable
  deliveryDays
  specialOrder
  jitItem
  DWOItem
  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
  BEPRebatesEnabled
  specialItem
  packSizePerUom {
    uom
    packSize
    __typename
  }
  isGPOForCustomer(locationId: $locationId)
  buyersName
  brokenCaseItem
  __typename
}

fragment ProductShopDataForLargeList on ProductShopData {
  id
  active
  hidden
  consumerManualOrdering
  sizeDescription
  onSale(locationId: $locationId, deliveryDate: $deliveryDate)
  discountPercentage
  consumerPrice(locationId: $locationId) {
    float
    money
    __typename
  }
  shopifyName
  storageType
  productdescriptiontags {
    id
    name
    visible
    __typename
  }
  productimages {
    id
    url
    is360
    category
    __typename
  }
  hidePrice
  unitPrices(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    deliveryDate: $deliveryDate
  ) {
    unit
    price {
      float
      money
      cents
      __typename
    }
    billedUnit
    billedPrice {
      float
      money
      cents
      __typename
    }
    __typename
  }
  productsubcategories {
    id
    name
    productcategory {
      id
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}

fragment InstacartAdCardConfigFragment on CanonicalProduct {
  instacartAdCardConfig {
    objectTrackingId
    productId
    displayPosition
    pageViewId
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;operatingVerifiedVendorId&quot;:&quot;46017666&quot;,&quot;categoryId&quot;:&quot;1&quot;,&quot;subcategoryId&quot;:null,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;,&quot;limit&quot;:0,&quot;offset&quot;:0,&quot;showHidden&quot;:false,&quot;applyUomWiseVisibilityFilter&quot;:true,&quot;productDescriptionTagFilters&quot;:[],&quot;manufacturerIds&quot;:[],&quot;productBrandIds&quot;:[],&quot;storageTypes&quot;:[],&quot;rewardTypes&quot;:[],&quot;sortBy&quot;:&quot;productName&quot;,&quot;sortDirection&quot;:&quot;asc&quot;,&quot;applyPublicCatalogFilter&quot;:false,&quot;showSpecialItems&quot;:false,&quot;distributionCentreIds&quot;:[],&quot;regionIds&quot;:[],&quot;itemTypes&quot;:[],&quot;itemAvailabilities&quot;:[],&quot;itemDeals&quot;:[],&quot;ignoreAdvertisedProducts&quot;:false,&quot;hideNewProducts&quot;:true,&quot;showInstacartAds&quot;:true,&quot;categoryName&quot;:null,&quot;subcategoryName&quot;:null,&quot;tagFilters&quot;:[]}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?catalog=true&amp;verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;categoryId=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">8902c355e102d61c3d8f0f282ea9b82e80e9def7ce10e8636cef069a7331ee711752080999</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-532 [specialConsumerCategories]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;specialConsumerCategories&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;operatingVerifiedVendorId&quot;:&quot;46017666&quot;,&quot;activeOnly&quot;:true,&quot;showHidden&quot;:false,&quot;locationId&quot;:&quot;103430762&quot;,&quot;applyUomWiseVisibilityFilter&quot;:false,&quot;applyPublicCatalogFilter&quot;:false,&quot;showSpecialItems&quot;:false,&quot;hideNewProducts&quot;:false},&quot;query&quot;:&quot;query specialConsumerCategories($verifiedVendorId: ID!, $operatingVerifiedVendorId: ID, $activeOnly: Boolean, $showHidden: Boolean, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $applyPublicCatalogFilter: Boolean, $showSpecialItems: Boolean, $categoryIdsToSkip: [ID], $hideNewProducts: Boolean) {\n  specialCategories(\n    verifiedVendorId: $verifiedVendorId\n    operatingVerifiedVendorId: $operatingVerifiedVendorId\n    activeOnly: $activeOnly\n    showHidden: $showHidden\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    applyPublicCatalogFilter: $applyPublicCatalogFilter\n    showSpecialItems: $showSpecialItems\n    categoryIdsToSkip: $categoryIdsToSkip\n    hideNewProducts: $hideNewProducts\n  ) {\n    id\n    name\n    count\n    mandatory\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">specialConsumerCategories</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query specialConsumerCategories($verifiedVendorId: ID!, $operatingVerifiedVendorId: ID, $activeOnly: Boolean, $showHidden: Boolean, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $applyPublicCatalogFilter: Boolean, $showSpecialItems: Boolean, $categoryIdsToSkip: [ID], $hideNewProducts: Boolean) {
  specialCategories(
    verifiedVendorId: $verifiedVendorId
    operatingVerifiedVendorId: $operatingVerifiedVendorId
    activeOnly: $activeOnly
    showHidden: $showHidden
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    applyPublicCatalogFilter: $applyPublicCatalogFilter
    showSpecialItems: $showSpecialItems
    categoryIdsToSkip: $categoryIdsToSkip
    hideNewProducts: $hideNewProducts
  ) {
    id
    name
    count
    mandatory
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;operatingVerifiedVendorId&quot;:&quot;46017666&quot;,&quot;activeOnly&quot;:true,&quot;showHidden&quot;:false,&quot;locationId&quot;:&quot;103430762&quot;,&quot;applyUomWiseVisibilityFilter&quot;:false,&quot;applyPublicCatalogFilter&quot;:false,&quot;showSpecialItems&quot;:false,&quot;hideNewProducts&quot;:false}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?catalog=true&amp;verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;categoryId=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">8902c355e102d61c3d8f0f282ea9b82e80e9def7ce10e8636cef069a7331ee711752080999</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-544 [AdBannerForSupplier]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;AdBannerForSupplier&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;adLocation&quot;:&quot;third_row&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;screenSize&quot;:&quot;xl&quot;},&quot;query&quot;:&quot;query AdBannerForSupplier($verifiedVendorId: ID!, $adLocation: String!, $locationId: ID, $screenSize: String) {\n  adBannerForSupplier(\n    verifiedVendorId: $verifiedVendorId\n    locationId: $locationId\n    adLocation: $adLocation\n  ) {\n    id\n    adLink\n    bannerImage(screenSize: $screenSize)\n    canonicalProduct(verifiedVendorId: $verifiedVendorId) {\n      id\n      __typename\n    }\n    manufacturer {\n      id\n      __typename\n    }\n    productbrand {\n      id\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">AdBannerForSupplier</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query AdBannerForSupplier($verifiedVendorId: ID!, $adLocation: String!, $locationId: ID, $screenSize: String) {
  adBannerForSupplier(
    verifiedVendorId: $verifiedVendorId
    locationId: $locationId
    adLocation: $adLocation
  ) {
    id
    adLink
    bannerImage(screenSize: $screenSize)
    canonicalProduct(verifiedVendorId: $verifiedVendorId) {
      id
      __typename
    }
    manufacturer {
      id
      __typename
    }
    productbrand {
      id
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;adLocation&quot;:&quot;third_row&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;screenSize&quot;:&quot;xl&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?catalog=true&amp;verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;categoryId=1&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">8902c355e102d61c3d8f0f282ea9b82e80e9def7ce10e8636cef069a7331ee711752080999</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-543 [SuggestiveSalesConfigQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SuggestiveSalesConfigQuery&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;CategoryTopPicks&quot;,&quot;configId&quot;:&quot;1&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;},&quot;query&quot;:&quot;query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {\n  suggestiveSalesConfig(\n    verifiedVendorId: $verifiedVendorId\n    configType: $configType\n    configId: $configId\n  ) {\n    id\n    name\n    suggestedItems(locationId: $locationId) {\n      ...ConsumerCanonicalProductFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ConsumerCanonicalProductFragment on CanonicalProduct {\n  ...CanonicalProductForShopLargeListQuery\n  ...RebateConfigsFragment\n  productShopDataForStore {\n    id\n    productsubcategories {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    __typename\n  }\n  displayManufacturerProductDetails\n  productbrand {\n    id\n    displayName\n    __typename\n  }\n  earliestDeliveryDate(locationId: $locationId)\n  manufacturerproduct {\n    id\n    manufacturer {\n      id\n      name\n      websiteUrl\n      __typename\n    }\n    productbrand {\n      id\n      displayName\n      __typename\n    }\n    primaryImage {\n      id\n      url\n      is360\n      category\n      __typename\n    }\n    __typename\n  }\n  supplierOrderOnly(locationId: $locationId)\n  __typename\n}\n\nfragment CanonicalProductForShopLargeListQuery on CanonicalProduct {\n  ...CanonicalProductForLargeList\n  productShopDataForStore {\n    ...ProductShopDataForLargeList\n    __typename\n  }\n  __typename\n}\n\nfragment CanonicalProductForLargeList on CanonicalProduct {\n  id\n  isAddedToOG(formId: $formId, locationId: $locationId)\n  description\n  additionalDescriptions\n  tiHi\n  name\n  nameWithoutBrand\n  itemCode\n  normalizedItemCode\n  uoms\n  normalizedUoms\n  gtin\n  separateDirectShip\n  multiCartEnabled\n  shipDirect\n  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n  isProductInOrderGuide(locationId: $locationId)\n  currentStocks(locationId: $locationId) {\n    uom\n    value\n    __typename\n  }\n  quantityOnOrder {\n    uom\n    value\n    __typename\n  }\n  committedQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPOQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPODate {\n    uom\n    value\n    __typename\n  }\n  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n    uom\n    value\n    float\n    __typename\n  }\n  totalCost {\n    uom\n    value\n    float\n    __typename\n  }\n  distributioncentres {\n    id\n    name\n    code\n    textColor\n    backgroundColor\n    __typename\n  }\n  l0category {\n    id\n    name\n    __typename\n  }\n  l1category {\n    id\n    name\n    displayName\n    __typename\n  }\n  l2category {\n    id\n    name\n    __typename\n  }\n  l3category {\n    id\n    name\n    __typename\n  }\n  l4category {\n    id\n    name\n    __typename\n  }\n  manufacturer {\n    id\n    name\n    __typename\n  }\n  shopifyUOM\n  productNotes(locationId: $locationId)\n  consumerWeight\n  consumerWeightVisible\n  consumerWeightUOM\n  employeeOnly\n  consumerStockCount\n  consumerItemCount\n  consumerItemCountUOM\n  consumerSubcategory\n  displayManufacturerProductDetails\n  productcategory {\n    id\n    name\n    __typename\n  }\n  itemSize\n  itemSizeUOM\n  itemSizeValue\n  itemsPerPack\n  packSize\n  pack\n  packsPerCase\n  size\n  markedAsNew\n  unavailable\n  allowsItemLevelInstructions\n  discontinued(locationId: $locationId)\n  isCatchWeight\n  consumerPerWeightPrice {\n    float\n    money\n    __typename\n  }\n  markedUpPrice(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n  ) {\n    uom\n    price {\n      float\n      money\n      __typename\n    }\n    type\n    value\n    __typename\n  }\n  activeSubstitutions(locationId: $locationId) {\n    id\n    __typename\n  }\n  verifiedvendor {\n    id\n    name\n    logoURL\n    catalogPlaceholder\n    shipDirectSupplier\n    hideZeroPrice\n    catalogDefaultUnit\n    allowsOrderingDiscontinued\n    allowsRebates\n    whiteLabel\n    showStocksInPortal\n    showStocksInOp\n    showCostInPortal\n    showPriceWithAvg\n    uomWiseStocksEnabled\n    uomWiseCostEnabled\n    lowStockMargin\n    showOnlyCatchWeightPriceInOrderFlow\n    hideInventoryForJitAndSpecialOrderItems\n    disableOrderingZeroPricedItems\n    disableOrderingSpecialOrderItems\n    __typename\n  }\n  thumbnail {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  activeAdCard {\n    id\n    __typename\n  }\n  createdTimestamp\n  updated\n  activeDate\n  inactiveDate\n  preOrderable\n  deliveryDays\n  specialOrder\n  jitItem\n  DWOItem\n  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n  BEPRebatesEnabled\n  specialItem\n  packSizePerUom {\n    uom\n    packSize\n    __typename\n  }\n  isGPOForCustomer(locationId: $locationId)\n  buyersName\n  brokenCaseItem\n  __typename\n}\n\nfragment ProductShopDataForLargeList on ProductShopData {\n  id\n  active\n  hidden\n  consumerManualOrdering\n  sizeDescription\n  onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n  discountPercentage\n  consumerPrice(locationId: $locationId) {\n    float\n    money\n    __typename\n  }\n  shopifyName\n  storageType\n  productdescriptiontags {\n    id\n    name\n    visible\n    __typename\n  }\n  productimages {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  hidePrice\n  unitPrices(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    deliveryDate: $deliveryDate\n  ) {\n    unit\n    price {\n      float\n      money\n      cents\n      __typename\n    }\n    billedUnit\n    billedPrice {\n      float\n      money\n      cents\n      __typename\n    }\n    __typename\n  }\n  productsubcategories {\n    id\n    name\n    productcategory {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SuggestiveSalesConfigQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {
  suggestiveSalesConfig(
    verifiedVendorId: $verifiedVendorId
    configType: $configType
    configId: $configId
  ) {
    id
    name
    suggestedItems(locationId: $locationId) {
      ...ConsumerCanonicalProductFragment
      __typename
    }
    __typename
  }
}

fragment ConsumerCanonicalProductFragment on CanonicalProduct {
  ...CanonicalProductForShopLargeListQuery
  ...RebateConfigsFragment
  productShopDataForStore {
    id
    productsubcategories {
      id
      name
      sortIndex
      __typename
    }
    __typename
  }
  displayManufacturerProductDetails
  productbrand {
    id
    displayName
    __typename
  }
  earliestDeliveryDate(locationId: $locationId)
  manufacturerproduct {
    id
    manufacturer {
      id
      name
      websiteUrl
      __typename
    }
    productbrand {
      id
      displayName
      __typename
    }
    primaryImage {
      id
      url
      is360
      category
      __typename
    }
    __typename
  }
  supplierOrderOnly(locationId: $locationId)
  __typename
}

fragment CanonicalProductForShopLargeListQuery on CanonicalProduct {
  ...CanonicalProductForLargeList
  productShopDataForStore {
    ...ProductShopDataForLargeList
    __typename
  }
  __typename
}

fragment CanonicalProductForLargeList on CanonicalProduct {
  id
  isAddedToOG(formId: $formId, locationId: $locationId)
  description
  additionalDescriptions
  tiHi
  name
  nameWithoutBrand
  itemCode
  normalizedItemCode
  uoms
  normalizedUoms
  gtin
  separateDirectShip
  multiCartEnabled
  shipDirect
  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
  isProductInOrderGuide(locationId: $locationId)
  currentStocks(locationId: $locationId) {
    uom
    value
    __typename
  }
  quantityOnOrder {
    uom
    value
    __typename
  }
  committedQuantity {
    uom
    value
    __typename
  }
  nextPOQuantity {
    uom
    value
    __typename
  }
  nextPODate {
    uom
    value
    __typename
  }
  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
    uom
    value
    float
    __typename
  }
  totalCost {
    uom
    value
    float
    __typename
  }
  distributioncentres {
    id
    name
    code
    textColor
    backgroundColor
    __typename
  }
  l0category {
    id
    name
    __typename
  }
  l1category {
    id
    name
    displayName
    __typename
  }
  l2category {
    id
    name
    __typename
  }
  l3category {
    id
    name
    __typename
  }
  l4category {
    id
    name
    __typename
  }
  manufacturer {
    id
    name
    __typename
  }
  shopifyUOM
  productNotes(locationId: $locationId)
  consumerWeight
  consumerWeightVisible
  consumerWeightUOM
  employeeOnly
  consumerStockCount
  consumerItemCount
  consumerItemCountUOM
  consumerSubcategory
  displayManufacturerProductDetails
  productcategory {
    id
    name
    __typename
  }
  itemSize
  itemSizeUOM
  itemSizeValue
  itemsPerPack
  packSize
  pack
  packsPerCase
  size
  markedAsNew
  unavailable
  allowsItemLevelInstructions
  discontinued(locationId: $locationId)
  isCatchWeight
  consumerPerWeightPrice {
    float
    money
    __typename
  }
  markedUpPrice(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
  ) {
    uom
    price {
      float
      money
      __typename
    }
    type
    value
    __typename
  }
  activeSubstitutions(locationId: $locationId) {
    id
    __typename
  }
  verifiedvendor {
    id
    name
    logoURL
    catalogPlaceholder
    shipDirectSupplier
    hideZeroPrice
    catalogDefaultUnit
    allowsOrderingDiscontinued
    allowsRebates
    whiteLabel
    showStocksInPortal
    showStocksInOp
    showCostInPortal
    showPriceWithAvg
    uomWiseStocksEnabled
    uomWiseCostEnabled
    lowStockMargin
    showOnlyCatchWeightPriceInOrderFlow
    hideInventoryForJitAndSpecialOrderItems
    disableOrderingZeroPricedItems
    disableOrderingSpecialOrderItems
    __typename
  }
  thumbnail {
    id
    url
    is360
    category
    __typename
  }
  activeAdCard {
    id
    __typename
  }
  createdTimestamp
  updated
  activeDate
  inactiveDate
  preOrderable
  deliveryDays
  specialOrder
  jitItem
  DWOItem
  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
  BEPRebatesEnabled
  specialItem
  packSizePerUom {
    uom
    packSize
    __typename
  }
  isGPOForCustomer(locationId: $locationId)
  buyersName
  brokenCaseItem
  __typename
}

fragment ProductShopDataForLargeList on ProductShopData {
  id
  active
  hidden
  consumerManualOrdering
  sizeDescription
  onSale(locationId: $locationId, deliveryDate: $deliveryDate)
  discountPercentage
  consumerPrice(locationId: $locationId) {
    float
    money
    __typename
  }
  shopifyName
  storageType
  productdescriptiontags {
    id
    name
    visible
    __typename
  }
  productimages {
    id
    url
    is360
    category
    __typename
  }
  hidePrice
  unitPrices(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    deliveryDate: $deliveryDate
  ) {
    unit
    price {
      float
      money
      cents
      __typename
    }
    billedUnit
    billedPrice {
      float
      money
      cents
      __typename
    }
    __typename
  }
  productsubcategories {
    id
    name
    productcategory {
      id
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;CategoryTopPicks&quot;,&quot;configId&quot;:&quot;1&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?catalog=true&amp;verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;categoryId=1&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">8902c355e102d61c3d8f0f282ea9b82e80e9def7ce10e8636cef069a7331ee711752080999</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-542 [formForOrder]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;formForOrder&quot;,&quot;variables&quot;:{&quot;isStandingOrderFlow&quot;:false,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;sortView&quot;:&quot;custom_view&quot;,&quot;offset&quot;:0,&quot;limit&quot;:15,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;,&quot;useElasticSearch&quot;:true,&quot;sectionId&quot;:null,&quot;sectionCategoryId&quot;:null},&quot;query&quot;:&quot;query formForOrder($formId: ID!, $locationId: ID!, $showHiddenItems: Boolean, $skipLocationPrivacy: Boolean, $deliveryDate: String, $offset: Int, $limit: Int, $useElasticSearch: Boolean, $sectionId: ID, $sectionCategoryId: ID, $sortView: String, $searchString: String, $isStandingOrderFlow: Boolean = false) {\n  form(id: $formId) {\n    ...OrderGuidePageForm\n    sectionsWithCount(\n      location_id: $locationId\n      showHiddenItems: $showHiddenItems\n      skipLocationPrivacy: $skipLocationPrivacy\n      useElasticSearch: $useElasticSearch\n      sectionId: $sectionId\n      sectionCategoryId: $sectionCategoryId\n      sortView: $sortView\n      offset: $offset\n      limit: $limit\n      searchString: $searchString\n    ) {\n      sections {\n        ...FormSectionFragment\n        __typename\n      }\n      fullCount\n      __typename\n    }\n    offset\n    approvalRequired\n    isApprover(locationId: $locationId)\n    continuableDraft(locationId: $locationId) {\n      id\n      date\n      itemCount\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment OrderGuidePageForm on Form {\n  id\n  name\n  allowsInstructions\n  maxInstructionChars\n  deliveryFee\n  isFromIntegration\n  isEditable\n  shouldDisableOrderingOutOfStockProducts(locationId: $locationId)\n  lastUpdatedTimestamp\n  allowsAddingItems(locationId: $locationId)\n  isCatalogDisabledOnlyForOperator\n  alwaysAddFromCatalog\n  isCutDryDirect\n  shipDirectEnabled\n  cutOffDayOffset(locationId: $locationId)\n  substitutionViewType\n  isFetchStockCountsFromIntegrator\n  multiCartAvailableDeliveryDays(locationId: $locationId) {\n    cartCode\n    deliveryDates {\n      date\n      cutoffTimestamp\n      softCutoffTimestamp\n      isVisibleToOperator\n      __typename\n    }\n    __typename\n  }\n  availableDeliveryDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    softCutoffTimestamp\n    isVisibleToOperator\n    __typename\n  }\n  customerHolidays(locationId: $locationId)\n  allowsPickup(locationId: $locationId)\n  allowedFulfilmentTypes(locationId: $locationId)\n  allowsMailDelivery\n  allowsDelivery\n  availablePickupDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    pickupTimes {\n      time\n      cutoffTimestamp\n      __typename\n    }\n    __typename\n  }\n  availableDispatchDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    __typename\n  }\n  availableWeekdays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    __typename\n  }\n  hasContactMethod(locationId: $locationId)\n  hasShopExperience(locationId: $locationId)\n  orderingDays\n  company {\n    id\n    name\n    whiteLabel\n    hasActivePaymentMethods\n    members @include(if: $isStandingOrderFlow) {\n      id\n      email\n      name\n      __typename\n    }\n    __typename\n  }\n  cutoffTimeString\n  lastOrderedProductIds(location_id: $locationId)\n  info\n  locations(filterByID: $locationId) {\n    id\n    name\n    nameWithCompany\n    address\n    streetAddress2\n    city\n    state\n    zip\n    locationshiptoaddresses {\n      id\n      asString\n      __typename\n    }\n    __typename\n  }\n  vendor {\n    id\n    name\n    isCutDryDirect\n    catalogDisabled\n    createOGDisabled\n    payEnabled\n    activeLocations {\n      id\n      name\n      __typename\n    }\n    salespeople {\n      id\n      name\n      allLocations\n      locations {\n        id\n        __typename\n      }\n      __typename\n    }\n    hideSubstitutions\n    verifiedvendor {\n      id\n      name\n      operatorPortalName\n      dateTerm\n      allowsPickup\n      allowsPickupSupplierPortalOnly\n      manufacturerRebatesEnabled\n      defaultFilters {\n        queryStringKey\n        filterOptions\n        __typename\n      }\n      isQBIntegrated\n      isScraperIntegrated\n      isInstantScraperEnabled\n      catalogViewType\n      nestedCategoryEnabled\n      filtersEnabled\n      logoURL\n      allowsOrderingDiscontinued\n      autoCategorizeEnabled\n      catalogLandingPageActive\n      thumbnail\n      catalogHomePageEnabled\n      whiteLabel\n      hardHoldMessage\n      popularCategories {\n        id\n        name\n        __typename\n      }\n      showDeliveryDateInOg\n      showOnlyCatchWeightPriceInOrderFlow\n      showProductSizeDescriptionInSubs\n      showHeroImage\n      showFeaturedItems\n      showOnSaleItems\n      showHeroImage\n      showSmallerImages\n      showFeaturedItems\n      showOnSaleItems\n      catalogHeroImage\n      catalogSmallerImage1\n      catalogSmallerImage2\n      catalogMobileHeroImage\n      catalogHeroImageUrl\n      catalogSmallerImage1Url\n      catalogSmallerImage2Url\n      showStocksInPortal\n      showPriceWithAvg\n      showStocksInOp\n      showCostInPortal\n      uomWiseStocksEnabled\n      uomWiseCostEnabled\n      showMarginInPortal\n      spotPricingEnabled\n      cartSummaryVolumeEnabled\n      cartSummaryWeightEnabled\n      sendSpotPriceUpdatesEnabled\n      lowStockMargin\n      fetchOGPricesFromPricingServiceEnabled\n      dateBasedPricingEnabled\n      showDeliveryDateBasedJitCutoffs\n      bepRebatesActive\n      allowsRebates\n      showPayBannerOnOrderConfirmation\n      catalogSortIndex\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      supplierportalvendordata {\n        id\n        portalOverridesOrderMins\n        splitWeightsActive\n        sameDayDeliveryOffsetSeconds\n        showLocationWisePricesForSubstitutes\n        showSubstitutionsModalInPortal\n        showItemLevelInstructionsInPortal\n        showItemLevelInstructionsInOperator\n        itemLevelInstructionLimit\n        multipleShipTosEnabled\n        chunkCountWaitLimit\n        ogPageSize\n        ogFirstPageSize\n        defaultViewAsCustomer\n        disableItemDeletesAndSubtractsForOrderEdits\n        disableItemDeletesAndSubtractsForOrderEditsInPortal\n        pickupTimeSelectEnabled\n        showMemoCodeInOperatorPortal\n        showMemoCodeInSupplierPortal\n        multiCartEnabled\n        avoidDefaultCaseStyling\n        catalogInfoOnlyViewIfOnOG\n        catalogInfoOnlyViewMessage\n        totalCostMarginEnabled\n        showOrderSummary\n        disableDeliveryDateChangeForOrderEditsInOp\n        disableDeliveryDateChangeForOrderEditsInPortal\n        disableDeliveryDateChangeWarningMessage\n        showLastOrderedPrice\n        showLastOrderedPriceInPortal\n        useTotalCostForMarginValidation\n        showUnitPriceAsMainPriceInCatalog\n        showCalculatedSecondaryPriceInCatalog\n        persistsItemLevelInstructions\n        hideZeroStockLabelInOP\n        hideOutOfStockLabelInSP\n        showUnavailableInsteadOfOutOfStock\n        poundSpotPricingEnabled\n        disableOrderingOutOfStockProductsWithoutSubstitutes\n        checkForZeroPricedItems\n        showLastOrderedPoundPrice\n        preserveCartItemOrder\n        validateMarginInPortal\n        disableEditingPoundQuantity\n        blockPartialQuantityOrdering\n        blockPartialQuantityOrderingInOperatorPortal\n        accountHoldAlertsEnabled\n        hideCatchWeightUnitPriceInCatalog\n        showDistributionCentreLabels\n        offlineOrderingEnabled\n        catalogOnlyOrderFlowEnabled\n        dateBasedPricingBannerDisabled\n        showPurchaseHistory\n        quickAddViewEnabledStatus\n        simpleListViewEnabledStatus\n        enabledLargeProductTiles\n        enabledAdditionalDescriptions\n        enabledTiHiPalletDetails\n        __typename\n      }\n      restrictPriceChangesBelowMinimumPriceEnabled\n      splitSpecialOrders\n      sortOGByItemCode\n      showCaseDiscountsDisclaimerMessage\n      disableOrderingZeroPricedItems\n      disableOrderingSpecialOrderItems\n      __typename\n    }\n    shipdirectverifiedvendor {\n      id\n      shippingFeeWaived\n      shippingFeeWaivedUntil\n      firstOrderDiscounted\n      firstOrderDiscount\n      firstOrderDiscountMaxCap\n      thumbnail\n      shipDirectLandingPageActive\n      catalogHeroImage\n      catalogMobileHeroImage\n      __typename\n    }\n    integrationDataForLocation(locationId: $locationId) {\n      id\n      customerNumber\n      taxRate\n      isAccountOnHold\n      deliveryDaysNote\n      accountHoldCode\n      isPONumberRequired\n      updatePoNumberWithOgName(isStandingOrderFlow: $isStandingOrderFlow)\n      __typename\n    }\n    orderingStatus\n    __typename\n  }\n  userData {\n    id\n    collapsedsections {\n      id\n      __typename\n    }\n    __typename\n  }\n  accountingcategory {\n    id\n    __typename\n  }\n  productSamples(locationId: $locationId) {\n    ...ProductSampleForOrderFragment\n    __typename\n  }\n  shipDirectEnabled\n  shipdirectvendors {\n    id\n    verifiedvendor {\n      id\n      __typename\n    }\n    __typename\n  }\n  isMergeOrdersOk\n  __typename\n}\n\nfragment ProductSampleForOrderFragment on ManufacturerProductSample {\n  id\n  unit\n  priceAmount {\n    money\n    float\n    __typename\n  }\n  canonicalproduct {\n    id\n    description\n    itemCode\n    normalizedItemCode\n    multiCartEnabled\n    shipDirect\n    thumbnail {\n      id\n      url\n      is360\n      __typename\n    }\n    distributioncentres {\n      id\n      code\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FormSectionFragment on FormSection {\n  id\n  stringID\n  title\n  placeholder\n  updated\n  multiUnitProducts(\n    showHiddenItems: $showHiddenItems\n    skipLocationPrivacy: $skipLocationPrivacy\n    offset: $offset\n    limit: $limit\n    useElasticSearch: $useElasticSearch\n  ) {\n    ...MultiUnitProductForOrderFragment\n    __typename\n  }\n  __typename\n}\n\nfragment MultiUnitProductForOrderFragment on MultiUnitProduct {\n  id\n  multiUnitGroupingId\n  itemCode\n  name\n  updated\n  taxable\n  sectionItemSequence\n  products {\n    id\n    name\n    archived(locationId: $locationId)\n    itemCode\n    shipDirect\n    instructionText\n    price(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      cents\n      __typename\n    }\n    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)\n    rebateAmount {\n      money\n      cents\n      __typename\n    }\n    productNotes(locationId: $locationId)\n    precut\n    prioritizePoundPriceInOG(locationId: $locationId)\n    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)\n    unit\n    abbreviatedUnit\n    par\n    lastOrderedLabel(locationId: $locationId)\n    lastOrderTimeAndQuantity(locationId: $locationId) {\n      quantity\n      lastOrderedTime\n      uom\n      daysAgo\n      price\n      poundPrice\n      __typename\n    }\n    showDiscontinued\n    isOutOfStock\n    isUnavailable\n    canonicalproduct {\n      id\n      itemCode\n      normalizedItemCode\n      description\n      pack\n      consumerCategory\n      discontinued(locationId: $locationId)\n      quickbooksRefID\n      syncedWithQB\n      shipDirect\n      specialOrder\n      jitItem\n      DWOItem\n      brandName\n      unavailable\n      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n      productNotes(locationId: $locationId)\n      displayManufacturerProductDetails\n      gtin\n      nameWithoutBrand\n      normalizedUoms\n      supplierOrderOnly(locationId: $locationId)\n      onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n      separateDirectShip\n      isCatchWeight\n      netWeight\n      volume\n      isGPOForCustomer(locationId: $locationId)\n      brokenCaseItem\n      currentStocks(locationId: $locationId) {\n        uom\n        value\n        __typename\n      }\n      quantityOnOrder {\n        uom\n        value\n        __typename\n      }\n      committedQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPOQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPODate {\n        uom\n        value\n        __typename\n      }\n      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        value\n        float\n        __typename\n      }\n      totalCost {\n        uom\n        value\n        float\n        __typename\n      }\n      salesMargin {\n        uom\n        value\n        float\n        __typename\n      }\n      markedAsNew\n      BEPRebatesEnabled\n      ...RebateConfigsFragment\n      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n      specialItem\n      forceShowSubstitutes(locationId: $locationId)\n      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        type\n        value\n        __typename\n      }\n      multiCartEnabled\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      l0category {\n        id\n        name\n        __typename\n      }\n      l1category {\n        id\n        name\n        __typename\n      }\n      l2category {\n        id\n        name\n        __typename\n      }\n      l3category {\n        id\n        name\n        __typename\n      }\n      l4category {\n        id\n        name\n        __typename\n      }\n      packSize\n      thumbnail {\n        id\n        url\n        is360\n        category\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      primaryImage {\n        id\n        url\n        __typename\n      }\n      productShopDataForStore {\n        id\n        sizeDescription\n        onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n        shopifyName\n        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n          unit\n          billedUnit\n          billedPrice {\n            float\n            money\n            __typename\n          }\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        productsubcategories {\n          id\n          name\n          productcategory {\n            id\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      allowsItemLevelInstructions\n      activeSubstitutions(locationId: $locationId) {\n        id\n        itemCode\n        normalizedItemCode\n        shopifyName\n        description\n        normalizedUoms\n        pack\n        activeAdCard {\n          id\n          __typename\n        }\n        manufacturer {\n          id\n          name\n          __typename\n        }\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        unitPriceEstimates {\n          unit\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        thumbnail {\n          id\n          url\n          __typename\n        }\n        primaryImage {\n          id\n          url\n          __typename\n        }\n        productShopDataForStore {\n          id\n          sizeDescription\n          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n            unit\n            price {\n              float\n              money\n              __typename\n            }\n            billedUnit\n            billedPrice {\n              float\n              money\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      verifiedvendor {\n        id\n        name\n        allowsRebates\n        supplierportalvendordata {\n          id\n          showCalculatedSecondaryPriceInCatalog\n          __typename\n        }\n        whiteLabel\n        showStocksInPortal\n        showStocksInOp\n        showCostInPortal\n        uomWiseStocksEnabled\n        uomWiseCostEnabled\n        showMarginInPortal\n        lowStockMargin\n        maxSalesMargin\n        minSalesMargin\n        spotPricingEnabled\n        poundSpotPricingEnabled\n        sendSpotPriceUpdatesEnabled\n        restrictPriceChangesBelowMinimumPriceEnabled\n        showOnlyCatchWeightPriceInOrderFlow\n        hideInventoryForJitAndSpecialOrderItems\n        showPriceWithAvg\n        hideZeroPrice\n        catalogDefaultUnit\n        __typename\n      }\n      manufacturerproduct {\n        id\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      productbrand {\n        id\n        displayName\n        __typename\n      }\n      searchKeywords\n      ...CanonicalProductDimensionsFragment\n      packSizePerUom {\n        uom\n        packSize\n        __typename\n      }\n      buyersName\n      __typename\n    }\n    doNotSub\n    defaultsubstitution {\n      id\n      __typename\n    }\n    eligibleForSwitchCashback\n    locations {\n      id\n      __typename\n    }\n    __typename\n  }\n  defaultUnit\n  __typename\n}\n\nfragment CanonicalProductDimensionsFragment on CanonicalProduct {\n  gtin\n  itemsPerPack\n  packsPerCase\n  totalItems\n  itemSizeType\n  itemSizeValue\n  itemSizeUOM\n  dimensionDetail\n  dimensionNotes\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">formForOrder</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query formForOrder($formId: ID!, $locationId: ID!, $showHiddenItems: Boolean, $skipLocationPrivacy: Boolean, $deliveryDate: String, $offset: Int, $limit: Int, $useElasticSearch: Boolean, $sectionId: ID, $sectionCategoryId: ID, $sortView: String, $searchString: String, $isStandingOrderFlow: Boolean = false) {
  form(id: $formId) {
    ...OrderGuidePageForm
    sectionsWithCount(
      location_id: $locationId
      showHiddenItems: $showHiddenItems
      skipLocationPrivacy: $skipLocationPrivacy
      useElasticSearch: $useElasticSearch
      sectionId: $sectionId
      sectionCategoryId: $sectionCategoryId
      sortView: $sortView
      offset: $offset
      limit: $limit
      searchString: $searchString
    ) {
      sections {
        ...FormSectionFragment
        __typename
      }
      fullCount
      __typename
    }
    offset
    approvalRequired
    isApprover(locationId: $locationId)
    continuableDraft(locationId: $locationId) {
      id
      date
      itemCount
      __typename
    }
    __typename
  }
}

fragment OrderGuidePageForm on Form {
  id
  name
  allowsInstructions
  maxInstructionChars
  deliveryFee
  isFromIntegration
  isEditable
  shouldDisableOrderingOutOfStockProducts(locationId: $locationId)
  lastUpdatedTimestamp
  allowsAddingItems(locationId: $locationId)
  isCatalogDisabledOnlyForOperator
  alwaysAddFromCatalog
  isCutDryDirect
  shipDirectEnabled
  cutOffDayOffset(locationId: $locationId)
  substitutionViewType
  isFetchStockCountsFromIntegrator
  multiCartAvailableDeliveryDays(locationId: $locationId) {
    cartCode
    deliveryDates {
      date
      cutoffTimestamp
      softCutoffTimestamp
      isVisibleToOperator
      __typename
    }
    __typename
  }
  availableDeliveryDays(locationId: $locationId) {
    date
    cutoffTimestamp
    softCutoffTimestamp
    isVisibleToOperator
    __typename
  }
  customerHolidays(locationId: $locationId)
  allowsPickup(locationId: $locationId)
  allowedFulfilmentTypes(locationId: $locationId)
  allowsMailDelivery
  allowsDelivery
  availablePickupDays(locationId: $locationId) {
    date
    cutoffTimestamp
    pickupTimes {
      time
      cutoffTimestamp
      __typename
    }
    __typename
  }
  availableDispatchDays(locationId: $locationId) {
    date
    cutoffTimestamp
    __typename
  }
  availableWeekdays(locationId: $locationId) {
    date
    cutoffTimestamp
    __typename
  }
  hasContactMethod(locationId: $locationId)
  hasShopExperience(locationId: $locationId)
  orderingDays
  company {
    id
    name
    whiteLabel
    hasActivePaymentMethods
    members @include(if: $isStandingOrderFlow) {
      id
      email
      name
      __typename
    }
    __typename
  }
  cutoffTimeString
  lastOrderedProductIds(location_id: $locationId)
  info
  locations(filterByID: $locationId) {
    id
    name
    nameWithCompany
    address
    streetAddress2
    city
    state
    zip
    locationshiptoaddresses {
      id
      asString
      __typename
    }
    __typename
  }
  vendor {
    id
    name
    isCutDryDirect
    catalogDisabled
    createOGDisabled
    payEnabled
    activeLocations {
      id
      name
      __typename
    }
    salespeople {
      id
      name
      allLocations
      locations {
        id
        __typename
      }
      __typename
    }
    hideSubstitutions
    verifiedvendor {
      id
      name
      operatorPortalName
      dateTerm
      allowsPickup
      allowsPickupSupplierPortalOnly
      manufacturerRebatesEnabled
      defaultFilters {
        queryStringKey
        filterOptions
        __typename
      }
      isQBIntegrated
      isScraperIntegrated
      isInstantScraperEnabled
      catalogViewType
      nestedCategoryEnabled
      filtersEnabled
      logoURL
      allowsOrderingDiscontinued
      autoCategorizeEnabled
      catalogLandingPageActive
      thumbnail
      catalogHomePageEnabled
      whiteLabel
      hardHoldMessage
      popularCategories {
        id
        name
        __typename
      }
      showDeliveryDateInOg
      showOnlyCatchWeightPriceInOrderFlow
      showProductSizeDescriptionInSubs
      showHeroImage
      showFeaturedItems
      showOnSaleItems
      showHeroImage
      showSmallerImages
      showFeaturedItems
      showOnSaleItems
      catalogHeroImage
      catalogSmallerImage1
      catalogSmallerImage2
      catalogMobileHeroImage
      catalogHeroImageUrl
      catalogSmallerImage1Url
      catalogSmallerImage2Url
      showStocksInPortal
      showPriceWithAvg
      showStocksInOp
      showCostInPortal
      uomWiseStocksEnabled
      uomWiseCostEnabled
      showMarginInPortal
      spotPricingEnabled
      cartSummaryVolumeEnabled
      cartSummaryWeightEnabled
      sendSpotPriceUpdatesEnabled
      lowStockMargin
      fetchOGPricesFromPricingServiceEnabled
      dateBasedPricingEnabled
      showDeliveryDateBasedJitCutoffs
      bepRebatesActive
      allowsRebates
      showPayBannerOnOrderConfirmation
      catalogSortIndex
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      supplierportalvendordata {
        id
        portalOverridesOrderMins
        splitWeightsActive
        sameDayDeliveryOffsetSeconds
        showLocationWisePricesForSubstitutes
        showSubstitutionsModalInPortal
        showItemLevelInstructionsInPortal
        showItemLevelInstructionsInOperator
        itemLevelInstructionLimit
        multipleShipTosEnabled
        chunkCountWaitLimit
        ogPageSize
        ogFirstPageSize
        defaultViewAsCustomer
        disableItemDeletesAndSubtractsForOrderEdits
        disableItemDeletesAndSubtractsForOrderEditsInPortal
        pickupTimeSelectEnabled
        showMemoCodeInOperatorPortal
        showMemoCodeInSupplierPortal
        multiCartEnabled
        avoidDefaultCaseStyling
        catalogInfoOnlyViewIfOnOG
        catalogInfoOnlyViewMessage
        totalCostMarginEnabled
        showOrderSummary
        disableDeliveryDateChangeForOrderEditsInOp
        disableDeliveryDateChangeForOrderEditsInPortal
        disableDeliveryDateChangeWarningMessage
        showLastOrderedPrice
        showLastOrderedPriceInPortal
        useTotalCostForMarginValidation
        showUnitPriceAsMainPriceInCatalog
        showCalculatedSecondaryPriceInCatalog
        persistsItemLevelInstructions
        hideZeroStockLabelInOP
        hideOutOfStockLabelInSP
        showUnavailableInsteadOfOutOfStock
        poundSpotPricingEnabled
        disableOrderingOutOfStockProductsWithoutSubstitutes
        checkForZeroPricedItems
        showLastOrderedPoundPrice
        preserveCartItemOrder
        validateMarginInPortal
        disableEditingPoundQuantity
        blockPartialQuantityOrdering
        blockPartialQuantityOrderingInOperatorPortal
        accountHoldAlertsEnabled
        hideCatchWeightUnitPriceInCatalog
        showDistributionCentreLabels
        offlineOrderingEnabled
        catalogOnlyOrderFlowEnabled
        dateBasedPricingBannerDisabled
        showPurchaseHistory
        quickAddViewEnabledStatus
        simpleListViewEnabledStatus
        enabledLargeProductTiles
        enabledAdditionalDescriptions
        enabledTiHiPalletDetails
        __typename
      }
      restrictPriceChangesBelowMinimumPriceEnabled
      splitSpecialOrders
      sortOGByItemCode
      showCaseDiscountsDisclaimerMessage
      disableOrderingZeroPricedItems
      disableOrderingSpecialOrderItems
      __typename
    }
    shipdirectverifiedvendor {
      id
      shippingFeeWaived
      shippingFeeWaivedUntil
      firstOrderDiscounted
      firstOrderDiscount
      firstOrderDiscountMaxCap
      thumbnail
      shipDirectLandingPageActive
      catalogHeroImage
      catalogMobileHeroImage
      __typename
    }
    integrationDataForLocation(locationId: $locationId) {
      id
      customerNumber
      taxRate
      isAccountOnHold
      deliveryDaysNote
      accountHoldCode
      isPONumberRequired
      updatePoNumberWithOgName(isStandingOrderFlow: $isStandingOrderFlow)
      __typename
    }
    orderingStatus
    __typename
  }
  userData {
    id
    collapsedsections {
      id
      __typename
    }
    __typename
  }
  accountingcategory {
    id
    __typename
  }
  productSamples(locationId: $locationId) {
    ...ProductSampleForOrderFragment
    __typename
  }
  shipDirectEnabled
  shipdirectvendors {
    id
    verifiedvendor {
      id
      __typename
    }
    __typename
  }
  isMergeOrdersOk
  __typename
}

fragment ProductSampleForOrderFragment on ManufacturerProductSample {
  id
  unit
  priceAmount {
    money
    float
    __typename
  }
  canonicalproduct {
    id
    description
    itemCode
    normalizedItemCode
    multiCartEnabled
    shipDirect
    thumbnail {
      id
      url
      is360
      __typename
    }
    distributioncentres {
      id
      code
      __typename
    }
    __typename
  }
  __typename
}

fragment FormSectionFragment on FormSection {
  id
  stringID
  title
  placeholder
  updated
  multiUnitProducts(
    showHiddenItems: $showHiddenItems
    skipLocationPrivacy: $skipLocationPrivacy
    offset: $offset
    limit: $limit
    useElasticSearch: $useElasticSearch
  ) {
    ...MultiUnitProductForOrderFragment
    __typename
  }
  __typename
}

fragment MultiUnitProductForOrderFragment on MultiUnitProduct {
  id
  multiUnitGroupingId
  itemCode
  name
  updated
  taxable
  sectionItemSequence
  products {
    id
    name
    archived(locationId: $locationId)
    itemCode
    shipDirect
    instructionText
    price(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      cents
      __typename
    }
    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)
    rebateAmount {
      money
      cents
      __typename
    }
    productNotes(locationId: $locationId)
    precut
    prioritizePoundPriceInOG(locationId: $locationId)
    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)
    unit
    abbreviatedUnit
    par
    lastOrderedLabel(locationId: $locationId)
    lastOrderTimeAndQuantity(locationId: $locationId) {
      quantity
      lastOrderedTime
      uom
      daysAgo
      price
      poundPrice
      __typename
    }
    showDiscontinued
    isOutOfStock
    isUnavailable
    canonicalproduct {
      id
      itemCode
      normalizedItemCode
      description
      pack
      consumerCategory
      discontinued(locationId: $locationId)
      quickbooksRefID
      syncedWithQB
      shipDirect
      specialOrder
      jitItem
      DWOItem
      brandName
      unavailable
      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
      productNotes(locationId: $locationId)
      displayManufacturerProductDetails
      gtin
      nameWithoutBrand
      normalizedUoms
      supplierOrderOnly(locationId: $locationId)
      onSale(locationId: $locationId, deliveryDate: $deliveryDate)
      separateDirectShip
      isCatchWeight
      netWeight
      volume
      isGPOForCustomer(locationId: $locationId)
      brokenCaseItem
      currentStocks(locationId: $locationId) {
        uom
        value
        __typename
      }
      quantityOnOrder {
        uom
        value
        __typename
      }
      committedQuantity {
        uom
        value
        __typename
      }
      nextPOQuantity {
        uom
        value
        __typename
      }
      nextPODate {
        uom
        value
        __typename
      }
      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        value
        float
        __typename
      }
      totalCost {
        uom
        value
        float
        __typename
      }
      salesMargin {
        uom
        value
        float
        __typename
      }
      markedAsNew
      BEPRebatesEnabled
      ...RebateConfigsFragment
      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
      specialItem
      forceShowSubstitutes(locationId: $locationId)
      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        type
        value
        __typename
      }
      multiCartEnabled
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      l0category {
        id
        name
        __typename
      }
      l1category {
        id
        name
        __typename
      }
      l2category {
        id
        name
        __typename
      }
      l3category {
        id
        name
        __typename
      }
      l4category {
        id
        name
        __typename
      }
      packSize
      thumbnail {
        id
        url
        is360
        category
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      primaryImage {
        id
        url
        __typename
      }
      productShopDataForStore {
        id
        sizeDescription
        onSale(locationId: $locationId, deliveryDate: $deliveryDate)
        shopifyName
        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
          unit
          billedUnit
          billedPrice {
            float
            money
            __typename
          }
          price {
            float
            money
            __typename
          }
          __typename
        }
        productsubcategories {
          id
          name
          productcategory {
            id
            name
            __typename
          }
          __typename
        }
        __typename
      }
      allowsItemLevelInstructions
      activeSubstitutions(locationId: $locationId) {
        id
        itemCode
        normalizedItemCode
        shopifyName
        description
        normalizedUoms
        pack
        activeAdCard {
          id
          __typename
        }
        manufacturer {
          id
          name
          __typename
        }
        productbrand {
          id
          displayName
          __typename
        }
        unitPriceEstimates {
          unit
          price {
            float
            money
            __typename
          }
          __typename
        }
        thumbnail {
          id
          url
          __typename
        }
        primaryImage {
          id
          url
          __typename
        }
        productShopDataForStore {
          id
          sizeDescription
          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
            unit
            price {
              float
              money
              __typename
            }
            billedUnit
            billedPrice {
              float
              money
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      verifiedvendor {
        id
        name
        allowsRebates
        supplierportalvendordata {
          id
          showCalculatedSecondaryPriceInCatalog
          __typename
        }
        whiteLabel
        showStocksInPortal
        showStocksInOp
        showCostInPortal
        uomWiseStocksEnabled
        uomWiseCostEnabled
        showMarginInPortal
        lowStockMargin
        maxSalesMargin
        minSalesMargin
        spotPricingEnabled
        poundSpotPricingEnabled
        sendSpotPriceUpdatesEnabled
        restrictPriceChangesBelowMinimumPriceEnabled
        showOnlyCatchWeightPriceInOrderFlow
        hideInventoryForJitAndSpecialOrderItems
        showPriceWithAvg
        hideZeroPrice
        catalogDefaultUnit
        __typename
      }
      manufacturerproduct {
        id
        productbrand {
          id
          displayName
          __typename
        }
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      productbrand {
        id
        displayName
        __typename
      }
      searchKeywords
      ...CanonicalProductDimensionsFragment
      packSizePerUom {
        uom
        packSize
        __typename
      }
      buyersName
      __typename
    }
    doNotSub
    defaultsubstitution {
      id
      __typename
    }
    eligibleForSwitchCashback
    locations {
      id
      __typename
    }
    __typename
  }
  defaultUnit
  __typename
}

fragment CanonicalProductDimensionsFragment on CanonicalProduct {
  gtin
  itemsPerPack
  packsPerCase
  totalItems
  itemSizeType
  itemSizeValue
  itemSizeUOM
  dimensionDetail
  dimensionNotes
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;isStandingOrderFlow&quot;:false,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;sortView&quot;:&quot;custom_view&quot;,&quot;offset&quot;:0,&quot;limit&quot;:15,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;,&quot;useElasticSearch&quot;:true,&quot;sectionId&quot;:null,&quot;sectionCategoryId&quot;:null}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?catalog=true&amp;verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;categoryId=1&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">8902c355e102d61c3d8f0f282ea9b82e80e9def7ce10e8636cef069a7331ee711752080999</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-538 [ConsumerCanonicalProductsByCategoriesQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;ConsumerCanonicalProductsByCategoriesQuery&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;operatingVerifiedVendorId&quot;:&quot;46017666&quot;,&quot;categoryId&quot;:&quot;1&quot;,&quot;subcategoryId&quot;:null,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;,&quot;limit&quot;:200,&quot;offset&quot;:0,&quot;showHidden&quot;:false,&quot;applyUomWiseVisibilityFilter&quot;:true,&quot;productDescriptionTagFilters&quot;:[],&quot;manufacturerIds&quot;:[],&quot;productBrandIds&quot;:[],&quot;storageTypes&quot;:[],&quot;rewardTypes&quot;:[],&quot;sortBy&quot;:&quot;productName&quot;,&quot;sortDirection&quot;:&quot;asc&quot;,&quot;applyPublicCatalogFilter&quot;:false,&quot;showSpecialItems&quot;:false,&quot;distributionCentreIds&quot;:[],&quot;regionIds&quot;:[],&quot;itemTypes&quot;:[],&quot;itemAvailabilities&quot;:[],&quot;itemDeals&quot;:[],&quot;ignoreAdvertisedProducts&quot;:false,&quot;hideNewProducts&quot;:true,&quot;showInstacartAds&quot;:true,&quot;categoryName&quot;:null,&quot;subcategoryName&quot;:null,&quot;tagFilters&quot;:[]},&quot;query&quot;:&quot;query ConsumerCanonicalProductsByCategoriesQuery($verifiedVendorId: ID!, $operatingVerifiedVendorId: ID, $categoryId: ID, $subcategoryId: ID, $formId: ID, $locationId: ID, $activeOnly: Boolean, $showHidden: Boolean, $productBrandIds: [ID], $manufacturerIds: [ID], $storageTypes: [String], $rewardTypes: [String], $productDescriptionTagFilters: [productDescriptionTagFilter], $applyUomWiseVisibilityFilter: Boolean, $limit: Int, $offset: Int, $deliveryDate: String, $sortBy: String, $sortDirection: String, $applyPublicCatalogFilter: Boolean, $showSpecialItems: Boolean, $distributionCentreIds: [ID], $regionIds: [ID], $itemTypes: [String], $itemAvailabilities: [String], $itemDeals: [String], $ignoreAdvertisedProducts: Boolean, $hideNewProducts: Boolean, $showInstacartAds: Boolean, $categoryName: String, $subcategoryName: String, $tagFilters: [tagFilter]) {\n  catalogProductsRootQuery(\n    verifiedVendorId: $verifiedVendorId\n    operatingVerifiedVendorId: $operatingVerifiedVendorId\n    categoryId: $categoryId\n    subcategoryId: $subcategoryId\n    locationId: $locationId\n    activeOnly: $activeOnly\n    showHidden: $showHidden\n    productBrandIds: $productBrandIds\n    manufacturerIds: $manufacturerIds\n    storageTypes: $storageTypes\n    rewardTypes: $rewardTypes\n    productDescriptionTagFilters: $productDescriptionTagFilters\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    limit: $limit\n    offset: $offset\n    deliveryDate: $deliveryDate\n    sortBy: $sortBy\n    sortDirection: $sortDirection\n    applyPublicCatalogFilter: $applyPublicCatalogFilter\n    showSpecialItems: $showSpecialItems\n    distributionCentreIds: $distributionCentreIds\n    regionIds: $regionIds\n    itemTypes: $itemTypes\n    itemAvailabilities: $itemAvailabilities\n    itemDeals: $itemDeals\n    ignoreAdvertisedProducts: $ignoreAdvertisedProducts\n    hideNewProducts: $hideNewProducts\n    showInstacartAds: $showInstacartAds\n    categoryName: $categoryName\n    subcategoryName: $subcategoryName\n    tagFilters: $tagFilters\n  ) {\n    count\n    canonicalProducts {\n      ...ConsumerCanonicalProductFragment\n      ...InstacartAdCardConfigFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ConsumerCanonicalProductFragment on CanonicalProduct {\n  ...CanonicalProductForShopLargeListQuery\n  ...RebateConfigsFragment\n  productShopDataForStore {\n    id\n    productsubcategories {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    __typename\n  }\n  displayManufacturerProductDetails\n  productbrand {\n    id\n    displayName\n    __typename\n  }\n  earliestDeliveryDate(locationId: $locationId)\n  manufacturerproduct {\n    id\n    manufacturer {\n      id\n      name\n      websiteUrl\n      __typename\n    }\n    productbrand {\n      id\n      displayName\n      __typename\n    }\n    primaryImage {\n      id\n      url\n      is360\n      category\n      __typename\n    }\n    __typename\n  }\n  supplierOrderOnly(locationId: $locationId)\n  __typename\n}\n\nfragment CanonicalProductForShopLargeListQuery on CanonicalProduct {\n  ...CanonicalProductForLargeList\n  productShopDataForStore {\n    ...ProductShopDataForLargeList\n    __typename\n  }\n  __typename\n}\n\nfragment CanonicalProductForLargeList on CanonicalProduct {\n  id\n  isAddedToOG(formId: $formId, locationId: $locationId)\n  description\n  additionalDescriptions\n  tiHi\n  name\n  nameWithoutBrand\n  itemCode\n  normalizedItemCode\n  uoms\n  normalizedUoms\n  gtin\n  separateDirectShip\n  multiCartEnabled\n  shipDirect\n  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n  isProductInOrderGuide(locationId: $locationId)\n  currentStocks(locationId: $locationId) {\n    uom\n    value\n    __typename\n  }\n  quantityOnOrder {\n    uom\n    value\n    __typename\n  }\n  committedQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPOQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPODate {\n    uom\n    value\n    __typename\n  }\n  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n    uom\n    value\n    float\n    __typename\n  }\n  totalCost {\n    uom\n    value\n    float\n    __typename\n  }\n  distributioncentres {\n    id\n    name\n    code\n    textColor\n    backgroundColor\n    __typename\n  }\n  l0category {\n    id\n    name\n    __typename\n  }\n  l1category {\n    id\n    name\n    displayName\n    __typename\n  }\n  l2category {\n    id\n    name\n    __typename\n  }\n  l3category {\n    id\n    name\n    __typename\n  }\n  l4category {\n    id\n    name\n    __typename\n  }\n  manufacturer {\n    id\n    name\n    __typename\n  }\n  shopifyUOM\n  productNotes(locationId: $locationId)\n  consumerWeight\n  consumerWeightVisible\n  consumerWeightUOM\n  employeeOnly\n  consumerStockCount\n  consumerItemCount\n  consumerItemCountUOM\n  consumerSubcategory\n  displayManufacturerProductDetails\n  productcategory {\n    id\n    name\n    __typename\n  }\n  itemSize\n  itemSizeUOM\n  itemSizeValue\n  itemsPerPack\n  packSize\n  pack\n  packsPerCase\n  size\n  markedAsNew\n  unavailable\n  allowsItemLevelInstructions\n  discontinued(locationId: $locationId)\n  isCatchWeight\n  consumerPerWeightPrice {\n    float\n    money\n    __typename\n  }\n  markedUpPrice(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n  ) {\n    uom\n    price {\n      float\n      money\n      __typename\n    }\n    type\n    value\n    __typename\n  }\n  activeSubstitutions(locationId: $locationId) {\n    id\n    __typename\n  }\n  verifiedvendor {\n    id\n    name\n    logoURL\n    catalogPlaceholder\n    shipDirectSupplier\n    hideZeroPrice\n    catalogDefaultUnit\n    allowsOrderingDiscontinued\n    allowsRebates\n    whiteLabel\n    showStocksInPortal\n    showStocksInOp\n    showCostInPortal\n    showPriceWithAvg\n    uomWiseStocksEnabled\n    uomWiseCostEnabled\n    lowStockMargin\n    showOnlyCatchWeightPriceInOrderFlow\n    hideInventoryForJitAndSpecialOrderItems\n    disableOrderingZeroPricedItems\n    disableOrderingSpecialOrderItems\n    __typename\n  }\n  thumbnail {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  activeAdCard {\n    id\n    __typename\n  }\n  createdTimestamp\n  updated\n  activeDate\n  inactiveDate\n  preOrderable\n  deliveryDays\n  specialOrder\n  jitItem\n  DWOItem\n  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n  BEPRebatesEnabled\n  specialItem\n  packSizePerUom {\n    uom\n    packSize\n    __typename\n  }\n  isGPOForCustomer(locationId: $locationId)\n  buyersName\n  brokenCaseItem\n  __typename\n}\n\nfragment ProductShopDataForLargeList on ProductShopData {\n  id\n  active\n  hidden\n  consumerManualOrdering\n  sizeDescription\n  onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n  discountPercentage\n  consumerPrice(locationId: $locationId) {\n    float\n    money\n    __typename\n  }\n  shopifyName\n  storageType\n  productdescriptiontags {\n    id\n    name\n    visible\n    __typename\n  }\n  productimages {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  hidePrice\n  unitPrices(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    deliveryDate: $deliveryDate\n  ) {\n    unit\n    price {\n      float\n      money\n      cents\n      __typename\n    }\n    billedUnit\n    billedPrice {\n      float\n      money\n      cents\n      __typename\n    }\n    __typename\n  }\n  productsubcategories {\n    id\n    name\n    productcategory {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}\n\nfragment InstacartAdCardConfigFragment on CanonicalProduct {\n  instacartAdCardConfig {\n    objectTrackingId\n    productId\n    displayPosition\n    pageViewId\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">ConsumerCanonicalProductsByCategoriesQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query ConsumerCanonicalProductsByCategoriesQuery($verifiedVendorId: ID!, $operatingVerifiedVendorId: ID, $categoryId: ID, $subcategoryId: ID, $formId: ID, $locationId: ID, $activeOnly: Boolean, $showHidden: Boolean, $productBrandIds: [ID], $manufacturerIds: [ID], $storageTypes: [String], $rewardTypes: [String], $productDescriptionTagFilters: [productDescriptionTagFilter], $applyUomWiseVisibilityFilter: Boolean, $limit: Int, $offset: Int, $deliveryDate: String, $sortBy: String, $sortDirection: String, $applyPublicCatalogFilter: Boolean, $showSpecialItems: Boolean, $distributionCentreIds: [ID], $regionIds: [ID], $itemTypes: [String], $itemAvailabilities: [String], $itemDeals: [String], $ignoreAdvertisedProducts: Boolean, $hideNewProducts: Boolean, $showInstacartAds: Boolean, $categoryName: String, $subcategoryName: String, $tagFilters: [tagFilter]) {
  catalogProductsRootQuery(
    verifiedVendorId: $verifiedVendorId
    operatingVerifiedVendorId: $operatingVerifiedVendorId
    categoryId: $categoryId
    subcategoryId: $subcategoryId
    locationId: $locationId
    activeOnly: $activeOnly
    showHidden: $showHidden
    productBrandIds: $productBrandIds
    manufacturerIds: $manufacturerIds
    storageTypes: $storageTypes
    rewardTypes: $rewardTypes
    productDescriptionTagFilters: $productDescriptionTagFilters
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    limit: $limit
    offset: $offset
    deliveryDate: $deliveryDate
    sortBy: $sortBy
    sortDirection: $sortDirection
    applyPublicCatalogFilter: $applyPublicCatalogFilter
    showSpecialItems: $showSpecialItems
    distributionCentreIds: $distributionCentreIds
    regionIds: $regionIds
    itemTypes: $itemTypes
    itemAvailabilities: $itemAvailabilities
    itemDeals: $itemDeals
    ignoreAdvertisedProducts: $ignoreAdvertisedProducts
    hideNewProducts: $hideNewProducts
    showInstacartAds: $showInstacartAds
    categoryName: $categoryName
    subcategoryName: $subcategoryName
    tagFilters: $tagFilters
  ) {
    count
    canonicalProducts {
      ...ConsumerCanonicalProductFragment
      ...InstacartAdCardConfigFragment
      __typename
    }
    __typename
  }
}

fragment ConsumerCanonicalProductFragment on CanonicalProduct {
  ...CanonicalProductForShopLargeListQuery
  ...RebateConfigsFragment
  productShopDataForStore {
    id
    productsubcategories {
      id
      name
      sortIndex
      __typename
    }
    __typename
  }
  displayManufacturerProductDetails
  productbrand {
    id
    displayName
    __typename
  }
  earliestDeliveryDate(locationId: $locationId)
  manufacturerproduct {
    id
    manufacturer {
      id
      name
      websiteUrl
      __typename
    }
    productbrand {
      id
      displayName
      __typename
    }
    primaryImage {
      id
      url
      is360
      category
      __typename
    }
    __typename
  }
  supplierOrderOnly(locationId: $locationId)
  __typename
}

fragment CanonicalProductForShopLargeListQuery on CanonicalProduct {
  ...CanonicalProductForLargeList
  productShopDataForStore {
    ...ProductShopDataForLargeList
    __typename
  }
  __typename
}

fragment CanonicalProductForLargeList on CanonicalProduct {
  id
  isAddedToOG(formId: $formId, locationId: $locationId)
  description
  additionalDescriptions
  tiHi
  name
  nameWithoutBrand
  itemCode
  normalizedItemCode
  uoms
  normalizedUoms
  gtin
  separateDirectShip
  multiCartEnabled
  shipDirect
  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
  isProductInOrderGuide(locationId: $locationId)
  currentStocks(locationId: $locationId) {
    uom
    value
    __typename
  }
  quantityOnOrder {
    uom
    value
    __typename
  }
  committedQuantity {
    uom
    value
    __typename
  }
  nextPOQuantity {
    uom
    value
    __typename
  }
  nextPODate {
    uom
    value
    __typename
  }
  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
    uom
    value
    float
    __typename
  }
  totalCost {
    uom
    value
    float
    __typename
  }
  distributioncentres {
    id
    name
    code
    textColor
    backgroundColor
    __typename
  }
  l0category {
    id
    name
    __typename
  }
  l1category {
    id
    name
    displayName
    __typename
  }
  l2category {
    id
    name
    __typename
  }
  l3category {
    id
    name
    __typename
  }
  l4category {
    id
    name
    __typename
  }
  manufacturer {
    id
    name
    __typename
  }
  shopifyUOM
  productNotes(locationId: $locationId)
  consumerWeight
  consumerWeightVisible
  consumerWeightUOM
  employeeOnly
  consumerStockCount
  consumerItemCount
  consumerItemCountUOM
  consumerSubcategory
  displayManufacturerProductDetails
  productcategory {
    id
    name
    __typename
  }
  itemSize
  itemSizeUOM
  itemSizeValue
  itemsPerPack
  packSize
  pack
  packsPerCase
  size
  markedAsNew
  unavailable
  allowsItemLevelInstructions
  discontinued(locationId: $locationId)
  isCatchWeight
  consumerPerWeightPrice {
    float
    money
    __typename
  }
  markedUpPrice(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
  ) {
    uom
    price {
      float
      money
      __typename
    }
    type
    value
    __typename
  }
  activeSubstitutions(locationId: $locationId) {
    id
    __typename
  }
  verifiedvendor {
    id
    name
    logoURL
    catalogPlaceholder
    shipDirectSupplier
    hideZeroPrice
    catalogDefaultUnit
    allowsOrderingDiscontinued
    allowsRebates
    whiteLabel
    showStocksInPortal
    showStocksInOp
    showCostInPortal
    showPriceWithAvg
    uomWiseStocksEnabled
    uomWiseCostEnabled
    lowStockMargin
    showOnlyCatchWeightPriceInOrderFlow
    hideInventoryForJitAndSpecialOrderItems
    disableOrderingZeroPricedItems
    disableOrderingSpecialOrderItems
    __typename
  }
  thumbnail {
    id
    url
    is360
    category
    __typename
  }
  activeAdCard {
    id
    __typename
  }
  createdTimestamp
  updated
  activeDate
  inactiveDate
  preOrderable
  deliveryDays
  specialOrder
  jitItem
  DWOItem
  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
  BEPRebatesEnabled
  specialItem
  packSizePerUom {
    uom
    packSize
    __typename
  }
  isGPOForCustomer(locationId: $locationId)
  buyersName
  brokenCaseItem
  __typename
}

fragment ProductShopDataForLargeList on ProductShopData {
  id
  active
  hidden
  consumerManualOrdering
  sizeDescription
  onSale(locationId: $locationId, deliveryDate: $deliveryDate)
  discountPercentage
  consumerPrice(locationId: $locationId) {
    float
    money
    __typename
  }
  shopifyName
  storageType
  productdescriptiontags {
    id
    name
    visible
    __typename
  }
  productimages {
    id
    url
    is360
    category
    __typename
  }
  hidePrice
  unitPrices(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    deliveryDate: $deliveryDate
  ) {
    unit
    price {
      float
      money
      cents
      __typename
    }
    billedUnit
    billedPrice {
      float
      money
      cents
      __typename
    }
    __typename
  }
  productsubcategories {
    id
    name
    productcategory {
      id
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}

fragment InstacartAdCardConfigFragment on CanonicalProduct {
  instacartAdCardConfig {
    objectTrackingId
    productId
    displayPosition
    pageViewId
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;operatingVerifiedVendorId&quot;:&quot;46017666&quot;,&quot;categoryId&quot;:&quot;1&quot;,&quot;subcategoryId&quot;:null,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;,&quot;limit&quot;:200,&quot;offset&quot;:0,&quot;showHidden&quot;:false,&quot;applyUomWiseVisibilityFilter&quot;:true,&quot;productDescriptionTagFilters&quot;:[],&quot;manufacturerIds&quot;:[],&quot;productBrandIds&quot;:[],&quot;storageTypes&quot;:[],&quot;rewardTypes&quot;:[],&quot;sortBy&quot;:&quot;productName&quot;,&quot;sortDirection&quot;:&quot;asc&quot;,&quot;applyPublicCatalogFilter&quot;:false,&quot;showSpecialItems&quot;:false,&quot;distributionCentreIds&quot;:[],&quot;regionIds&quot;:[],&quot;itemTypes&quot;:[],&quot;itemAvailabilities&quot;:[],&quot;itemDeals&quot;:[],&quot;ignoreAdvertisedProducts&quot;:false,&quot;hideNewProducts&quot;:true,&quot;showInstacartAds&quot;:true,&quot;categoryName&quot;:null,&quot;subcategoryName&quot;:null,&quot;tagFilters&quot;:[]}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?catalog=true&amp;verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;categoryId=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">8902c355e102d61c3d8f0f282ea9b82e80e9def7ce10e8636cef069a7331ee711752080999</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-546 [SuggestiveSalesConfigQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SuggestiveSalesConfigQuery&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;CategoryTopPicks&quot;,&quot;configId&quot;:&quot;1&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;},&quot;query&quot;:&quot;query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {\n  suggestiveSalesConfig(\n    verifiedVendorId: $verifiedVendorId\n    configType: $configType\n    configId: $configId\n  ) {\n    id\n    name\n    suggestedItems(locationId: $locationId) {\n      ...ConsumerCanonicalProductFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ConsumerCanonicalProductFragment on CanonicalProduct {\n  ...CanonicalProductForShopLargeListQuery\n  ...RebateConfigsFragment\n  productShopDataForStore {\n    id\n    productsubcategories {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    __typename\n  }\n  displayManufacturerProductDetails\n  productbrand {\n    id\n    displayName\n    __typename\n  }\n  earliestDeliveryDate(locationId: $locationId)\n  manufacturerproduct {\n    id\n    manufacturer {\n      id\n      name\n      websiteUrl\n      __typename\n    }\n    productbrand {\n      id\n      displayName\n      __typename\n    }\n    primaryImage {\n      id\n      url\n      is360\n      category\n      __typename\n    }\n    __typename\n  }\n  supplierOrderOnly(locationId: $locationId)\n  __typename\n}\n\nfragment CanonicalProductForShopLargeListQuery on CanonicalProduct {\n  ...CanonicalProductForLargeList\n  productShopDataForStore {\n    ...ProductShopDataForLargeList\n    __typename\n  }\n  __typename\n}\n\nfragment CanonicalProductForLargeList on CanonicalProduct {\n  id\n  isAddedToOG(formId: $formId, locationId: $locationId)\n  description\n  additionalDescriptions\n  tiHi\n  name\n  nameWithoutBrand\n  itemCode\n  normalizedItemCode\n  uoms\n  normalizedUoms\n  gtin\n  separateDirectShip\n  multiCartEnabled\n  shipDirect\n  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n  isProductInOrderGuide(locationId: $locationId)\n  currentStocks(locationId: $locationId) {\n    uom\n    value\n    __typename\n  }\n  quantityOnOrder {\n    uom\n    value\n    __typename\n  }\n  committedQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPOQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPODate {\n    uom\n    value\n    __typename\n  }\n  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n    uom\n    value\n    float\n    __typename\n  }\n  totalCost {\n    uom\n    value\n    float\n    __typename\n  }\n  distributioncentres {\n    id\n    name\n    code\n    textColor\n    backgroundColor\n    __typename\n  }\n  l0category {\n    id\n    name\n    __typename\n  }\n  l1category {\n    id\n    name\n    displayName\n    __typename\n  }\n  l2category {\n    id\n    name\n    __typename\n  }\n  l3category {\n    id\n    name\n    __typename\n  }\n  l4category {\n    id\n    name\n    __typename\n  }\n  manufacturer {\n    id\n    name\n    __typename\n  }\n  shopifyUOM\n  productNotes(locationId: $locationId)\n  consumerWeight\n  consumerWeightVisible\n  consumerWeightUOM\n  employeeOnly\n  consumerStockCount\n  consumerItemCount\n  consumerItemCountUOM\n  consumerSubcategory\n  displayManufacturerProductDetails\n  productcategory {\n    id\n    name\n    __typename\n  }\n  itemSize\n  itemSizeUOM\n  itemSizeValue\n  itemsPerPack\n  packSize\n  pack\n  packsPerCase\n  size\n  markedAsNew\n  unavailable\n  allowsItemLevelInstructions\n  discontinued(locationId: $locationId)\n  isCatchWeight\n  consumerPerWeightPrice {\n    float\n    money\n    __typename\n  }\n  markedUpPrice(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n  ) {\n    uom\n    price {\n      float\n      money\n      __typename\n    }\n    type\n    value\n    __typename\n  }\n  activeSubstitutions(locationId: $locationId) {\n    id\n    __typename\n  }\n  verifiedvendor {\n    id\n    name\n    logoURL\n    catalogPlaceholder\n    shipDirectSupplier\n    hideZeroPrice\n    catalogDefaultUnit\n    allowsOrderingDiscontinued\n    allowsRebates\n    whiteLabel\n    showStocksInPortal\n    showStocksInOp\n    showCostInPortal\n    showPriceWithAvg\n    uomWiseStocksEnabled\n    uomWiseCostEnabled\n    lowStockMargin\n    showOnlyCatchWeightPriceInOrderFlow\n    hideInventoryForJitAndSpecialOrderItems\n    disableOrderingZeroPricedItems\n    disableOrderingSpecialOrderItems\n    __typename\n  }\n  thumbnail {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  activeAdCard {\n    id\n    __typename\n  }\n  createdTimestamp\n  updated\n  activeDate\n  inactiveDate\n  preOrderable\n  deliveryDays\n  specialOrder\n  jitItem\n  DWOItem\n  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n  BEPRebatesEnabled\n  specialItem\n  packSizePerUom {\n    uom\n    packSize\n    __typename\n  }\n  isGPOForCustomer(locationId: $locationId)\n  buyersName\n  brokenCaseItem\n  __typename\n}\n\nfragment ProductShopDataForLargeList on ProductShopData {\n  id\n  active\n  hidden\n  consumerManualOrdering\n  sizeDescription\n  onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n  discountPercentage\n  consumerPrice(locationId: $locationId) {\n    float\n    money\n    __typename\n  }\n  shopifyName\n  storageType\n  productdescriptiontags {\n    id\n    name\n    visible\n    __typename\n  }\n  productimages {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  hidePrice\n  unitPrices(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    deliveryDate: $deliveryDate\n  ) {\n    unit\n    price {\n      float\n      money\n      cents\n      __typename\n    }\n    billedUnit\n    billedPrice {\n      float\n      money\n      cents\n      __typename\n    }\n    __typename\n  }\n  productsubcategories {\n    id\n    name\n    productcategory {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SuggestiveSalesConfigQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {
  suggestiveSalesConfig(
    verifiedVendorId: $verifiedVendorId
    configType: $configType
    configId: $configId
  ) {
    id
    name
    suggestedItems(locationId: $locationId) {
      ...ConsumerCanonicalProductFragment
      __typename
    }
    __typename
  }
}

fragment ConsumerCanonicalProductFragment on CanonicalProduct {
  ...CanonicalProductForShopLargeListQuery
  ...RebateConfigsFragment
  productShopDataForStore {
    id
    productsubcategories {
      id
      name
      sortIndex
      __typename
    }
    __typename
  }
  displayManufacturerProductDetails
  productbrand {
    id
    displayName
    __typename
  }
  earliestDeliveryDate(locationId: $locationId)
  manufacturerproduct {
    id
    manufacturer {
      id
      name
      websiteUrl
      __typename
    }
    productbrand {
      id
      displayName
      __typename
    }
    primaryImage {
      id
      url
      is360
      category
      __typename
    }
    __typename
  }
  supplierOrderOnly(locationId: $locationId)
  __typename
}

fragment CanonicalProductForShopLargeListQuery on CanonicalProduct {
  ...CanonicalProductForLargeList
  productShopDataForStore {
    ...ProductShopDataForLargeList
    __typename
  }
  __typename
}

fragment CanonicalProductForLargeList on CanonicalProduct {
  id
  isAddedToOG(formId: $formId, locationId: $locationId)
  description
  additionalDescriptions
  tiHi
  name
  nameWithoutBrand
  itemCode
  normalizedItemCode
  uoms
  normalizedUoms
  gtin
  separateDirectShip
  multiCartEnabled
  shipDirect
  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
  isProductInOrderGuide(locationId: $locationId)
  currentStocks(locationId: $locationId) {
    uom
    value
    __typename
  }
  quantityOnOrder {
    uom
    value
    __typename
  }
  committedQuantity {
    uom
    value
    __typename
  }
  nextPOQuantity {
    uom
    value
    __typename
  }
  nextPODate {
    uom
    value
    __typename
  }
  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
    uom
    value
    float
    __typename
  }
  totalCost {
    uom
    value
    float
    __typename
  }
  distributioncentres {
    id
    name
    code
    textColor
    backgroundColor
    __typename
  }
  l0category {
    id
    name
    __typename
  }
  l1category {
    id
    name
    displayName
    __typename
  }
  l2category {
    id
    name
    __typename
  }
  l3category {
    id
    name
    __typename
  }
  l4category {
    id
    name
    __typename
  }
  manufacturer {
    id
    name
    __typename
  }
  shopifyUOM
  productNotes(locationId: $locationId)
  consumerWeight
  consumerWeightVisible
  consumerWeightUOM
  employeeOnly
  consumerStockCount
  consumerItemCount
  consumerItemCountUOM
  consumerSubcategory
  displayManufacturerProductDetails
  productcategory {
    id
    name
    __typename
  }
  itemSize
  itemSizeUOM
  itemSizeValue
  itemsPerPack
  packSize
  pack
  packsPerCase
  size
  markedAsNew
  unavailable
  allowsItemLevelInstructions
  discontinued(locationId: $locationId)
  isCatchWeight
  consumerPerWeightPrice {
    float
    money
    __typename
  }
  markedUpPrice(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
  ) {
    uom
    price {
      float
      money
      __typename
    }
    type
    value
    __typename
  }
  activeSubstitutions(locationId: $locationId) {
    id
    __typename
  }
  verifiedvendor {
    id
    name
    logoURL
    catalogPlaceholder
    shipDirectSupplier
    hideZeroPrice
    catalogDefaultUnit
    allowsOrderingDiscontinued
    allowsRebates
    whiteLabel
    showStocksInPortal
    showStocksInOp
    showCostInPortal
    showPriceWithAvg
    uomWiseStocksEnabled
    uomWiseCostEnabled
    lowStockMargin
    showOnlyCatchWeightPriceInOrderFlow
    hideInventoryForJitAndSpecialOrderItems
    disableOrderingZeroPricedItems
    disableOrderingSpecialOrderItems
    __typename
  }
  thumbnail {
    id
    url
    is360
    category
    __typename
  }
  activeAdCard {
    id
    __typename
  }
  createdTimestamp
  updated
  activeDate
  inactiveDate
  preOrderable
  deliveryDays
  specialOrder
  jitItem
  DWOItem
  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
  BEPRebatesEnabled
  specialItem
  packSizePerUom {
    uom
    packSize
    __typename
  }
  isGPOForCustomer(locationId: $locationId)
  buyersName
  brokenCaseItem
  __typename
}

fragment ProductShopDataForLargeList on ProductShopData {
  id
  active
  hidden
  consumerManualOrdering
  sizeDescription
  onSale(locationId: $locationId, deliveryDate: $deliveryDate)
  discountPercentage
  consumerPrice(locationId: $locationId) {
    float
    money
    __typename
  }
  shopifyName
  storageType
  productdescriptiontags {
    id
    name
    visible
    __typename
  }
  productimages {
    id
    url
    is360
    category
    __typename
  }
  hidePrice
  unitPrices(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    deliveryDate: $deliveryDate
  ) {
    unit
    price {
      float
      money
      cents
      __typename
    }
    billedUnit
    billedPrice {
      float
      money
      cents
      __typename
    }
    __typename
  }
  productsubcategories {
    id
    name
    productcategory {
      id
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;CategoryTopPicks&quot;,&quot;configId&quot;:&quot;1&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?catalog=true&amp;verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;categoryId=1&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">be91ffb58cad67d1c9aa45cd31a23a86473d6badcbf0a682c0b4baab9d9b031c1752081119</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">if (prev.isSuccessful()) {
    props.put(&quot;runThreadGroup2&quot;, &quot;true&quot;)
} else {
    props.put(&quot;runThreadGroup2&quot;, &quot;false&quot;)
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Add to Cart" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-608 [CreateHiddenShop]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;CreateHiddenShopProductMutation&quot;,&quot;variables&quot;:{&quot;formId&quot;:&quot;212522808&quot;,&quot;canonicalProductId&quot;:&quot;179835423&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;sourcePage&quot;:&quot;Catalog&quot;,&quot;sourceLocation&quot;:&quot;General&quot;,&quot;isOperatorAdded&quot;:false,&quot;isSupplierAdding&quot;:true,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;},&quot;query&quot;:&quot;mutation CreateHiddenShopProductMutation($canonicalProductId: ID, $itemCode: String, $upc: String, $formId: ID, $locationId: ID, $orderId: ID, $sourcePage: String, $sourceLocation: String, $isOperatorAdded: Boolean, $isSupplierAdding: Boolean, $deliveryDate: String) {\n  CreateHiddenShopProductMutation(\n    canonicalProductId: $canonicalProductId\n    itemCode: $itemCode\n    upc: $upc\n    formId: $formId\n    locationId: $locationId\n    orderId: $orderId\n    sourcePage: $sourcePage\n    sourceLocation: $sourceLocation\n    isOperatorAdded: $isOperatorAdded\n    isSupplierAdding: $isSupplierAdding\n  ) {\n    ...MultiUnitProductForOrderFragment\n    __typename\n  }\n}\n\nfragment MultiUnitProductForOrderFragment on MultiUnitProduct {\n  id\n  multiUnitGroupingId\n  itemCode\n  name\n  updated\n  taxable\n  sectionItemSequence\n  products {\n    id\n    name\n    archived(locationId: $locationId)\n    itemCode\n    shipDirect\n    instructionText\n    price(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      cents\n      __typename\n    }\n    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)\n    rebateAmount {\n      money\n      cents\n      __typename\n    }\n    productNotes(locationId: $locationId)\n    precut\n    prioritizePoundPriceInOG(locationId: $locationId)\n    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)\n    unit\n    abbreviatedUnit\n    par\n    lastOrderedLabel(locationId: $locationId)\n    lastOrderTimeAndQuantity(locationId: $locationId) {\n      quantity\n      lastOrderedTime\n      uom\n      daysAgo\n      price\n      poundPrice\n      __typename\n    }\n    showDiscontinued\n    isOutOfStock\n    isUnavailable\n    canonicalproduct {\n      id\n      itemCode\n      normalizedItemCode\n      description\n      pack\n      consumerCategory\n      discontinued(locationId: $locationId)\n      quickbooksRefID\n      syncedWithQB\n      shipDirect\n      specialOrder\n      jitItem\n      DWOItem\n      brandName\n      unavailable\n      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n      productNotes(locationId: $locationId)\n      displayManufacturerProductDetails\n      gtin\n      nameWithoutBrand\n      normalizedUoms\n      supplierOrderOnly(locationId: $locationId)\n      onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n      separateDirectShip\n      isCatchWeight\n      netWeight\n      volume\n      isGPOForCustomer(locationId: $locationId)\n      brokenCaseItem\n      currentStocks(locationId: $locationId) {\n        uom\n        value\n        __typename\n      }\n      quantityOnOrder {\n        uom\n        value\n        __typename\n      }\n      committedQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPOQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPODate {\n        uom\n        value\n        __typename\n      }\n      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        value\n        float\n        __typename\n      }\n      totalCost {\n        uom\n        value\n        float\n        __typename\n      }\n      salesMargin {\n        uom\n        value\n        float\n        __typename\n      }\n      markedAsNew\n      BEPRebatesEnabled\n      ...RebateConfigsFragment\n      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n      specialItem\n      forceShowSubstitutes(locationId: $locationId)\n      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        type\n        value\n        __typename\n      }\n      multiCartEnabled\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      l0category {\n        id\n        name\n        __typename\n      }\n      l1category {\n        id\n        name\n        __typename\n      }\n      l2category {\n        id\n        name\n        __typename\n      }\n      l3category {\n        id\n        name\n        __typename\n      }\n      l4category {\n        id\n        name\n        __typename\n      }\n      packSize\n      thumbnail {\n        id\n        url\n        is360\n        category\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      primaryImage {\n        id\n        url\n        __typename\n      }\n      productShopDataForStore {\n        id\n        sizeDescription\n        onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n        shopifyName\n        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n          unit\n          billedUnit\n          billedPrice {\n            float\n            money\n            __typename\n          }\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        productsubcategories {\n          id\n          name\n          productcategory {\n            id\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      allowsItemLevelInstructions\n      activeSubstitutions(locationId: $locationId) {\n        id\n        itemCode\n        normalizedItemCode\n        shopifyName\n        description\n        normalizedUoms\n        pack\n        activeAdCard {\n          id\n          __typename\n        }\n        manufacturer {\n          id\n          name\n          __typename\n        }\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        unitPriceEstimates {\n          unit\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        thumbnail {\n          id\n          url\n          __typename\n        }\n        primaryImage {\n          id\n          url\n          __typename\n        }\n        productShopDataForStore {\n          id\n          sizeDescription\n          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n            unit\n            price {\n              float\n              money\n              __typename\n            }\n            billedUnit\n            billedPrice {\n              float\n              money\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      verifiedvendor {\n        id\n        name\n        allowsRebates\n        supplierportalvendordata {\n          id\n          showCalculatedSecondaryPriceInCatalog\n          __typename\n        }\n        whiteLabel\n        showStocksInPortal\n        showStocksInOp\n        showCostInPortal\n        uomWiseStocksEnabled\n        uomWiseCostEnabled\n        showMarginInPortal\n        lowStockMargin\n        maxSalesMargin\n        minSalesMargin\n        spotPricingEnabled\n        poundSpotPricingEnabled\n        sendSpotPriceUpdatesEnabled\n        restrictPriceChangesBelowMinimumPriceEnabled\n        showOnlyCatchWeightPriceInOrderFlow\n        hideInventoryForJitAndSpecialOrderItems\n        showPriceWithAvg\n        hideZeroPrice\n        catalogDefaultUnit\n        __typename\n      }\n      manufacturerproduct {\n        id\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      productbrand {\n        id\n        displayName\n        __typename\n      }\n      searchKeywords\n      ...CanonicalProductDimensionsFragment\n      packSizePerUom {\n        uom\n        packSize\n        __typename\n      }\n      buyersName\n      __typename\n    }\n    doNotSub\n    defaultsubstitution {\n      id\n      __typename\n    }\n    eligibleForSwitchCashback\n    locations {\n      id\n      __typename\n    }\n    __typename\n  }\n  defaultUnit\n  __typename\n}\n\nfragment CanonicalProductDimensionsFragment on CanonicalProduct {\n  gtin\n  itemsPerPack\n  packsPerCase\n  totalItems\n  itemSizeType\n  itemSizeValue\n  itemSizeUOM\n  dimensionDetail\n  dimensionNotes\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CreateHiddenShopProductMutation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation CreateHiddenShopProductMutation($canonicalProductId: ID, $itemCode: String, $upc: String, $formId: ID, $locationId: ID, $orderId: ID, $sourcePage: String, $sourceLocation: String, $isOperatorAdded: Boolean, $isSupplierAdding: Boolean, $deliveryDate: String) {
  CreateHiddenShopProductMutation(
    canonicalProductId: $canonicalProductId
    itemCode: $itemCode
    upc: $upc
    formId: $formId
    locationId: $locationId
    orderId: $orderId
    sourcePage: $sourcePage
    sourceLocation: $sourceLocation
    isOperatorAdded: $isOperatorAdded
    isSupplierAdding: $isSupplierAdding
  ) {
    ...MultiUnitProductForOrderFragment
    __typename
  }
}

fragment MultiUnitProductForOrderFragment on MultiUnitProduct {
  id
  multiUnitGroupingId
  itemCode
  name
  updated
  taxable
  sectionItemSequence
  products {
    id
    name
    archived(locationId: $locationId)
    itemCode
    shipDirect
    instructionText
    price(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      cents
      __typename
    }
    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)
    rebateAmount {
      money
      cents
      __typename
    }
    productNotes(locationId: $locationId)
    precut
    prioritizePoundPriceInOG(locationId: $locationId)
    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)
    unit
    abbreviatedUnit
    par
    lastOrderedLabel(locationId: $locationId)
    lastOrderTimeAndQuantity(locationId: $locationId) {
      quantity
      lastOrderedTime
      uom
      daysAgo
      price
      poundPrice
      __typename
    }
    showDiscontinued
    isOutOfStock
    isUnavailable
    canonicalproduct {
      id
      itemCode
      normalizedItemCode
      description
      pack
      consumerCategory
      discontinued(locationId: $locationId)
      quickbooksRefID
      syncedWithQB
      shipDirect
      specialOrder
      jitItem
      DWOItem
      brandName
      unavailable
      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
      productNotes(locationId: $locationId)
      displayManufacturerProductDetails
      gtin
      nameWithoutBrand
      normalizedUoms
      supplierOrderOnly(locationId: $locationId)
      onSale(locationId: $locationId, deliveryDate: $deliveryDate)
      separateDirectShip
      isCatchWeight
      netWeight
      volume
      isGPOForCustomer(locationId: $locationId)
      brokenCaseItem
      currentStocks(locationId: $locationId) {
        uom
        value
        __typename
      }
      quantityOnOrder {
        uom
        value
        __typename
      }
      committedQuantity {
        uom
        value
        __typename
      }
      nextPOQuantity {
        uom
        value
        __typename
      }
      nextPODate {
        uom
        value
        __typename
      }
      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        value
        float
        __typename
      }
      totalCost {
        uom
        value
        float
        __typename
      }
      salesMargin {
        uom
        value
        float
        __typename
      }
      markedAsNew
      BEPRebatesEnabled
      ...RebateConfigsFragment
      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
      specialItem
      forceShowSubstitutes(locationId: $locationId)
      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        type
        value
        __typename
      }
      multiCartEnabled
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      l0category {
        id
        name
        __typename
      }
      l1category {
        id
        name
        __typename
      }
      l2category {
        id
        name
        __typename
      }
      l3category {
        id
        name
        __typename
      }
      l4category {
        id
        name
        __typename
      }
      packSize
      thumbnail {
        id
        url
        is360
        category
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      primaryImage {
        id
        url
        __typename
      }
      productShopDataForStore {
        id
        sizeDescription
        onSale(locationId: $locationId, deliveryDate: $deliveryDate)
        shopifyName
        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
          unit
          billedUnit
          billedPrice {
            float
            money
            __typename
          }
          price {
            float
            money
            __typename
          }
          __typename
        }
        productsubcategories {
          id
          name
          productcategory {
            id
            name
            __typename
          }
          __typename
        }
        __typename
      }
      allowsItemLevelInstructions
      activeSubstitutions(locationId: $locationId) {
        id
        itemCode
        normalizedItemCode
        shopifyName
        description
        normalizedUoms
        pack
        activeAdCard {
          id
          __typename
        }
        manufacturer {
          id
          name
          __typename
        }
        productbrand {
          id
          displayName
          __typename
        }
        unitPriceEstimates {
          unit
          price {
            float
            money
            __typename
          }
          __typename
        }
        thumbnail {
          id
          url
          __typename
        }
        primaryImage {
          id
          url
          __typename
        }
        productShopDataForStore {
          id
          sizeDescription
          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
            unit
            price {
              float
              money
              __typename
            }
            billedUnit
            billedPrice {
              float
              money
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      verifiedvendor {
        id
        name
        allowsRebates
        supplierportalvendordata {
          id
          showCalculatedSecondaryPriceInCatalog
          __typename
        }
        whiteLabel
        showStocksInPortal
        showStocksInOp
        showCostInPortal
        uomWiseStocksEnabled
        uomWiseCostEnabled
        showMarginInPortal
        lowStockMargin
        maxSalesMargin
        minSalesMargin
        spotPricingEnabled
        poundSpotPricingEnabled
        sendSpotPriceUpdatesEnabled
        restrictPriceChangesBelowMinimumPriceEnabled
        showOnlyCatchWeightPriceInOrderFlow
        hideInventoryForJitAndSpecialOrderItems
        showPriceWithAvg
        hideZeroPrice
        catalogDefaultUnit
        __typename
      }
      manufacturerproduct {
        id
        productbrand {
          id
          displayName
          __typename
        }
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      productbrand {
        id
        displayName
        __typename
      }
      searchKeywords
      ...CanonicalProductDimensionsFragment
      packSizePerUom {
        uom
        packSize
        __typename
      }
      buyersName
      __typename
    }
    doNotSub
    defaultsubstitution {
      id
      __typename
    }
    eligibleForSwitchCashback
    locations {
      id
      __typename
    }
    __typename
  }
  defaultUnit
  __typename
}

fragment CanonicalProductDimensionsFragment on CanonicalProduct {
  gtin
  itemsPerPack
  packsPerCase
  totalItems
  itemSizeType
  itemSizeValue
  itemSizeUOM
  dimensionDetail
  dimensionNotes
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;formId&quot;:&quot;212522808&quot;,&quot;canonicalProductId&quot;:&quot;179835423&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;sourcePage&quot;:&quot;Catalog&quot;,&quot;sourceLocation&quot;:&quot;General&quot;,&quot;isOperatorAdded&quot;:false,&quot;isSupplierAdding&quot;:true,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?catalog=true&amp;verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;categoryId=1&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">e7563a73973c9021ad3cae76f570406cac8185d301b02a716b217165884a00fe1752081121</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-612 [SuggestiveSalesConfigQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SuggestiveSalesConfigQuery&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;CategoryTopPicks&quot;,&quot;configId&quot;:&quot;1&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;},&quot;query&quot;:&quot;query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {\n  suggestiveSalesConfig(\n    verifiedVendorId: $verifiedVendorId\n    configType: $configType\n    configId: $configId\n  ) {\n    id\n    name\n    suggestedItems(locationId: $locationId) {\n      ...ConsumerCanonicalProductFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ConsumerCanonicalProductFragment on CanonicalProduct {\n  ...CanonicalProductForShopLargeListQuery\n  ...RebateConfigsFragment\n  productShopDataForStore {\n    id\n    productsubcategories {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    __typename\n  }\n  displayManufacturerProductDetails\n  productbrand {\n    id\n    displayName\n    __typename\n  }\n  earliestDeliveryDate(locationId: $locationId)\n  manufacturerproduct {\n    id\n    manufacturer {\n      id\n      name\n      websiteUrl\n      __typename\n    }\n    productbrand {\n      id\n      displayName\n      __typename\n    }\n    primaryImage {\n      id\n      url\n      is360\n      category\n      __typename\n    }\n    __typename\n  }\n  supplierOrderOnly(locationId: $locationId)\n  __typename\n}\n\nfragment CanonicalProductForShopLargeListQuery on CanonicalProduct {\n  ...CanonicalProductForLargeList\n  productShopDataForStore {\n    ...ProductShopDataForLargeList\n    __typename\n  }\n  __typename\n}\n\nfragment CanonicalProductForLargeList on CanonicalProduct {\n  id\n  isAddedToOG(formId: $formId, locationId: $locationId)\n  description\n  additionalDescriptions\n  tiHi\n  name\n  nameWithoutBrand\n  itemCode\n  normalizedItemCode\n  uoms\n  normalizedUoms\n  gtin\n  separateDirectShip\n  multiCartEnabled\n  shipDirect\n  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n  isProductInOrderGuide(locationId: $locationId)\n  currentStocks(locationId: $locationId) {\n    uom\n    value\n    __typename\n  }\n  quantityOnOrder {\n    uom\n    value\n    __typename\n  }\n  committedQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPOQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPODate {\n    uom\n    value\n    __typename\n  }\n  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n    uom\n    value\n    float\n    __typename\n  }\n  totalCost {\n    uom\n    value\n    float\n    __typename\n  }\n  distributioncentres {\n    id\n    name\n    code\n    textColor\n    backgroundColor\n    __typename\n  }\n  l0category {\n    id\n    name\n    __typename\n  }\n  l1category {\n    id\n    name\n    displayName\n    __typename\n  }\n  l2category {\n    id\n    name\n    __typename\n  }\n  l3category {\n    id\n    name\n    __typename\n  }\n  l4category {\n    id\n    name\n    __typename\n  }\n  manufacturer {\n    id\n    name\n    __typename\n  }\n  shopifyUOM\n  productNotes(locationId: $locationId)\n  consumerWeight\n  consumerWeightVisible\n  consumerWeightUOM\n  employeeOnly\n  consumerStockCount\n  consumerItemCount\n  consumerItemCountUOM\n  consumerSubcategory\n  displayManufacturerProductDetails\n  productcategory {\n    id\n    name\n    __typename\n  }\n  itemSize\n  itemSizeUOM\n  itemSizeValue\n  itemsPerPack\n  packSize\n  pack\n  packsPerCase\n  size\n  markedAsNew\n  unavailable\n  allowsItemLevelInstructions\n  discontinued(locationId: $locationId)\n  isCatchWeight\n  consumerPerWeightPrice {\n    float\n    money\n    __typename\n  }\n  markedUpPrice(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n  ) {\n    uom\n    price {\n      float\n      money\n      __typename\n    }\n    type\n    value\n    __typename\n  }\n  activeSubstitutions(locationId: $locationId) {\n    id\n    __typename\n  }\n  verifiedvendor {\n    id\n    name\n    logoURL\n    catalogPlaceholder\n    shipDirectSupplier\n    hideZeroPrice\n    catalogDefaultUnit\n    allowsOrderingDiscontinued\n    allowsRebates\n    whiteLabel\n    showStocksInPortal\n    showStocksInOp\n    showCostInPortal\n    showPriceWithAvg\n    uomWiseStocksEnabled\n    uomWiseCostEnabled\n    lowStockMargin\n    showOnlyCatchWeightPriceInOrderFlow\n    hideInventoryForJitAndSpecialOrderItems\n    disableOrderingZeroPricedItems\n    disableOrderingSpecialOrderItems\n    __typename\n  }\n  thumbnail {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  activeAdCard {\n    id\n    __typename\n  }\n  createdTimestamp\n  updated\n  activeDate\n  inactiveDate\n  preOrderable\n  deliveryDays\n  specialOrder\n  jitItem\n  DWOItem\n  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n  BEPRebatesEnabled\n  specialItem\n  packSizePerUom {\n    uom\n    packSize\n    __typename\n  }\n  isGPOForCustomer(locationId: $locationId)\n  buyersName\n  brokenCaseItem\n  __typename\n}\n\nfragment ProductShopDataForLargeList on ProductShopData {\n  id\n  active\n  hidden\n  consumerManualOrdering\n  sizeDescription\n  onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n  discountPercentage\n  consumerPrice(locationId: $locationId) {\n    float\n    money\n    __typename\n  }\n  shopifyName\n  storageType\n  productdescriptiontags {\n    id\n    name\n    visible\n    __typename\n  }\n  productimages {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  hidePrice\n  unitPrices(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    deliveryDate: $deliveryDate\n  ) {\n    unit\n    price {\n      float\n      money\n      cents\n      __typename\n    }\n    billedUnit\n    billedPrice {\n      float\n      money\n      cents\n      __typename\n    }\n    __typename\n  }\n  productsubcategories {\n    id\n    name\n    productcategory {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SuggestiveSalesConfigQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {
  suggestiveSalesConfig(
    verifiedVendorId: $verifiedVendorId
    configType: $configType
    configId: $configId
  ) {
    id
    name
    suggestedItems(locationId: $locationId) {
      ...ConsumerCanonicalProductFragment
      __typename
    }
    __typename
  }
}

fragment ConsumerCanonicalProductFragment on CanonicalProduct {
  ...CanonicalProductForShopLargeListQuery
  ...RebateConfigsFragment
  productShopDataForStore {
    id
    productsubcategories {
      id
      name
      sortIndex
      __typename
    }
    __typename
  }
  displayManufacturerProductDetails
  productbrand {
    id
    displayName
    __typename
  }
  earliestDeliveryDate(locationId: $locationId)
  manufacturerproduct {
    id
    manufacturer {
      id
      name
      websiteUrl
      __typename
    }
    productbrand {
      id
      displayName
      __typename
    }
    primaryImage {
      id
      url
      is360
      category
      __typename
    }
    __typename
  }
  supplierOrderOnly(locationId: $locationId)
  __typename
}

fragment CanonicalProductForShopLargeListQuery on CanonicalProduct {
  ...CanonicalProductForLargeList
  productShopDataForStore {
    ...ProductShopDataForLargeList
    __typename
  }
  __typename
}

fragment CanonicalProductForLargeList on CanonicalProduct {
  id
  isAddedToOG(formId: $formId, locationId: $locationId)
  description
  additionalDescriptions
  tiHi
  name
  nameWithoutBrand
  itemCode
  normalizedItemCode
  uoms
  normalizedUoms
  gtin
  separateDirectShip
  multiCartEnabled
  shipDirect
  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
  isProductInOrderGuide(locationId: $locationId)
  currentStocks(locationId: $locationId) {
    uom
    value
    __typename
  }
  quantityOnOrder {
    uom
    value
    __typename
  }
  committedQuantity {
    uom
    value
    __typename
  }
  nextPOQuantity {
    uom
    value
    __typename
  }
  nextPODate {
    uom
    value
    __typename
  }
  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
    uom
    value
    float
    __typename
  }
  totalCost {
    uom
    value
    float
    __typename
  }
  distributioncentres {
    id
    name
    code
    textColor
    backgroundColor
    __typename
  }
  l0category {
    id
    name
    __typename
  }
  l1category {
    id
    name
    displayName
    __typename
  }
  l2category {
    id
    name
    __typename
  }
  l3category {
    id
    name
    __typename
  }
  l4category {
    id
    name
    __typename
  }
  manufacturer {
    id
    name
    __typename
  }
  shopifyUOM
  productNotes(locationId: $locationId)
  consumerWeight
  consumerWeightVisible
  consumerWeightUOM
  employeeOnly
  consumerStockCount
  consumerItemCount
  consumerItemCountUOM
  consumerSubcategory
  displayManufacturerProductDetails
  productcategory {
    id
    name
    __typename
  }
  itemSize
  itemSizeUOM
  itemSizeValue
  itemsPerPack
  packSize
  pack
  packsPerCase
  size
  markedAsNew
  unavailable
  allowsItemLevelInstructions
  discontinued(locationId: $locationId)
  isCatchWeight
  consumerPerWeightPrice {
    float
    money
    __typename
  }
  markedUpPrice(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
  ) {
    uom
    price {
      float
      money
      __typename
    }
    type
    value
    __typename
  }
  activeSubstitutions(locationId: $locationId) {
    id
    __typename
  }
  verifiedvendor {
    id
    name
    logoURL
    catalogPlaceholder
    shipDirectSupplier
    hideZeroPrice
    catalogDefaultUnit
    allowsOrderingDiscontinued
    allowsRebates
    whiteLabel
    showStocksInPortal
    showStocksInOp
    showCostInPortal
    showPriceWithAvg
    uomWiseStocksEnabled
    uomWiseCostEnabled
    lowStockMargin
    showOnlyCatchWeightPriceInOrderFlow
    hideInventoryForJitAndSpecialOrderItems
    disableOrderingZeroPricedItems
    disableOrderingSpecialOrderItems
    __typename
  }
  thumbnail {
    id
    url
    is360
    category
    __typename
  }
  activeAdCard {
    id
    __typename
  }
  createdTimestamp
  updated
  activeDate
  inactiveDate
  preOrderable
  deliveryDays
  specialOrder
  jitItem
  DWOItem
  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
  BEPRebatesEnabled
  specialItem
  packSizePerUom {
    uom
    packSize
    __typename
  }
  isGPOForCustomer(locationId: $locationId)
  buyersName
  brokenCaseItem
  __typename
}

fragment ProductShopDataForLargeList on ProductShopData {
  id
  active
  hidden
  consumerManualOrdering
  sizeDescription
  onSale(locationId: $locationId, deliveryDate: $deliveryDate)
  discountPercentage
  consumerPrice(locationId: $locationId) {
    float
    money
    __typename
  }
  shopifyName
  storageType
  productdescriptiontags {
    id
    name
    visible
    __typename
  }
  productimages {
    id
    url
    is360
    category
    __typename
  }
  hidePrice
  unitPrices(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    deliveryDate: $deliveryDate
  ) {
    unit
    price {
      float
      money
      cents
      __typename
    }
    billedUnit
    billedPrice {
      float
      money
      cents
      __typename
    }
    __typename
  }
  productsubcategories {
    id
    name
    productcategory {
      id
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;CategoryTopPicks&quot;,&quot;configId&quot;:&quot;1&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?catalog=true&amp;verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;categoryId=1&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">3fadd58dbd95f094a8e0c0900170aa3c63cadfbc93385347ca8acc2703f73b481752081321</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-615 [CreateOrUpdateDraftMutation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;CreateOrUpdateDraftMutation&quot;,&quot;variables&quot;:{&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;draftId&quot;:null,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;,&quot;fulfilmentType&quot;:&quot;delivery&quot;,&quot;products&quot;:[{&quot;id&quot;:&quot;261395395&quot;,&quot;quantity&quot;:1,&quot;sourceData&quot;:{&quot;sourcePage&quot;:&quot;Catalog&quot;,&quot;sourceLocation&quot;:&quot;General&quot;},&quot;addedToCartAt&quot;:1.752081321519E9,&quot;truePrice&quot;:89.99,&quot;originalPrice&quot;:89.99,&quot;spotPrice&quot;:null,&quot;salesMargin&quot;:null}],&quot;instructions&quot;:&quot;&quot;,&quot;internalNotes&quot;:&quot;&quot;,&quot;poNumber&quot;:&quot;&quot;,&quot;memoCode&quot;:&quot;&quot;,&quot;multiCartData&quot;:[]},&quot;query&quot;:&quot;mutation CreateOrUpdateDraftMutation($formId: ID!, $locationId: ID!, $draftId: ID, $deliveryDate: String, $products: [ProductInput], $canonicalProductId: ID, $instructions: String, $fulfilmentType: String!, $pickupTime: String, $internalNotes: String, $shipToId: ID, $poNumber: String, $memoCode: String, $multiCartData: [SingleCartDataInput]) {\n  CreateOrUpdateDraftMutation(\n    formId: $formId\n    locationId: $locationId\n    draftId: $draftId\n    deliveryDate: $deliveryDate\n    products: $products\n    canonicalProductId: $canonicalProductId\n    instructions: $instructions\n    fulfilmentType: $fulfilmentType\n    pickupTime: $pickupTime\n    internalNotes: $internalNotes\n    shipToId: $shipToId\n    poNumber: $poNumber\n    memoCode: $memoCode\n    multiCartData: $multiCartData\n  ) {\n    ...DraftForOrderGuideWithoutProducts\n    __typename\n  }\n}\n\nfragment DraftForOrderGuideWithoutProducts on Draft {\n  id\n  updated\n  date\n  itemCount\n  PONumber\n  POUrl\n  POHtml\n  POIssues\n  instructions\n  memoCode\n  internalNotes\n  pickupOrder\n  mailDeliveryOrder\n  deliveryOrder\n  fulfilmentType\n  pickupTime\n  substitutions {\n    id\n    canonicalProductId\n    unit\n    __typename\n  }\n  shipDirectFeeAmount {\n    money\n    float\n    __typename\n  }\n  discountAmount {\n    money\n    float\n    __typename\n  }\n  location {\n    id\n    name\n    archived\n    __typename\n  }\n  form {\n    id\n    vendor {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  creator {\n    id\n    name\n    __typename\n  }\n  deliveryFee\n  multiCartData {\n    distributionCentre\n    deliveryDate\n    instructions\n    poNumber\n    memoCode\n    internalNotes\n    noteForCustomer\n    __typename\n  }\n  altshiptoaddress {\n    id\n    __typename\n  }\n  salesGrossProfit {\n    money\n    float\n    __typename\n  }\n  salesCommission {\n    money\n    float\n    __typename\n  }\n  salesCommissionPercentage\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CreateOrUpdateDraftMutation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation CreateOrUpdateDraftMutation($formId: ID!, $locationId: ID!, $draftId: ID, $deliveryDate: String, $products: [ProductInput], $canonicalProductId: ID, $instructions: String, $fulfilmentType: String!, $pickupTime: String, $internalNotes: String, $shipToId: ID, $poNumber: String, $memoCode: String, $multiCartData: [SingleCartDataInput]) {
  CreateOrUpdateDraftMutation(
    formId: $formId
    locationId: $locationId
    draftId: $draftId
    deliveryDate: $deliveryDate
    products: $products
    canonicalProductId: $canonicalProductId
    instructions: $instructions
    fulfilmentType: $fulfilmentType
    pickupTime: $pickupTime
    internalNotes: $internalNotes
    shipToId: $shipToId
    poNumber: $poNumber
    memoCode: $memoCode
    multiCartData: $multiCartData
  ) {
    ...DraftForOrderGuideWithoutProducts
    __typename
  }
}

fragment DraftForOrderGuideWithoutProducts on Draft {
  id
  updated
  date
  itemCount
  PONumber
  POUrl
  POHtml
  POIssues
  instructions
  memoCode
  internalNotes
  pickupOrder
  mailDeliveryOrder
  deliveryOrder
  fulfilmentType
  pickupTime
  substitutions {
    id
    canonicalProductId
    unit
    __typename
  }
  shipDirectFeeAmount {
    money
    float
    __typename
  }
  discountAmount {
    money
    float
    __typename
  }
  location {
    id
    name
    archived
    __typename
  }
  form {
    id
    vendor {
      id
      name
      __typename
    }
    __typename
  }
  creator {
    id
    name
    __typename
  }
  deliveryFee
  multiCartData {
    distributionCentre
    deliveryDate
    instructions
    poNumber
    memoCode
    internalNotes
    noteForCustomer
    __typename
  }
  altshiptoaddress {
    id
    __typename
  }
  salesGrossProfit {
    money
    float
    __typename
  }
  salesCommission {
    money
    float
    __typename
  }
  salesCommissionPercentage
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;draftId&quot;:null,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;,&quot;fulfilmentType&quot;:&quot;delivery&quot;,&quot;products&quot;:[{&quot;id&quot;:&quot;261395395&quot;,&quot;quantity&quot;:1,&quot;sourceData&quot;:{&quot;sourcePage&quot;:&quot;Catalog&quot;,&quot;sourceLocation&quot;:&quot;General&quot;},&quot;addedToCartAt&quot;:1.752081321519E9,&quot;truePrice&quot;:89.99,&quot;originalPrice&quot;:89.99,&quot;spotPrice&quot;:null,&quot;salesMargin&quot;:null}],&quot;instructions&quot;:&quot;&quot;,&quot;internalNotes&quot;:&quot;&quot;,&quot;poNumber&quot;:&quot;&quot;,&quot;memoCode&quot;:&quot;&quot;,&quot;multiCartData&quot;:[]}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?catalog=true&amp;verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;categoryId=1&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">3fadd58dbd95f094a8e0c0900170aa3c63cadfbc93385347ca8acc2703f73b481752081321</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-619 [singleDraft]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;singleDraft&quot;,&quot;variables&quot;:{&quot;id&quot;:&quot;566610707&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;},&quot;query&quot;:&quot;query singleDraft($id: ID!, $locationId: ID, $deliveryDate: String) {\n  draft(id: $id) {\n    ...DraftForOrderGuide\n    ...DraftApprovalData\n    form {\n      id\n      vendor {\n        id\n        verifiedvendor {\n          id\n          supplierportalvendordata {\n            id\n            pickupTimeSelectEnabled\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment DraftForOrderGuide on Draft {\n  id\n  updated\n  date\n  itemCount\n  PONumber\n  POUrl\n  POHtml\n  POIssues\n  instructions\n  memoCode\n  internalNotes\n  pickupOrder\n  mailDeliveryOrder\n  deliveryOrder\n  fulfilmentType\n  pickupTime\n  substitutions {\n    id\n    canonicalProductId\n    unit\n    __typename\n  }\n  shipDirectFeeAmount {\n    money\n    float\n    __typename\n  }\n  discountAmount {\n    money\n    float\n    __typename\n  }\n  location {\n    id\n    name\n    archived\n    __typename\n  }\n  creator {\n    id\n    name\n    __typename\n  }\n  products(locationId: $locationId) {\n    id\n    quantity\n    itemCode\n    sourceData {\n      sourcePage\n      sourceLocation\n      __typename\n    }\n    instructionText\n    spotPrice\n    salesMargin\n    addedToCartAt\n    multiUnitProduct {\n      ...MultiUnitProductForOrderFragment\n      __typename\n    }\n    __typename\n  }\n  deliveryFee\n  multiCartData {\n    distributionCentre\n    deliveryDate\n    instructions\n    poNumber\n    memoCode\n    internalNotes\n    noteForCustomer\n    __typename\n  }\n  altshiptoaddress {\n    id\n    __typename\n  }\n  __typename\n}\n\nfragment MultiUnitProductForOrderFragment on MultiUnitProduct {\n  id\n  multiUnitGroupingId\n  itemCode\n  name\n  updated\n  taxable\n  sectionItemSequence\n  products {\n    id\n    name\n    archived(locationId: $locationId)\n    itemCode\n    shipDirect\n    instructionText\n    price(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      cents\n      __typename\n    }\n    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)\n    rebateAmount {\n      money\n      cents\n      __typename\n    }\n    productNotes(locationId: $locationId)\n    precut\n    prioritizePoundPriceInOG(locationId: $locationId)\n    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)\n    unit\n    abbreviatedUnit\n    par\n    lastOrderedLabel(locationId: $locationId)\n    lastOrderTimeAndQuantity(locationId: $locationId) {\n      quantity\n      lastOrderedTime\n      uom\n      daysAgo\n      price\n      poundPrice\n      __typename\n    }\n    showDiscontinued\n    isOutOfStock\n    isUnavailable\n    canonicalproduct {\n      id\n      itemCode\n      normalizedItemCode\n      description\n      pack\n      consumerCategory\n      discontinued(locationId: $locationId)\n      quickbooksRefID\n      syncedWithQB\n      shipDirect\n      specialOrder\n      jitItem\n      DWOItem\n      brandName\n      unavailable\n      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n      productNotes(locationId: $locationId)\n      displayManufacturerProductDetails\n      gtin\n      nameWithoutBrand\n      normalizedUoms\n      supplierOrderOnly(locationId: $locationId)\n      onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n      separateDirectShip\n      isCatchWeight\n      netWeight\n      volume\n      isGPOForCustomer(locationId: $locationId)\n      brokenCaseItem\n      currentStocks(locationId: $locationId) {\n        uom\n        value\n        __typename\n      }\n      quantityOnOrder {\n        uom\n        value\n        __typename\n      }\n      committedQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPOQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPODate {\n        uom\n        value\n        __typename\n      }\n      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        value\n        float\n        __typename\n      }\n      totalCost {\n        uom\n        value\n        float\n        __typename\n      }\n      salesMargin {\n        uom\n        value\n        float\n        __typename\n      }\n      markedAsNew\n      BEPRebatesEnabled\n      ...RebateConfigsFragment\n      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n      specialItem\n      forceShowSubstitutes(locationId: $locationId)\n      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        type\n        value\n        __typename\n      }\n      multiCartEnabled\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      l0category {\n        id\n        name\n        __typename\n      }\n      l1category {\n        id\n        name\n        __typename\n      }\n      l2category {\n        id\n        name\n        __typename\n      }\n      l3category {\n        id\n        name\n        __typename\n      }\n      l4category {\n        id\n        name\n        __typename\n      }\n      packSize\n      thumbnail {\n        id\n        url\n        is360\n        category\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      primaryImage {\n        id\n        url\n        __typename\n      }\n      productShopDataForStore {\n        id\n        sizeDescription\n        onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n        shopifyName\n        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n          unit\n          billedUnit\n          billedPrice {\n            float\n            money\n            __typename\n          }\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        productsubcategories {\n          id\n          name\n          productcategory {\n            id\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      allowsItemLevelInstructions\n      activeSubstitutions(locationId: $locationId) {\n        id\n        itemCode\n        normalizedItemCode\n        shopifyName\n        description\n        normalizedUoms\n        pack\n        activeAdCard {\n          id\n          __typename\n        }\n        manufacturer {\n          id\n          name\n          __typename\n        }\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        unitPriceEstimates {\n          unit\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        thumbnail {\n          id\n          url\n          __typename\n        }\n        primaryImage {\n          id\n          url\n          __typename\n        }\n        productShopDataForStore {\n          id\n          sizeDescription\n          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n            unit\n            price {\n              float\n              money\n              __typename\n            }\n            billedUnit\n            billedPrice {\n              float\n              money\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      verifiedvendor {\n        id\n        name\n        allowsRebates\n        supplierportalvendordata {\n          id\n          showCalculatedSecondaryPriceInCatalog\n          __typename\n        }\n        whiteLabel\n        showStocksInPortal\n        showStocksInOp\n        showCostInPortal\n        uomWiseStocksEnabled\n        uomWiseCostEnabled\n        showMarginInPortal\n        lowStockMargin\n        maxSalesMargin\n        minSalesMargin\n        spotPricingEnabled\n        poundSpotPricingEnabled\n        sendSpotPriceUpdatesEnabled\n        restrictPriceChangesBelowMinimumPriceEnabled\n        showOnlyCatchWeightPriceInOrderFlow\n        hideInventoryForJitAndSpecialOrderItems\n        showPriceWithAvg\n        hideZeroPrice\n        catalogDefaultUnit\n        __typename\n      }\n      manufacturerproduct {\n        id\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      productbrand {\n        id\n        displayName\n        __typename\n      }\n      searchKeywords\n      ...CanonicalProductDimensionsFragment\n      packSizePerUom {\n        uom\n        packSize\n        __typename\n      }\n      buyersName\n      __typename\n    }\n    doNotSub\n    defaultsubstitution {\n      id\n      __typename\n    }\n    eligibleForSwitchCashback\n    locations {\n      id\n      __typename\n    }\n    __typename\n  }\n  defaultUnit\n  __typename\n}\n\nfragment CanonicalProductDimensionsFragment on CanonicalProduct {\n  gtin\n  itemsPerPack\n  packsPerCase\n  totalItems\n  itemSizeType\n  itemSizeValue\n  itemSizeUOM\n  dimensionDetail\n  dimensionNotes\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}\n\nfragment DraftApprovalData on Draft {\n  id\n  approvalStatusCode\n  rejectionNote\n  submittedForApproval\n  rejected\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">singleDraft</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query singleDraft($id: ID!, $locationId: ID, $deliveryDate: String) {
  draft(id: $id) {
    ...DraftForOrderGuide
    ...DraftApprovalData
    form {
      id
      vendor {
        id
        verifiedvendor {
          id
          supplierportalvendordata {
            id
            pickupTimeSelectEnabled
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment DraftForOrderGuide on Draft {
  id
  updated
  date
  itemCount
  PONumber
  POUrl
  POHtml
  POIssues
  instructions
  memoCode
  internalNotes
  pickupOrder
  mailDeliveryOrder
  deliveryOrder
  fulfilmentType
  pickupTime
  substitutions {
    id
    canonicalProductId
    unit
    __typename
  }
  shipDirectFeeAmount {
    money
    float
    __typename
  }
  discountAmount {
    money
    float
    __typename
  }
  location {
    id
    name
    archived
    __typename
  }
  creator {
    id
    name
    __typename
  }
  products(locationId: $locationId) {
    id
    quantity
    itemCode
    sourceData {
      sourcePage
      sourceLocation
      __typename
    }
    instructionText
    spotPrice
    salesMargin
    addedToCartAt
    multiUnitProduct {
      ...MultiUnitProductForOrderFragment
      __typename
    }
    __typename
  }
  deliveryFee
  multiCartData {
    distributionCentre
    deliveryDate
    instructions
    poNumber
    memoCode
    internalNotes
    noteForCustomer
    __typename
  }
  altshiptoaddress {
    id
    __typename
  }
  __typename
}

fragment MultiUnitProductForOrderFragment on MultiUnitProduct {
  id
  multiUnitGroupingId
  itemCode
  name
  updated
  taxable
  sectionItemSequence
  products {
    id
    name
    archived(locationId: $locationId)
    itemCode
    shipDirect
    instructionText
    price(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      cents
      __typename
    }
    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)
    rebateAmount {
      money
      cents
      __typename
    }
    productNotes(locationId: $locationId)
    precut
    prioritizePoundPriceInOG(locationId: $locationId)
    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)
    unit
    abbreviatedUnit
    par
    lastOrderedLabel(locationId: $locationId)
    lastOrderTimeAndQuantity(locationId: $locationId) {
      quantity
      lastOrderedTime
      uom
      daysAgo
      price
      poundPrice
      __typename
    }
    showDiscontinued
    isOutOfStock
    isUnavailable
    canonicalproduct {
      id
      itemCode
      normalizedItemCode
      description
      pack
      consumerCategory
      discontinued(locationId: $locationId)
      quickbooksRefID
      syncedWithQB
      shipDirect
      specialOrder
      jitItem
      DWOItem
      brandName
      unavailable
      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
      productNotes(locationId: $locationId)
      displayManufacturerProductDetails
      gtin
      nameWithoutBrand
      normalizedUoms
      supplierOrderOnly(locationId: $locationId)
      onSale(locationId: $locationId, deliveryDate: $deliveryDate)
      separateDirectShip
      isCatchWeight
      netWeight
      volume
      isGPOForCustomer(locationId: $locationId)
      brokenCaseItem
      currentStocks(locationId: $locationId) {
        uom
        value
        __typename
      }
      quantityOnOrder {
        uom
        value
        __typename
      }
      committedQuantity {
        uom
        value
        __typename
      }
      nextPOQuantity {
        uom
        value
        __typename
      }
      nextPODate {
        uom
        value
        __typename
      }
      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        value
        float
        __typename
      }
      totalCost {
        uom
        value
        float
        __typename
      }
      salesMargin {
        uom
        value
        float
        __typename
      }
      markedAsNew
      BEPRebatesEnabled
      ...RebateConfigsFragment
      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
      specialItem
      forceShowSubstitutes(locationId: $locationId)
      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        type
        value
        __typename
      }
      multiCartEnabled
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      l0category {
        id
        name
        __typename
      }
      l1category {
        id
        name
        __typename
      }
      l2category {
        id
        name
        __typename
      }
      l3category {
        id
        name
        __typename
      }
      l4category {
        id
        name
        __typename
      }
      packSize
      thumbnail {
        id
        url
        is360
        category
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      primaryImage {
        id
        url
        __typename
      }
      productShopDataForStore {
        id
        sizeDescription
        onSale(locationId: $locationId, deliveryDate: $deliveryDate)
        shopifyName
        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
          unit
          billedUnit
          billedPrice {
            float
            money
            __typename
          }
          price {
            float
            money
            __typename
          }
          __typename
        }
        productsubcategories {
          id
          name
          productcategory {
            id
            name
            __typename
          }
          __typename
        }
        __typename
      }
      allowsItemLevelInstructions
      activeSubstitutions(locationId: $locationId) {
        id
        itemCode
        normalizedItemCode
        shopifyName
        description
        normalizedUoms
        pack
        activeAdCard {
          id
          __typename
        }
        manufacturer {
          id
          name
          __typename
        }
        productbrand {
          id
          displayName
          __typename
        }
        unitPriceEstimates {
          unit
          price {
            float
            money
            __typename
          }
          __typename
        }
        thumbnail {
          id
          url
          __typename
        }
        primaryImage {
          id
          url
          __typename
        }
        productShopDataForStore {
          id
          sizeDescription
          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
            unit
            price {
              float
              money
              __typename
            }
            billedUnit
            billedPrice {
              float
              money
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      verifiedvendor {
        id
        name
        allowsRebates
        supplierportalvendordata {
          id
          showCalculatedSecondaryPriceInCatalog
          __typename
        }
        whiteLabel
        showStocksInPortal
        showStocksInOp
        showCostInPortal
        uomWiseStocksEnabled
        uomWiseCostEnabled
        showMarginInPortal
        lowStockMargin
        maxSalesMargin
        minSalesMargin
        spotPricingEnabled
        poundSpotPricingEnabled
        sendSpotPriceUpdatesEnabled
        restrictPriceChangesBelowMinimumPriceEnabled
        showOnlyCatchWeightPriceInOrderFlow
        hideInventoryForJitAndSpecialOrderItems
        showPriceWithAvg
        hideZeroPrice
        catalogDefaultUnit
        __typename
      }
      manufacturerproduct {
        id
        productbrand {
          id
          displayName
          __typename
        }
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      productbrand {
        id
        displayName
        __typename
      }
      searchKeywords
      ...CanonicalProductDimensionsFragment
      packSizePerUom {
        uom
        packSize
        __typename
      }
      buyersName
      __typename
    }
    doNotSub
    defaultsubstitution {
      id
      __typename
    }
    eligibleForSwitchCashback
    locations {
      id
      __typename
    }
    __typename
  }
  defaultUnit
  __typename
}

fragment CanonicalProductDimensionsFragment on CanonicalProduct {
  gtin
  itemsPerPack
  packsPerCase
  totalItems
  itemSizeType
  itemSizeValue
  itemSizeUOM
  dimensionDetail
  dimensionNotes
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}

fragment DraftApprovalData on Draft {
  id
  approvalStatusCode
  rejectionNote
  submittedForApproval
  rejected
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;id&quot;:&quot;566610707&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities?catalog=true&amp;verifiedVendorId=46017666&amp;ogSortView=custom_view&amp;categoryId=1&amp;page=1&amp;draftId=566610707</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/quantities&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">b18c0936639f9ada0e4c83a824ae8a1438b98cdf41a0626411b85995546b2f741752081323</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-627 [draftDeliveryFree]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;draftDeliveryFree&quot;,&quot;variables&quot;:{&quot;id&quot;:&quot;566610707&quot;},&quot;query&quot;:&quot;query draftDeliveryFree($id: ID!) {\n  draft(id: $id) {\n    id\n    deliveryFee\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">draftDeliveryFree</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query draftDeliveryFree($id: ID!) {
  draft(id: $id) {
    id
    deliveryFee
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;id&quot;:&quot;566610707&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566610707&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">f4d01fbfa91e67f9262df64b3a278a4c1f672f6564b52258dd2c0131061615e11752081325</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-629 [GateKeeperQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GateKeeperQuery&quot;,&quot;variables&quot;:{&quot;features&quot;:[&quot;barcode_scan_enabled&quot;,&quot;select_first_date_for_delivery_or_pickup&quot;,&quot;remove_csr_contact_from_special_order_review&quot;],&quot;companyId&quot;:null,&quot;verifiedVendorId&quot;:&quot;46017666&quot;},&quot;query&quot;:&quot;query GateKeeperQuery($features: [String]!, $companyId: ID, $verifiedVendorId: ID) {\n  gateKeeper(\n    features: $features\n    companyId: $companyId\n    verifiedVendorId: $verifiedVendorId\n  )\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GateKeeperQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GateKeeperQuery($features: [String]!, $companyId: ID, $verifiedVendorId: ID) {
  gateKeeper(
    features: $features
    companyId: $companyId
    verifiedVendorId: $verifiedVendorId
  )
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;features&quot;:[&quot;barcode_scan_enabled&quot;,&quot;select_first_date_for_delivery_or_pickup&quot;,&quot;remove_csr_contact_from_special_order_review&quot;],&quot;companyId&quot;:null,&quot;verifiedVendorId&quot;:&quot;46017666&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566610707&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">f4d01fbfa91e67f9262df64b3a278a4c1f672f6564b52258dd2c0131061615e11752081325</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-630 [SuggestiveSalesConfigQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SuggestiveSalesConfigQuery&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;DontForget&quot;,&quot;configId&quot;:&quot;103430762&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;},&quot;query&quot;:&quot;query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {\n  suggestiveSalesConfig(\n    verifiedVendorId: $verifiedVendorId\n    configType: $configType\n    configId: $configId\n  ) {\n    id\n    name\n    suggestedItems(locationId: $locationId) {\n      ...ConsumerCanonicalProductFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ConsumerCanonicalProductFragment on CanonicalProduct {\n  ...CanonicalProductForShopLargeListQuery\n  ...RebateConfigsFragment\n  productShopDataForStore {\n    id\n    productsubcategories {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    __typename\n  }\n  displayManufacturerProductDetails\n  productbrand {\n    id\n    displayName\n    __typename\n  }\n  earliestDeliveryDate(locationId: $locationId)\n  manufacturerproduct {\n    id\n    manufacturer {\n      id\n      name\n      websiteUrl\n      __typename\n    }\n    productbrand {\n      id\n      displayName\n      __typename\n    }\n    primaryImage {\n      id\n      url\n      is360\n      category\n      __typename\n    }\n    __typename\n  }\n  supplierOrderOnly(locationId: $locationId)\n  __typename\n}\n\nfragment CanonicalProductForShopLargeListQuery on CanonicalProduct {\n  ...CanonicalProductForLargeList\n  productShopDataForStore {\n    ...ProductShopDataForLargeList\n    __typename\n  }\n  __typename\n}\n\nfragment CanonicalProductForLargeList on CanonicalProduct {\n  id\n  isAddedToOG(formId: $formId, locationId: $locationId)\n  description\n  additionalDescriptions\n  tiHi\n  name\n  nameWithoutBrand\n  itemCode\n  normalizedItemCode\n  uoms\n  normalizedUoms\n  gtin\n  separateDirectShip\n  multiCartEnabled\n  shipDirect\n  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n  isProductInOrderGuide(locationId: $locationId)\n  currentStocks(locationId: $locationId) {\n    uom\n    value\n    __typename\n  }\n  quantityOnOrder {\n    uom\n    value\n    __typename\n  }\n  committedQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPOQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPODate {\n    uom\n    value\n    __typename\n  }\n  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n    uom\n    value\n    float\n    __typename\n  }\n  totalCost {\n    uom\n    value\n    float\n    __typename\n  }\n  distributioncentres {\n    id\n    name\n    code\n    textColor\n    backgroundColor\n    __typename\n  }\n  l0category {\n    id\n    name\n    __typename\n  }\n  l1category {\n    id\n    name\n    displayName\n    __typename\n  }\n  l2category {\n    id\n    name\n    __typename\n  }\n  l3category {\n    id\n    name\n    __typename\n  }\n  l4category {\n    id\n    name\n    __typename\n  }\n  manufacturer {\n    id\n    name\n    __typename\n  }\n  shopifyUOM\n  productNotes(locationId: $locationId)\n  consumerWeight\n  consumerWeightVisible\n  consumerWeightUOM\n  employeeOnly\n  consumerStockCount\n  consumerItemCount\n  consumerItemCountUOM\n  consumerSubcategory\n  displayManufacturerProductDetails\n  productcategory {\n    id\n    name\n    __typename\n  }\n  itemSize\n  itemSizeUOM\n  itemSizeValue\n  itemsPerPack\n  packSize\n  pack\n  packsPerCase\n  size\n  markedAsNew\n  unavailable\n  allowsItemLevelInstructions\n  discontinued(locationId: $locationId)\n  isCatchWeight\n  consumerPerWeightPrice {\n    float\n    money\n    __typename\n  }\n  markedUpPrice(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n  ) {\n    uom\n    price {\n      float\n      money\n      __typename\n    }\n    type\n    value\n    __typename\n  }\n  activeSubstitutions(locationId: $locationId) {\n    id\n    __typename\n  }\n  verifiedvendor {\n    id\n    name\n    logoURL\n    catalogPlaceholder\n    shipDirectSupplier\n    hideZeroPrice\n    catalogDefaultUnit\n    allowsOrderingDiscontinued\n    allowsRebates\n    whiteLabel\n    showStocksInPortal\n    showStocksInOp\n    showCostInPortal\n    showPriceWithAvg\n    uomWiseStocksEnabled\n    uomWiseCostEnabled\n    lowStockMargin\n    showOnlyCatchWeightPriceInOrderFlow\n    hideInventoryForJitAndSpecialOrderItems\n    disableOrderingZeroPricedItems\n    disableOrderingSpecialOrderItems\n    __typename\n  }\n  thumbnail {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  activeAdCard {\n    id\n    __typename\n  }\n  createdTimestamp\n  updated\n  activeDate\n  inactiveDate\n  preOrderable\n  deliveryDays\n  specialOrder\n  jitItem\n  DWOItem\n  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n  BEPRebatesEnabled\n  specialItem\n  packSizePerUom {\n    uom\n    packSize\n    __typename\n  }\n  isGPOForCustomer(locationId: $locationId)\n  buyersName\n  brokenCaseItem\n  __typename\n}\n\nfragment ProductShopDataForLargeList on ProductShopData {\n  id\n  active\n  hidden\n  consumerManualOrdering\n  sizeDescription\n  onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n  discountPercentage\n  consumerPrice(locationId: $locationId) {\n    float\n    money\n    __typename\n  }\n  shopifyName\n  storageType\n  productdescriptiontags {\n    id\n    name\n    visible\n    __typename\n  }\n  productimages {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  hidePrice\n  unitPrices(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    deliveryDate: $deliveryDate\n  ) {\n    unit\n    price {\n      float\n      money\n      cents\n      __typename\n    }\n    billedUnit\n    billedPrice {\n      float\n      money\n      cents\n      __typename\n    }\n    __typename\n  }\n  productsubcategories {\n    id\n    name\n    productcategory {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SuggestiveSalesConfigQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {
  suggestiveSalesConfig(
    verifiedVendorId: $verifiedVendorId
    configType: $configType
    configId: $configId
  ) {
    id
    name
    suggestedItems(locationId: $locationId) {
      ...ConsumerCanonicalProductFragment
      __typename
    }
    __typename
  }
}

fragment ConsumerCanonicalProductFragment on CanonicalProduct {
  ...CanonicalProductForShopLargeListQuery
  ...RebateConfigsFragment
  productShopDataForStore {
    id
    productsubcategories {
      id
      name
      sortIndex
      __typename
    }
    __typename
  }
  displayManufacturerProductDetails
  productbrand {
    id
    displayName
    __typename
  }
  earliestDeliveryDate(locationId: $locationId)
  manufacturerproduct {
    id
    manufacturer {
      id
      name
      websiteUrl
      __typename
    }
    productbrand {
      id
      displayName
      __typename
    }
    primaryImage {
      id
      url
      is360
      category
      __typename
    }
    __typename
  }
  supplierOrderOnly(locationId: $locationId)
  __typename
}

fragment CanonicalProductForShopLargeListQuery on CanonicalProduct {
  ...CanonicalProductForLargeList
  productShopDataForStore {
    ...ProductShopDataForLargeList
    __typename
  }
  __typename
}

fragment CanonicalProductForLargeList on CanonicalProduct {
  id
  isAddedToOG(formId: $formId, locationId: $locationId)
  description
  additionalDescriptions
  tiHi
  name
  nameWithoutBrand
  itemCode
  normalizedItemCode
  uoms
  normalizedUoms
  gtin
  separateDirectShip
  multiCartEnabled
  shipDirect
  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
  isProductInOrderGuide(locationId: $locationId)
  currentStocks(locationId: $locationId) {
    uom
    value
    __typename
  }
  quantityOnOrder {
    uom
    value
    __typename
  }
  committedQuantity {
    uom
    value
    __typename
  }
  nextPOQuantity {
    uom
    value
    __typename
  }
  nextPODate {
    uom
    value
    __typename
  }
  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
    uom
    value
    float
    __typename
  }
  totalCost {
    uom
    value
    float
    __typename
  }
  distributioncentres {
    id
    name
    code
    textColor
    backgroundColor
    __typename
  }
  l0category {
    id
    name
    __typename
  }
  l1category {
    id
    name
    displayName
    __typename
  }
  l2category {
    id
    name
    __typename
  }
  l3category {
    id
    name
    __typename
  }
  l4category {
    id
    name
    __typename
  }
  manufacturer {
    id
    name
    __typename
  }
  shopifyUOM
  productNotes(locationId: $locationId)
  consumerWeight
  consumerWeightVisible
  consumerWeightUOM
  employeeOnly
  consumerStockCount
  consumerItemCount
  consumerItemCountUOM
  consumerSubcategory
  displayManufacturerProductDetails
  productcategory {
    id
    name
    __typename
  }
  itemSize
  itemSizeUOM
  itemSizeValue
  itemsPerPack
  packSize
  pack
  packsPerCase
  size
  markedAsNew
  unavailable
  allowsItemLevelInstructions
  discontinued(locationId: $locationId)
  isCatchWeight
  consumerPerWeightPrice {
    float
    money
    __typename
  }
  markedUpPrice(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
  ) {
    uom
    price {
      float
      money
      __typename
    }
    type
    value
    __typename
  }
  activeSubstitutions(locationId: $locationId) {
    id
    __typename
  }
  verifiedvendor {
    id
    name
    logoURL
    catalogPlaceholder
    shipDirectSupplier
    hideZeroPrice
    catalogDefaultUnit
    allowsOrderingDiscontinued
    allowsRebates
    whiteLabel
    showStocksInPortal
    showStocksInOp
    showCostInPortal
    showPriceWithAvg
    uomWiseStocksEnabled
    uomWiseCostEnabled
    lowStockMargin
    showOnlyCatchWeightPriceInOrderFlow
    hideInventoryForJitAndSpecialOrderItems
    disableOrderingZeroPricedItems
    disableOrderingSpecialOrderItems
    __typename
  }
  thumbnail {
    id
    url
    is360
    category
    __typename
  }
  activeAdCard {
    id
    __typename
  }
  createdTimestamp
  updated
  activeDate
  inactiveDate
  preOrderable
  deliveryDays
  specialOrder
  jitItem
  DWOItem
  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
  BEPRebatesEnabled
  specialItem
  packSizePerUom {
    uom
    packSize
    __typename
  }
  isGPOForCustomer(locationId: $locationId)
  buyersName
  brokenCaseItem
  __typename
}

fragment ProductShopDataForLargeList on ProductShopData {
  id
  active
  hidden
  consumerManualOrdering
  sizeDescription
  onSale(locationId: $locationId, deliveryDate: $deliveryDate)
  discountPercentage
  consumerPrice(locationId: $locationId) {
    float
    money
    __typename
  }
  shopifyName
  storageType
  productdescriptiontags {
    id
    name
    visible
    __typename
  }
  productimages {
    id
    url
    is360
    category
    __typename
  }
  hidePrice
  unitPrices(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    deliveryDate: $deliveryDate
  ) {
    unit
    price {
      float
      money
      cents
      __typename
    }
    billedUnit
    billedPrice {
      float
      money
      cents
      __typename
    }
    __typename
  }
  productsubcategories {
    id
    name
    productcategory {
      id
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;DontForget&quot;,&quot;configId&quot;:&quot;103430762&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566610707&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">f4d01fbfa91e67f9262df64b3a278a4c1f672f6564b52258dd2c0131061615e11752081325</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-626 [SaveOrUpdateDraftOrderFieldsMutation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SaveOrUpdateDraftOrderFieldsMutation&quot;,&quot;variables&quot;:{&quot;draftOrderId&quot;:&quot;566610707&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;view&quot;:&quot;custom_view&quot;},&quot;query&quot;:&quot;mutation SaveOrUpdateDraftOrderFieldsMutation($draftOrderId: ID!, $formId: ID, $view: String) {\n  SaveOrUpdateDraftOrderFieldsMutation(\n    draftOrderId: $draftOrderId\n    formId: $formId\n    view: $view\n  ) {\n    id\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SaveOrUpdateDraftOrderFieldsMutation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation SaveOrUpdateDraftOrderFieldsMutation($draftOrderId: ID!, $formId: ID, $view: String) {
  SaveOrUpdateDraftOrderFieldsMutation(
    draftOrderId: $draftOrderId
    formId: $formId
    view: $view
  ) {
    id
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;draftOrderId&quot;:&quot;566610707&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;view&quot;:&quot;custom_view&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566610707&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">f4d01fbfa91e67f9262df64b3a278a4c1f672f6564b52258dd2c0131061615e11752081325</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-631[SuggestiveSalesConfigQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SuggestiveSalesConfigQuery&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;SupplierTopPicks&quot;,&quot;configId&quot;:&quot;46017666&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;},&quot;query&quot;:&quot;query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {\n  suggestiveSalesConfig(\n    verifiedVendorId: $verifiedVendorId\n    configType: $configType\n    configId: $configId\n  ) {\n    id\n    name\n    suggestedItems(locationId: $locationId) {\n      ...ConsumerCanonicalProductFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ConsumerCanonicalProductFragment on CanonicalProduct {\n  ...CanonicalProductForShopLargeListQuery\n  ...RebateConfigsFragment\n  productShopDataForStore {\n    id\n    productsubcategories {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    __typename\n  }\n  displayManufacturerProductDetails\n  productbrand {\n    id\n    displayName\n    __typename\n  }\n  earliestDeliveryDate(locationId: $locationId)\n  manufacturerproduct {\n    id\n    manufacturer {\n      id\n      name\n      websiteUrl\n      __typename\n    }\n    productbrand {\n      id\n      displayName\n      __typename\n    }\n    primaryImage {\n      id\n      url\n      is360\n      category\n      __typename\n    }\n    __typename\n  }\n  supplierOrderOnly(locationId: $locationId)\n  __typename\n}\n\nfragment CanonicalProductForShopLargeListQuery on CanonicalProduct {\n  ...CanonicalProductForLargeList\n  productShopDataForStore {\n    ...ProductShopDataForLargeList\n    __typename\n  }\n  __typename\n}\n\nfragment CanonicalProductForLargeList on CanonicalProduct {\n  id\n  isAddedToOG(formId: $formId, locationId: $locationId)\n  description\n  additionalDescriptions\n  tiHi\n  name\n  nameWithoutBrand\n  itemCode\n  normalizedItemCode\n  uoms\n  normalizedUoms\n  gtin\n  separateDirectShip\n  multiCartEnabled\n  shipDirect\n  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n  isProductInOrderGuide(locationId: $locationId)\n  currentStocks(locationId: $locationId) {\n    uom\n    value\n    __typename\n  }\n  quantityOnOrder {\n    uom\n    value\n    __typename\n  }\n  committedQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPOQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPODate {\n    uom\n    value\n    __typename\n  }\n  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n    uom\n    value\n    float\n    __typename\n  }\n  totalCost {\n    uom\n    value\n    float\n    __typename\n  }\n  distributioncentres {\n    id\n    name\n    code\n    textColor\n    backgroundColor\n    __typename\n  }\n  l0category {\n    id\n    name\n    __typename\n  }\n  l1category {\n    id\n    name\n    displayName\n    __typename\n  }\n  l2category {\n    id\n    name\n    __typename\n  }\n  l3category {\n    id\n    name\n    __typename\n  }\n  l4category {\n    id\n    name\n    __typename\n  }\n  manufacturer {\n    id\n    name\n    __typename\n  }\n  shopifyUOM\n  productNotes(locationId: $locationId)\n  consumerWeight\n  consumerWeightVisible\n  consumerWeightUOM\n  employeeOnly\n  consumerStockCount\n  consumerItemCount\n  consumerItemCountUOM\n  consumerSubcategory\n  displayManufacturerProductDetails\n  productcategory {\n    id\n    name\n    __typename\n  }\n  itemSize\n  itemSizeUOM\n  itemSizeValue\n  itemsPerPack\n  packSize\n  pack\n  packsPerCase\n  size\n  markedAsNew\n  unavailable\n  allowsItemLevelInstructions\n  discontinued(locationId: $locationId)\n  isCatchWeight\n  consumerPerWeightPrice {\n    float\n    money\n    __typename\n  }\n  markedUpPrice(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n  ) {\n    uom\n    price {\n      float\n      money\n      __typename\n    }\n    type\n    value\n    __typename\n  }\n  activeSubstitutions(locationId: $locationId) {\n    id\n    __typename\n  }\n  verifiedvendor {\n    id\n    name\n    logoURL\n    catalogPlaceholder\n    shipDirectSupplier\n    hideZeroPrice\n    catalogDefaultUnit\n    allowsOrderingDiscontinued\n    allowsRebates\n    whiteLabel\n    showStocksInPortal\n    showStocksInOp\n    showCostInPortal\n    showPriceWithAvg\n    uomWiseStocksEnabled\n    uomWiseCostEnabled\n    lowStockMargin\n    showOnlyCatchWeightPriceInOrderFlow\n    hideInventoryForJitAndSpecialOrderItems\n    disableOrderingZeroPricedItems\n    disableOrderingSpecialOrderItems\n    __typename\n  }\n  thumbnail {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  activeAdCard {\n    id\n    __typename\n  }\n  createdTimestamp\n  updated\n  activeDate\n  inactiveDate\n  preOrderable\n  deliveryDays\n  specialOrder\n  jitItem\n  DWOItem\n  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n  BEPRebatesEnabled\n  specialItem\n  packSizePerUom {\n    uom\n    packSize\n    __typename\n  }\n  isGPOForCustomer(locationId: $locationId)\n  buyersName\n  brokenCaseItem\n  __typename\n}\n\nfragment ProductShopDataForLargeList on ProductShopData {\n  id\n  active\n  hidden\n  consumerManualOrdering\n  sizeDescription\n  onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n  discountPercentage\n  consumerPrice(locationId: $locationId) {\n    float\n    money\n    __typename\n  }\n  shopifyName\n  storageType\n  productdescriptiontags {\n    id\n    name\n    visible\n    __typename\n  }\n  productimages {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  hidePrice\n  unitPrices(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    deliveryDate: $deliveryDate\n  ) {\n    unit\n    price {\n      float\n      money\n      cents\n      __typename\n    }\n    billedUnit\n    billedPrice {\n      float\n      money\n      cents\n      __typename\n    }\n    __typename\n  }\n  productsubcategories {\n    id\n    name\n    productcategory {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SuggestiveSalesConfigQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {
  suggestiveSalesConfig(
    verifiedVendorId: $verifiedVendorId
    configType: $configType
    configId: $configId
  ) {
    id
    name
    suggestedItems(locationId: $locationId) {
      ...ConsumerCanonicalProductFragment
      __typename
    }
    __typename
  }
}

fragment ConsumerCanonicalProductFragment on CanonicalProduct {
  ...CanonicalProductForShopLargeListQuery
  ...RebateConfigsFragment
  productShopDataForStore {
    id
    productsubcategories {
      id
      name
      sortIndex
      __typename
    }
    __typename
  }
  displayManufacturerProductDetails
  productbrand {
    id
    displayName
    __typename
  }
  earliestDeliveryDate(locationId: $locationId)
  manufacturerproduct {
    id
    manufacturer {
      id
      name
      websiteUrl
      __typename
    }
    productbrand {
      id
      displayName
      __typename
    }
    primaryImage {
      id
      url
      is360
      category
      __typename
    }
    __typename
  }
  supplierOrderOnly(locationId: $locationId)
  __typename
}

fragment CanonicalProductForShopLargeListQuery on CanonicalProduct {
  ...CanonicalProductForLargeList
  productShopDataForStore {
    ...ProductShopDataForLargeList
    __typename
  }
  __typename
}

fragment CanonicalProductForLargeList on CanonicalProduct {
  id
  isAddedToOG(formId: $formId, locationId: $locationId)
  description
  additionalDescriptions
  tiHi
  name
  nameWithoutBrand
  itemCode
  normalizedItemCode
  uoms
  normalizedUoms
  gtin
  separateDirectShip
  multiCartEnabled
  shipDirect
  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
  isProductInOrderGuide(locationId: $locationId)
  currentStocks(locationId: $locationId) {
    uom
    value
    __typename
  }
  quantityOnOrder {
    uom
    value
    __typename
  }
  committedQuantity {
    uom
    value
    __typename
  }
  nextPOQuantity {
    uom
    value
    __typename
  }
  nextPODate {
    uom
    value
    __typename
  }
  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
    uom
    value
    float
    __typename
  }
  totalCost {
    uom
    value
    float
    __typename
  }
  distributioncentres {
    id
    name
    code
    textColor
    backgroundColor
    __typename
  }
  l0category {
    id
    name
    __typename
  }
  l1category {
    id
    name
    displayName
    __typename
  }
  l2category {
    id
    name
    __typename
  }
  l3category {
    id
    name
    __typename
  }
  l4category {
    id
    name
    __typename
  }
  manufacturer {
    id
    name
    __typename
  }
  shopifyUOM
  productNotes(locationId: $locationId)
  consumerWeight
  consumerWeightVisible
  consumerWeightUOM
  employeeOnly
  consumerStockCount
  consumerItemCount
  consumerItemCountUOM
  consumerSubcategory
  displayManufacturerProductDetails
  productcategory {
    id
    name
    __typename
  }
  itemSize
  itemSizeUOM
  itemSizeValue
  itemsPerPack
  packSize
  pack
  packsPerCase
  size
  markedAsNew
  unavailable
  allowsItemLevelInstructions
  discontinued(locationId: $locationId)
  isCatchWeight
  consumerPerWeightPrice {
    float
    money
    __typename
  }
  markedUpPrice(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
  ) {
    uom
    price {
      float
      money
      __typename
    }
    type
    value
    __typename
  }
  activeSubstitutions(locationId: $locationId) {
    id
    __typename
  }
  verifiedvendor {
    id
    name
    logoURL
    catalogPlaceholder
    shipDirectSupplier
    hideZeroPrice
    catalogDefaultUnit
    allowsOrderingDiscontinued
    allowsRebates
    whiteLabel
    showStocksInPortal
    showStocksInOp
    showCostInPortal
    showPriceWithAvg
    uomWiseStocksEnabled
    uomWiseCostEnabled
    lowStockMargin
    showOnlyCatchWeightPriceInOrderFlow
    hideInventoryForJitAndSpecialOrderItems
    disableOrderingZeroPricedItems
    disableOrderingSpecialOrderItems
    __typename
  }
  thumbnail {
    id
    url
    is360
    category
    __typename
  }
  activeAdCard {
    id
    __typename
  }
  createdTimestamp
  updated
  activeDate
  inactiveDate
  preOrderable
  deliveryDays
  specialOrder
  jitItem
  DWOItem
  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
  BEPRebatesEnabled
  specialItem
  packSizePerUom {
    uom
    packSize
    __typename
  }
  isGPOForCustomer(locationId: $locationId)
  buyersName
  brokenCaseItem
  __typename
}

fragment ProductShopDataForLargeList on ProductShopData {
  id
  active
  hidden
  consumerManualOrdering
  sizeDescription
  onSale(locationId: $locationId, deliveryDate: $deliveryDate)
  discountPercentage
  consumerPrice(locationId: $locationId) {
    float
    money
    __typename
  }
  shopifyName
  storageType
  productdescriptiontags {
    id
    name
    visible
    __typename
  }
  productimages {
    id
    url
    is360
    category
    __typename
  }
  hidePrice
  unitPrices(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    deliveryDate: $deliveryDate
  ) {
    unit
    price {
      float
      money
      cents
      __typename
    }
    billedUnit
    billedPrice {
      float
      money
      cents
      __typename
    }
    __typename
  }
  productsubcategories {
    id
    name
    productcategory {
      id
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;SupplierTopPicks&quot;,&quot;configId&quot;:&quot;46017666&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566610707&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">f4d01fbfa91e67f9262df64b3a278a4c1f672f6564b52258dd2c0131061615e11752081325</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-628 [SuggestiveSalesConfigQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SuggestiveSalesConfigQuery&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;SalesRepTopPicks&quot;,&quot;configId&quot;:&quot;103430762&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;},&quot;query&quot;:&quot;query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {\n  suggestiveSalesConfig(\n    verifiedVendorId: $verifiedVendorId\n    configType: $configType\n    configId: $configId\n  ) {\n    id\n    name\n    suggestedItems(locationId: $locationId) {\n      ...ConsumerCanonicalProductFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ConsumerCanonicalProductFragment on CanonicalProduct {\n  ...CanonicalProductForShopLargeListQuery\n  ...RebateConfigsFragment\n  productShopDataForStore {\n    id\n    productsubcategories {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    __typename\n  }\n  displayManufacturerProductDetails\n  productbrand {\n    id\n    displayName\n    __typename\n  }\n  earliestDeliveryDate(locationId: $locationId)\n  manufacturerproduct {\n    id\n    manufacturer {\n      id\n      name\n      websiteUrl\n      __typename\n    }\n    productbrand {\n      id\n      displayName\n      __typename\n    }\n    primaryImage {\n      id\n      url\n      is360\n      category\n      __typename\n    }\n    __typename\n  }\n  supplierOrderOnly(locationId: $locationId)\n  __typename\n}\n\nfragment CanonicalProductForShopLargeListQuery on CanonicalProduct {\n  ...CanonicalProductForLargeList\n  productShopDataForStore {\n    ...ProductShopDataForLargeList\n    __typename\n  }\n  __typename\n}\n\nfragment CanonicalProductForLargeList on CanonicalProduct {\n  id\n  isAddedToOG(formId: $formId, locationId: $locationId)\n  description\n  additionalDescriptions\n  tiHi\n  name\n  nameWithoutBrand\n  itemCode\n  normalizedItemCode\n  uoms\n  normalizedUoms\n  gtin\n  separateDirectShip\n  multiCartEnabled\n  shipDirect\n  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n  isProductInOrderGuide(locationId: $locationId)\n  currentStocks(locationId: $locationId) {\n    uom\n    value\n    __typename\n  }\n  quantityOnOrder {\n    uom\n    value\n    __typename\n  }\n  committedQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPOQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPODate {\n    uom\n    value\n    __typename\n  }\n  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n    uom\n    value\n    float\n    __typename\n  }\n  totalCost {\n    uom\n    value\n    float\n    __typename\n  }\n  distributioncentres {\n    id\n    name\n    code\n    textColor\n    backgroundColor\n    __typename\n  }\n  l0category {\n    id\n    name\n    __typename\n  }\n  l1category {\n    id\n    name\n    displayName\n    __typename\n  }\n  l2category {\n    id\n    name\n    __typename\n  }\n  l3category {\n    id\n    name\n    __typename\n  }\n  l4category {\n    id\n    name\n    __typename\n  }\n  manufacturer {\n    id\n    name\n    __typename\n  }\n  shopifyUOM\n  productNotes(locationId: $locationId)\n  consumerWeight\n  consumerWeightVisible\n  consumerWeightUOM\n  employeeOnly\n  consumerStockCount\n  consumerItemCount\n  consumerItemCountUOM\n  consumerSubcategory\n  displayManufacturerProductDetails\n  productcategory {\n    id\n    name\n    __typename\n  }\n  itemSize\n  itemSizeUOM\n  itemSizeValue\n  itemsPerPack\n  packSize\n  pack\n  packsPerCase\n  size\n  markedAsNew\n  unavailable\n  allowsItemLevelInstructions\n  discontinued(locationId: $locationId)\n  isCatchWeight\n  consumerPerWeightPrice {\n    float\n    money\n    __typename\n  }\n  markedUpPrice(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n  ) {\n    uom\n    price {\n      float\n      money\n      __typename\n    }\n    type\n    value\n    __typename\n  }\n  activeSubstitutions(locationId: $locationId) {\n    id\n    __typename\n  }\n  verifiedvendor {\n    id\n    name\n    logoURL\n    catalogPlaceholder\n    shipDirectSupplier\n    hideZeroPrice\n    catalogDefaultUnit\n    allowsOrderingDiscontinued\n    allowsRebates\n    whiteLabel\n    showStocksInPortal\n    showStocksInOp\n    showCostInPortal\n    showPriceWithAvg\n    uomWiseStocksEnabled\n    uomWiseCostEnabled\n    lowStockMargin\n    showOnlyCatchWeightPriceInOrderFlow\n    hideInventoryForJitAndSpecialOrderItems\n    disableOrderingZeroPricedItems\n    disableOrderingSpecialOrderItems\n    __typename\n  }\n  thumbnail {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  activeAdCard {\n    id\n    __typename\n  }\n  createdTimestamp\n  updated\n  activeDate\n  inactiveDate\n  preOrderable\n  deliveryDays\n  specialOrder\n  jitItem\n  DWOItem\n  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n  BEPRebatesEnabled\n  specialItem\n  packSizePerUom {\n    uom\n    packSize\n    __typename\n  }\n  isGPOForCustomer(locationId: $locationId)\n  buyersName\n  brokenCaseItem\n  __typename\n}\n\nfragment ProductShopDataForLargeList on ProductShopData {\n  id\n  active\n  hidden\n  consumerManualOrdering\n  sizeDescription\n  onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n  discountPercentage\n  consumerPrice(locationId: $locationId) {\n    float\n    money\n    __typename\n  }\n  shopifyName\n  storageType\n  productdescriptiontags {\n    id\n    name\n    visible\n    __typename\n  }\n  productimages {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  hidePrice\n  unitPrices(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    deliveryDate: $deliveryDate\n  ) {\n    unit\n    price {\n      float\n      money\n      cents\n      __typename\n    }\n    billedUnit\n    billedPrice {\n      float\n      money\n      cents\n      __typename\n    }\n    __typename\n  }\n  productsubcategories {\n    id\n    name\n    productcategory {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SuggestiveSalesConfigQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {
  suggestiveSalesConfig(
    verifiedVendorId: $verifiedVendorId
    configType: $configType
    configId: $configId
  ) {
    id
    name
    suggestedItems(locationId: $locationId) {
      ...ConsumerCanonicalProductFragment
      __typename
    }
    __typename
  }
}

fragment ConsumerCanonicalProductFragment on CanonicalProduct {
  ...CanonicalProductForShopLargeListQuery
  ...RebateConfigsFragment
  productShopDataForStore {
    id
    productsubcategories {
      id
      name
      sortIndex
      __typename
    }
    __typename
  }
  displayManufacturerProductDetails
  productbrand {
    id
    displayName
    __typename
  }
  earliestDeliveryDate(locationId: $locationId)
  manufacturerproduct {
    id
    manufacturer {
      id
      name
      websiteUrl
      __typename
    }
    productbrand {
      id
      displayName
      __typename
    }
    primaryImage {
      id
      url
      is360
      category
      __typename
    }
    __typename
  }
  supplierOrderOnly(locationId: $locationId)
  __typename
}

fragment CanonicalProductForShopLargeListQuery on CanonicalProduct {
  ...CanonicalProductForLargeList
  productShopDataForStore {
    ...ProductShopDataForLargeList
    __typename
  }
  __typename
}

fragment CanonicalProductForLargeList on CanonicalProduct {
  id
  isAddedToOG(formId: $formId, locationId: $locationId)
  description
  additionalDescriptions
  tiHi
  name
  nameWithoutBrand
  itemCode
  normalizedItemCode
  uoms
  normalizedUoms
  gtin
  separateDirectShip
  multiCartEnabled
  shipDirect
  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
  isProductInOrderGuide(locationId: $locationId)
  currentStocks(locationId: $locationId) {
    uom
    value
    __typename
  }
  quantityOnOrder {
    uom
    value
    __typename
  }
  committedQuantity {
    uom
    value
    __typename
  }
  nextPOQuantity {
    uom
    value
    __typename
  }
  nextPODate {
    uom
    value
    __typename
  }
  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
    uom
    value
    float
    __typename
  }
  totalCost {
    uom
    value
    float
    __typename
  }
  distributioncentres {
    id
    name
    code
    textColor
    backgroundColor
    __typename
  }
  l0category {
    id
    name
    __typename
  }
  l1category {
    id
    name
    displayName
    __typename
  }
  l2category {
    id
    name
    __typename
  }
  l3category {
    id
    name
    __typename
  }
  l4category {
    id
    name
    __typename
  }
  manufacturer {
    id
    name
    __typename
  }
  shopifyUOM
  productNotes(locationId: $locationId)
  consumerWeight
  consumerWeightVisible
  consumerWeightUOM
  employeeOnly
  consumerStockCount
  consumerItemCount
  consumerItemCountUOM
  consumerSubcategory
  displayManufacturerProductDetails
  productcategory {
    id
    name
    __typename
  }
  itemSize
  itemSizeUOM
  itemSizeValue
  itemsPerPack
  packSize
  pack
  packsPerCase
  size
  markedAsNew
  unavailable
  allowsItemLevelInstructions
  discontinued(locationId: $locationId)
  isCatchWeight
  consumerPerWeightPrice {
    float
    money
    __typename
  }
  markedUpPrice(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
  ) {
    uom
    price {
      float
      money
      __typename
    }
    type
    value
    __typename
  }
  activeSubstitutions(locationId: $locationId) {
    id
    __typename
  }
  verifiedvendor {
    id
    name
    logoURL
    catalogPlaceholder
    shipDirectSupplier
    hideZeroPrice
    catalogDefaultUnit
    allowsOrderingDiscontinued
    allowsRebates
    whiteLabel
    showStocksInPortal
    showStocksInOp
    showCostInPortal
    showPriceWithAvg
    uomWiseStocksEnabled
    uomWiseCostEnabled
    lowStockMargin
    showOnlyCatchWeightPriceInOrderFlow
    hideInventoryForJitAndSpecialOrderItems
    disableOrderingZeroPricedItems
    disableOrderingSpecialOrderItems
    __typename
  }
  thumbnail {
    id
    url
    is360
    category
    __typename
  }
  activeAdCard {
    id
    __typename
  }
  createdTimestamp
  updated
  activeDate
  inactiveDate
  preOrderable
  deliveryDays
  specialOrder
  jitItem
  DWOItem
  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
  BEPRebatesEnabled
  specialItem
  packSizePerUom {
    uom
    packSize
    __typename
  }
  isGPOForCustomer(locationId: $locationId)
  buyersName
  brokenCaseItem
  __typename
}

fragment ProductShopDataForLargeList on ProductShopData {
  id
  active
  hidden
  consumerManualOrdering
  sizeDescription
  onSale(locationId: $locationId, deliveryDate: $deliveryDate)
  discountPercentage
  consumerPrice(locationId: $locationId) {
    float
    money
    __typename
  }
  shopifyName
  storageType
  productdescriptiontags {
    id
    name
    visible
    __typename
  }
  productimages {
    id
    url
    is360
    category
    __typename
  }
  hidePrice
  unitPrices(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    deliveryDate: $deliveryDate
  ) {
    unit
    price {
      float
      money
      cents
      __typename
    }
    billedUnit
    billedPrice {
      float
      money
      cents
      __typename
    }
    __typename
  }
  productsubcategories {
    id
    name
    productcategory {
      id
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;SalesRepTopPicks&quot;,&quot;configId&quot;:&quot;103430762&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566610707&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">f4d01fbfa91e67f9262df64b3a278a4c1f672f6564b52258dd2c0131061615e11752081325</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-633 [VerifiedVendorDetailsForReviewOrderPage]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;VerifiedVendorDetailsForReviewOrderPage&quot;,&quot;variables&quot;:{&quot;id&quot;:&quot;46017666&quot;},&quot;query&quot;:&quot;query VerifiedVendorDetailsForReviewOrderPage($id: ID!) {\n  verifiedVendor(id: $id) {\n    id\n    hardHoldMessage\n    supplierportalvendordata {\n      id\n      displaySoftCutoffInsteadHardCutoff\n      softCutoffLapsedMessage\n      showSoftCutoffLapsedMessage\n      softCutoffDeliverOnNextAvailableDate\n      memoCodeMaxLen\n      showPickupOrderNoticeInReviewPage\n      pickupOrderNoticeMessage\n      persistsItemLevelInstructions\n      accountHoldAlertsEnabled\n      catalogOnlyOrderFlowEnabled\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">VerifiedVendorDetailsForReviewOrderPage</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query VerifiedVendorDetailsForReviewOrderPage($id: ID!) {
  verifiedVendor(id: $id) {
    id
    hardHoldMessage
    supplierportalvendordata {
      id
      displaySoftCutoffInsteadHardCutoff
      softCutoffLapsedMessage
      showSoftCutoffLapsedMessage
      softCutoffDeliverOnNextAvailableDate
      memoCodeMaxLen
      showPickupOrderNoticeInReviewPage
      pickupOrderNoticeMessage
      persistsItemLevelInstructions
      accountHoldAlertsEnabled
      catalogOnlyOrderFlowEnabled
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;id&quot;:&quot;46017666&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566610707&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">f4d01fbfa91e67f9262df64b3a278a4c1f672f6564b52258dd2c0131061615e11752081325</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-635 [CreateOrUpdateDraftMutation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;CreateOrUpdateDraftMutation&quot;,&quot;variables&quot;:{&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;draftId&quot;:&quot;566610707&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;,&quot;fulfilmentType&quot;:&quot;delivery&quot;,&quot;products&quot;:[{&quot;id&quot;:&quot;261395395&quot;,&quot;quantity&quot;:1,&quot;sourceData&quot;:{&quot;sourcePage&quot;:&quot;Catalog&quot;,&quot;sourceLocation&quot;:&quot;General&quot;},&quot;addedToCartAt&quot;:1.752081321519E9,&quot;truePrice&quot;:89.99,&quot;originalPrice&quot;:89.99,&quot;spotPrice&quot;:null,&quot;salesMargin&quot;:null}],&quot;instructions&quot;:&quot;&quot;,&quot;internalNotes&quot;:&quot;&quot;,&quot;poNumber&quot;:&quot;&quot;,&quot;memoCode&quot;:&quot;&quot;,&quot;multiCartData&quot;:[]},&quot;query&quot;:&quot;mutation CreateOrUpdateDraftMutation($formId: ID!, $locationId: ID!, $draftId: ID, $deliveryDate: String, $products: [ProductInput], $canonicalProductId: ID, $instructions: String, $fulfilmentType: String!, $pickupTime: String, $internalNotes: String, $shipToId: ID, $poNumber: String, $memoCode: String, $multiCartData: [SingleCartDataInput]) {\n  CreateOrUpdateDraftMutation(\n    formId: $formId\n    locationId: $locationId\n    draftId: $draftId\n    deliveryDate: $deliveryDate\n    products: $products\n    canonicalProductId: $canonicalProductId\n    instructions: $instructions\n    fulfilmentType: $fulfilmentType\n    pickupTime: $pickupTime\n    internalNotes: $internalNotes\n    shipToId: $shipToId\n    poNumber: $poNumber\n    memoCode: $memoCode\n    multiCartData: $multiCartData\n  ) {\n    ...DraftForOrderGuideWithoutProducts\n    __typename\n  }\n}\n\nfragment DraftForOrderGuideWithoutProducts on Draft {\n  id\n  updated\n  date\n  itemCount\n  PONumber\n  POUrl\n  POHtml\n  POIssues\n  instructions\n  memoCode\n  internalNotes\n  pickupOrder\n  mailDeliveryOrder\n  deliveryOrder\n  fulfilmentType\n  pickupTime\n  substitutions {\n    id\n    canonicalProductId\n    unit\n    __typename\n  }\n  shipDirectFeeAmount {\n    money\n    float\n    __typename\n  }\n  discountAmount {\n    money\n    float\n    __typename\n  }\n  location {\n    id\n    name\n    archived\n    __typename\n  }\n  form {\n    id\n    vendor {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  creator {\n    id\n    name\n    __typename\n  }\n  deliveryFee\n  multiCartData {\n    distributionCentre\n    deliveryDate\n    instructions\n    poNumber\n    memoCode\n    internalNotes\n    noteForCustomer\n    __typename\n  }\n  altshiptoaddress {\n    id\n    __typename\n  }\n  salesGrossProfit {\n    money\n    float\n    __typename\n  }\n  salesCommission {\n    money\n    float\n    __typename\n  }\n  salesCommissionPercentage\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CreateOrUpdateDraftMutation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation CreateOrUpdateDraftMutation($formId: ID!, $locationId: ID!, $draftId: ID, $deliveryDate: String, $products: [ProductInput], $canonicalProductId: ID, $instructions: String, $fulfilmentType: String!, $pickupTime: String, $internalNotes: String, $shipToId: ID, $poNumber: String, $memoCode: String, $multiCartData: [SingleCartDataInput]) {
  CreateOrUpdateDraftMutation(
    formId: $formId
    locationId: $locationId
    draftId: $draftId
    deliveryDate: $deliveryDate
    products: $products
    canonicalProductId: $canonicalProductId
    instructions: $instructions
    fulfilmentType: $fulfilmentType
    pickupTime: $pickupTime
    internalNotes: $internalNotes
    shipToId: $shipToId
    poNumber: $poNumber
    memoCode: $memoCode
    multiCartData: $multiCartData
  ) {
    ...DraftForOrderGuideWithoutProducts
    __typename
  }
}

fragment DraftForOrderGuideWithoutProducts on Draft {
  id
  updated
  date
  itemCount
  PONumber
  POUrl
  POHtml
  POIssues
  instructions
  memoCode
  internalNotes
  pickupOrder
  mailDeliveryOrder
  deliveryOrder
  fulfilmentType
  pickupTime
  substitutions {
    id
    canonicalProductId
    unit
    __typename
  }
  shipDirectFeeAmount {
    money
    float
    __typename
  }
  discountAmount {
    money
    float
    __typename
  }
  location {
    id
    name
    archived
    __typename
  }
  form {
    id
    vendor {
      id
      name
      __typename
    }
    __typename
  }
  creator {
    id
    name
    __typename
  }
  deliveryFee
  multiCartData {
    distributionCentre
    deliveryDate
    instructions
    poNumber
    memoCode
    internalNotes
    noteForCustomer
    __typename
  }
  altshiptoaddress {
    id
    __typename
  }
  salesGrossProfit {
    money
    float
    __typename
  }
  salesCommission {
    money
    float
    __typename
  }
  salesCommissionPercentage
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;draftId&quot;:&quot;566610707&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;,&quot;fulfilmentType&quot;:&quot;delivery&quot;,&quot;products&quot;:[{&quot;id&quot;:&quot;261395395&quot;,&quot;quantity&quot;:1,&quot;sourceData&quot;:{&quot;sourcePage&quot;:&quot;Catalog&quot;,&quot;sourceLocation&quot;:&quot;General&quot;},&quot;addedToCartAt&quot;:1.752081321519E9,&quot;truePrice&quot;:89.99,&quot;originalPrice&quot;:89.99,&quot;spotPrice&quot;:null,&quot;salesMargin&quot;:null}],&quot;instructions&quot;:&quot;&quot;,&quot;internalNotes&quot;:&quot;&quot;,&quot;poNumber&quot;:&quot;&quot;,&quot;memoCode&quot;:&quot;&quot;,&quot;multiCartData&quot;:[]}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566610707&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">f4d01fbfa91e67f9262df64b3a278a4c1f672f6564b52258dd2c0131061615e11752081325</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-634 [formForOrder]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;formForOrder&quot;,&quot;variables&quot;:{&quot;isStandingOrderFlow&quot;:false,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;sortView&quot;:null,&quot;offset&quot;:0,&quot;limit&quot;:15,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;,&quot;useElasticSearch&quot;:true,&quot;sectionId&quot;:null,&quot;sectionCategoryId&quot;:null},&quot;query&quot;:&quot;query formForOrder($formId: ID!, $locationId: ID!, $showHiddenItems: Boolean, $skipLocationPrivacy: Boolean, $deliveryDate: String, $offset: Int, $limit: Int, $useElasticSearch: Boolean, $sectionId: ID, $sectionCategoryId: ID, $sortView: String, $searchString: String, $isStandingOrderFlow: Boolean = false) {\n  form(id: $formId) {\n    ...OrderGuidePageForm\n    sectionsWithCount(\n      location_id: $locationId\n      showHiddenItems: $showHiddenItems\n      skipLocationPrivacy: $skipLocationPrivacy\n      useElasticSearch: $useElasticSearch\n      sectionId: $sectionId\n      sectionCategoryId: $sectionCategoryId\n      sortView: $sortView\n      offset: $offset\n      limit: $limit\n      searchString: $searchString\n    ) {\n      sections {\n        ...FormSectionFragment\n        __typename\n      }\n      fullCount\n      __typename\n    }\n    offset\n    approvalRequired\n    isApprover(locationId: $locationId)\n    continuableDraft(locationId: $locationId) {\n      id\n      date\n      itemCount\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment OrderGuidePageForm on Form {\n  id\n  name\n  allowsInstructions\n  maxInstructionChars\n  deliveryFee\n  isFromIntegration\n  isEditable\n  shouldDisableOrderingOutOfStockProducts(locationId: $locationId)\n  lastUpdatedTimestamp\n  allowsAddingItems(locationId: $locationId)\n  isCatalogDisabledOnlyForOperator\n  alwaysAddFromCatalog\n  isCutDryDirect\n  shipDirectEnabled\n  cutOffDayOffset(locationId: $locationId)\n  substitutionViewType\n  isFetchStockCountsFromIntegrator\n  multiCartAvailableDeliveryDays(locationId: $locationId) {\n    cartCode\n    deliveryDates {\n      date\n      cutoffTimestamp\n      softCutoffTimestamp\n      isVisibleToOperator\n      __typename\n    }\n    __typename\n  }\n  availableDeliveryDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    softCutoffTimestamp\n    isVisibleToOperator\n    __typename\n  }\n  customerHolidays(locationId: $locationId)\n  allowsPickup(locationId: $locationId)\n  allowedFulfilmentTypes(locationId: $locationId)\n  allowsMailDelivery\n  allowsDelivery\n  availablePickupDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    pickupTimes {\n      time\n      cutoffTimestamp\n      __typename\n    }\n    __typename\n  }\n  availableDispatchDays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    __typename\n  }\n  availableWeekdays(locationId: $locationId) {\n    date\n    cutoffTimestamp\n    __typename\n  }\n  hasContactMethod(locationId: $locationId)\n  hasShopExperience(locationId: $locationId)\n  orderingDays\n  company {\n    id\n    name\n    whiteLabel\n    hasActivePaymentMethods\n    members @include(if: $isStandingOrderFlow) {\n      id\n      email\n      name\n      __typename\n    }\n    __typename\n  }\n  cutoffTimeString\n  lastOrderedProductIds(location_id: $locationId)\n  info\n  locations(filterByID: $locationId) {\n    id\n    name\n    nameWithCompany\n    address\n    streetAddress2\n    city\n    state\n    zip\n    locationshiptoaddresses {\n      id\n      asString\n      __typename\n    }\n    __typename\n  }\n  vendor {\n    id\n    name\n    isCutDryDirect\n    catalogDisabled\n    createOGDisabled\n    payEnabled\n    activeLocations {\n      id\n      name\n      __typename\n    }\n    salespeople {\n      id\n      name\n      allLocations\n      locations {\n        id\n        __typename\n      }\n      __typename\n    }\n    hideSubstitutions\n    verifiedvendor {\n      id\n      name\n      operatorPortalName\n      dateTerm\n      allowsPickup\n      allowsPickupSupplierPortalOnly\n      manufacturerRebatesEnabled\n      defaultFilters {\n        queryStringKey\n        filterOptions\n        __typename\n      }\n      isQBIntegrated\n      isScraperIntegrated\n      isInstantScraperEnabled\n      catalogViewType\n      nestedCategoryEnabled\n      filtersEnabled\n      logoURL\n      allowsOrderingDiscontinued\n      autoCategorizeEnabled\n      catalogLandingPageActive\n      thumbnail\n      catalogHomePageEnabled\n      whiteLabel\n      hardHoldMessage\n      popularCategories {\n        id\n        name\n        __typename\n      }\n      showDeliveryDateInOg\n      showOnlyCatchWeightPriceInOrderFlow\n      showProductSizeDescriptionInSubs\n      showHeroImage\n      showFeaturedItems\n      showOnSaleItems\n      showHeroImage\n      showSmallerImages\n      showFeaturedItems\n      showOnSaleItems\n      catalogHeroImage\n      catalogSmallerImage1\n      catalogSmallerImage2\n      catalogMobileHeroImage\n      catalogHeroImageUrl\n      catalogSmallerImage1Url\n      catalogSmallerImage2Url\n      showStocksInPortal\n      showPriceWithAvg\n      showStocksInOp\n      showCostInPortal\n      uomWiseStocksEnabled\n      uomWiseCostEnabled\n      showMarginInPortal\n      spotPricingEnabled\n      cartSummaryVolumeEnabled\n      cartSummaryWeightEnabled\n      sendSpotPriceUpdatesEnabled\n      lowStockMargin\n      fetchOGPricesFromPricingServiceEnabled\n      dateBasedPricingEnabled\n      showDeliveryDateBasedJitCutoffs\n      bepRebatesActive\n      allowsRebates\n      showPayBannerOnOrderConfirmation\n      catalogSortIndex\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      supplierportalvendordata {\n        id\n        portalOverridesOrderMins\n        splitWeightsActive\n        sameDayDeliveryOffsetSeconds\n        showLocationWisePricesForSubstitutes\n        showSubstitutionsModalInPortal\n        showItemLevelInstructionsInPortal\n        showItemLevelInstructionsInOperator\n        itemLevelInstructionLimit\n        multipleShipTosEnabled\n        chunkCountWaitLimit\n        ogPageSize\n        ogFirstPageSize\n        defaultViewAsCustomer\n        disableItemDeletesAndSubtractsForOrderEdits\n        disableItemDeletesAndSubtractsForOrderEditsInPortal\n        pickupTimeSelectEnabled\n        showMemoCodeInOperatorPortal\n        showMemoCodeInSupplierPortal\n        multiCartEnabled\n        avoidDefaultCaseStyling\n        catalogInfoOnlyViewIfOnOG\n        catalogInfoOnlyViewMessage\n        totalCostMarginEnabled\n        showOrderSummary\n        disableDeliveryDateChangeForOrderEditsInOp\n        disableDeliveryDateChangeForOrderEditsInPortal\n        disableDeliveryDateChangeWarningMessage\n        showLastOrderedPrice\n        showLastOrderedPriceInPortal\n        useTotalCostForMarginValidation\n        showUnitPriceAsMainPriceInCatalog\n        showCalculatedSecondaryPriceInCatalog\n        persistsItemLevelInstructions\n        hideZeroStockLabelInOP\n        hideOutOfStockLabelInSP\n        showUnavailableInsteadOfOutOfStock\n        poundSpotPricingEnabled\n        disableOrderingOutOfStockProductsWithoutSubstitutes\n        checkForZeroPricedItems\n        showLastOrderedPoundPrice\n        preserveCartItemOrder\n        validateMarginInPortal\n        disableEditingPoundQuantity\n        blockPartialQuantityOrdering\n        blockPartialQuantityOrderingInOperatorPortal\n        accountHoldAlertsEnabled\n        hideCatchWeightUnitPriceInCatalog\n        showDistributionCentreLabels\n        offlineOrderingEnabled\n        catalogOnlyOrderFlowEnabled\n        dateBasedPricingBannerDisabled\n        showPurchaseHistory\n        quickAddViewEnabledStatus\n        simpleListViewEnabledStatus\n        enabledLargeProductTiles\n        enabledAdditionalDescriptions\n        enabledTiHiPalletDetails\n        __typename\n      }\n      restrictPriceChangesBelowMinimumPriceEnabled\n      splitSpecialOrders\n      sortOGByItemCode\n      showCaseDiscountsDisclaimerMessage\n      disableOrderingZeroPricedItems\n      disableOrderingSpecialOrderItems\n      __typename\n    }\n    shipdirectverifiedvendor {\n      id\n      shippingFeeWaived\n      shippingFeeWaivedUntil\n      firstOrderDiscounted\n      firstOrderDiscount\n      firstOrderDiscountMaxCap\n      thumbnail\n      shipDirectLandingPageActive\n      catalogHeroImage\n      catalogMobileHeroImage\n      __typename\n    }\n    integrationDataForLocation(locationId: $locationId) {\n      id\n      customerNumber\n      taxRate\n      isAccountOnHold\n      deliveryDaysNote\n      accountHoldCode\n      isPONumberRequired\n      updatePoNumberWithOgName(isStandingOrderFlow: $isStandingOrderFlow)\n      __typename\n    }\n    orderingStatus\n    __typename\n  }\n  userData {\n    id\n    collapsedsections {\n      id\n      __typename\n    }\n    __typename\n  }\n  accountingcategory {\n    id\n    __typename\n  }\n  productSamples(locationId: $locationId) {\n    ...ProductSampleForOrderFragment\n    __typename\n  }\n  shipDirectEnabled\n  shipdirectvendors {\n    id\n    verifiedvendor {\n      id\n      __typename\n    }\n    __typename\n  }\n  isMergeOrdersOk\n  __typename\n}\n\nfragment ProductSampleForOrderFragment on ManufacturerProductSample {\n  id\n  unit\n  priceAmount {\n    money\n    float\n    __typename\n  }\n  canonicalproduct {\n    id\n    description\n    itemCode\n    normalizedItemCode\n    multiCartEnabled\n    shipDirect\n    thumbnail {\n      id\n      url\n      is360\n      __typename\n    }\n    distributioncentres {\n      id\n      code\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FormSectionFragment on FormSection {\n  id\n  stringID\n  title\n  placeholder\n  updated\n  multiUnitProducts(\n    showHiddenItems: $showHiddenItems\n    skipLocationPrivacy: $skipLocationPrivacy\n    offset: $offset\n    limit: $limit\n    useElasticSearch: $useElasticSearch\n  ) {\n    ...MultiUnitProductForOrderFragment\n    __typename\n  }\n  __typename\n}\n\nfragment MultiUnitProductForOrderFragment on MultiUnitProduct {\n  id\n  multiUnitGroupingId\n  itemCode\n  name\n  updated\n  taxable\n  sectionItemSequence\n  products {\n    id\n    name\n    archived(locationId: $locationId)\n    itemCode\n    shipDirect\n    instructionText\n    price(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      cents\n      __typename\n    }\n    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n      float\n      money\n      __typename\n    }\n    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)\n    rebateAmount {\n      money\n      cents\n      __typename\n    }\n    productNotes(locationId: $locationId)\n    precut\n    prioritizePoundPriceInOG(locationId: $locationId)\n    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)\n    unit\n    abbreviatedUnit\n    par\n    lastOrderedLabel(locationId: $locationId)\n    lastOrderTimeAndQuantity(locationId: $locationId) {\n      quantity\n      lastOrderedTime\n      uom\n      daysAgo\n      price\n      poundPrice\n      __typename\n    }\n    showDiscontinued\n    isOutOfStock\n    isUnavailable\n    canonicalproduct {\n      id\n      itemCode\n      normalizedItemCode\n      description\n      pack\n      consumerCategory\n      discontinued(locationId: $locationId)\n      quickbooksRefID\n      syncedWithQB\n      shipDirect\n      specialOrder\n      jitItem\n      DWOItem\n      brandName\n      unavailable\n      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n      productNotes(locationId: $locationId)\n      displayManufacturerProductDetails\n      gtin\n      nameWithoutBrand\n      normalizedUoms\n      supplierOrderOnly(locationId: $locationId)\n      onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n      separateDirectShip\n      isCatchWeight\n      netWeight\n      volume\n      isGPOForCustomer(locationId: $locationId)\n      brokenCaseItem\n      currentStocks(locationId: $locationId) {\n        uom\n        value\n        __typename\n      }\n      quantityOnOrder {\n        uom\n        value\n        __typename\n      }\n      committedQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPOQuantity {\n        uom\n        value\n        __typename\n      }\n      nextPODate {\n        uom\n        value\n        __typename\n      }\n      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        value\n        float\n        __typename\n      }\n      totalCost {\n        uom\n        value\n        float\n        __typename\n      }\n      salesMargin {\n        uom\n        value\n        float\n        __typename\n      }\n      markedAsNew\n      BEPRebatesEnabled\n      ...RebateConfigsFragment\n      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n      specialItem\n      forceShowSubstitutes(locationId: $locationId)\n      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {\n        uom\n        type\n        value\n        __typename\n      }\n      multiCartEnabled\n      distributioncentres {\n        id\n        name\n        code\n        textColor\n        backgroundColor\n        __typename\n      }\n      l0category {\n        id\n        name\n        __typename\n      }\n      l1category {\n        id\n        name\n        __typename\n      }\n      l2category {\n        id\n        name\n        __typename\n      }\n      l3category {\n        id\n        name\n        __typename\n      }\n      l4category {\n        id\n        name\n        __typename\n      }\n      packSize\n      thumbnail {\n        id\n        url\n        is360\n        category\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      primaryImage {\n        id\n        url\n        __typename\n      }\n      productShopDataForStore {\n        id\n        sizeDescription\n        onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n        shopifyName\n        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n          unit\n          billedUnit\n          billedPrice {\n            float\n            money\n            __typename\n          }\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        productsubcategories {\n          id\n          name\n          productcategory {\n            id\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      allowsItemLevelInstructions\n      activeSubstitutions(locationId: $locationId) {\n        id\n        itemCode\n        normalizedItemCode\n        shopifyName\n        description\n        normalizedUoms\n        pack\n        activeAdCard {\n          id\n          __typename\n        }\n        manufacturer {\n          id\n          name\n          __typename\n        }\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        unitPriceEstimates {\n          unit\n          price {\n            float\n            money\n            __typename\n          }\n          __typename\n        }\n        thumbnail {\n          id\n          url\n          __typename\n        }\n        primaryImage {\n          id\n          url\n          __typename\n        }\n        productShopDataForStore {\n          id\n          sizeDescription\n          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {\n            unit\n            price {\n              float\n              money\n              __typename\n            }\n            billedUnit\n            billedPrice {\n              float\n              money\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      verifiedvendor {\n        id\n        name\n        allowsRebates\n        supplierportalvendordata {\n          id\n          showCalculatedSecondaryPriceInCatalog\n          __typename\n        }\n        whiteLabel\n        showStocksInPortal\n        showStocksInOp\n        showCostInPortal\n        uomWiseStocksEnabled\n        uomWiseCostEnabled\n        showMarginInPortal\n        lowStockMargin\n        maxSalesMargin\n        minSalesMargin\n        spotPricingEnabled\n        poundSpotPricingEnabled\n        sendSpotPriceUpdatesEnabled\n        restrictPriceChangesBelowMinimumPriceEnabled\n        showOnlyCatchWeightPriceInOrderFlow\n        hideInventoryForJitAndSpecialOrderItems\n        showPriceWithAvg\n        hideZeroPrice\n        catalogDefaultUnit\n        __typename\n      }\n      manufacturerproduct {\n        id\n        productbrand {\n          id\n          displayName\n          __typename\n        }\n        __typename\n      }\n      manufacturer {\n        id\n        name\n        __typename\n      }\n      productbrand {\n        id\n        displayName\n        __typename\n      }\n      searchKeywords\n      ...CanonicalProductDimensionsFragment\n      packSizePerUom {\n        uom\n        packSize\n        __typename\n      }\n      buyersName\n      __typename\n    }\n    doNotSub\n    defaultsubstitution {\n      id\n      __typename\n    }\n    eligibleForSwitchCashback\n    locations {\n      id\n      __typename\n    }\n    __typename\n  }\n  defaultUnit\n  __typename\n}\n\nfragment CanonicalProductDimensionsFragment on CanonicalProduct {\n  gtin\n  itemsPerPack\n  packsPerCase\n  totalItems\n  itemSizeType\n  itemSizeValue\n  itemSizeUOM\n  dimensionDetail\n  dimensionNotes\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">formForOrder</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query formForOrder($formId: ID!, $locationId: ID!, $showHiddenItems: Boolean, $skipLocationPrivacy: Boolean, $deliveryDate: String, $offset: Int, $limit: Int, $useElasticSearch: Boolean, $sectionId: ID, $sectionCategoryId: ID, $sortView: String, $searchString: String, $isStandingOrderFlow: Boolean = false) {
  form(id: $formId) {
    ...OrderGuidePageForm
    sectionsWithCount(
      location_id: $locationId
      showHiddenItems: $showHiddenItems
      skipLocationPrivacy: $skipLocationPrivacy
      useElasticSearch: $useElasticSearch
      sectionId: $sectionId
      sectionCategoryId: $sectionCategoryId
      sortView: $sortView
      offset: $offset
      limit: $limit
      searchString: $searchString
    ) {
      sections {
        ...FormSectionFragment
        __typename
      }
      fullCount
      __typename
    }
    offset
    approvalRequired
    isApprover(locationId: $locationId)
    continuableDraft(locationId: $locationId) {
      id
      date
      itemCount
      __typename
    }
    __typename
  }
}

fragment OrderGuidePageForm on Form {
  id
  name
  allowsInstructions
  maxInstructionChars
  deliveryFee
  isFromIntegration
  isEditable
  shouldDisableOrderingOutOfStockProducts(locationId: $locationId)
  lastUpdatedTimestamp
  allowsAddingItems(locationId: $locationId)
  isCatalogDisabledOnlyForOperator
  alwaysAddFromCatalog
  isCutDryDirect
  shipDirectEnabled
  cutOffDayOffset(locationId: $locationId)
  substitutionViewType
  isFetchStockCountsFromIntegrator
  multiCartAvailableDeliveryDays(locationId: $locationId) {
    cartCode
    deliveryDates {
      date
      cutoffTimestamp
      softCutoffTimestamp
      isVisibleToOperator
      __typename
    }
    __typename
  }
  availableDeliveryDays(locationId: $locationId) {
    date
    cutoffTimestamp
    softCutoffTimestamp
    isVisibleToOperator
    __typename
  }
  customerHolidays(locationId: $locationId)
  allowsPickup(locationId: $locationId)
  allowedFulfilmentTypes(locationId: $locationId)
  allowsMailDelivery
  allowsDelivery
  availablePickupDays(locationId: $locationId) {
    date
    cutoffTimestamp
    pickupTimes {
      time
      cutoffTimestamp
      __typename
    }
    __typename
  }
  availableDispatchDays(locationId: $locationId) {
    date
    cutoffTimestamp
    __typename
  }
  availableWeekdays(locationId: $locationId) {
    date
    cutoffTimestamp
    __typename
  }
  hasContactMethod(locationId: $locationId)
  hasShopExperience(locationId: $locationId)
  orderingDays
  company {
    id
    name
    whiteLabel
    hasActivePaymentMethods
    members @include(if: $isStandingOrderFlow) {
      id
      email
      name
      __typename
    }
    __typename
  }
  cutoffTimeString
  lastOrderedProductIds(location_id: $locationId)
  info
  locations(filterByID: $locationId) {
    id
    name
    nameWithCompany
    address
    streetAddress2
    city
    state
    zip
    locationshiptoaddresses {
      id
      asString
      __typename
    }
    __typename
  }
  vendor {
    id
    name
    isCutDryDirect
    catalogDisabled
    createOGDisabled
    payEnabled
    activeLocations {
      id
      name
      __typename
    }
    salespeople {
      id
      name
      allLocations
      locations {
        id
        __typename
      }
      __typename
    }
    hideSubstitutions
    verifiedvendor {
      id
      name
      operatorPortalName
      dateTerm
      allowsPickup
      allowsPickupSupplierPortalOnly
      manufacturerRebatesEnabled
      defaultFilters {
        queryStringKey
        filterOptions
        __typename
      }
      isQBIntegrated
      isScraperIntegrated
      isInstantScraperEnabled
      catalogViewType
      nestedCategoryEnabled
      filtersEnabled
      logoURL
      allowsOrderingDiscontinued
      autoCategorizeEnabled
      catalogLandingPageActive
      thumbnail
      catalogHomePageEnabled
      whiteLabel
      hardHoldMessage
      popularCategories {
        id
        name
        __typename
      }
      showDeliveryDateInOg
      showOnlyCatchWeightPriceInOrderFlow
      showProductSizeDescriptionInSubs
      showHeroImage
      showFeaturedItems
      showOnSaleItems
      showHeroImage
      showSmallerImages
      showFeaturedItems
      showOnSaleItems
      catalogHeroImage
      catalogSmallerImage1
      catalogSmallerImage2
      catalogMobileHeroImage
      catalogHeroImageUrl
      catalogSmallerImage1Url
      catalogSmallerImage2Url
      showStocksInPortal
      showPriceWithAvg
      showStocksInOp
      showCostInPortal
      uomWiseStocksEnabled
      uomWiseCostEnabled
      showMarginInPortal
      spotPricingEnabled
      cartSummaryVolumeEnabled
      cartSummaryWeightEnabled
      sendSpotPriceUpdatesEnabled
      lowStockMargin
      fetchOGPricesFromPricingServiceEnabled
      dateBasedPricingEnabled
      showDeliveryDateBasedJitCutoffs
      bepRebatesActive
      allowsRebates
      showPayBannerOnOrderConfirmation
      catalogSortIndex
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      supplierportalvendordata {
        id
        portalOverridesOrderMins
        splitWeightsActive
        sameDayDeliveryOffsetSeconds
        showLocationWisePricesForSubstitutes
        showSubstitutionsModalInPortal
        showItemLevelInstructionsInPortal
        showItemLevelInstructionsInOperator
        itemLevelInstructionLimit
        multipleShipTosEnabled
        chunkCountWaitLimit
        ogPageSize
        ogFirstPageSize
        defaultViewAsCustomer
        disableItemDeletesAndSubtractsForOrderEdits
        disableItemDeletesAndSubtractsForOrderEditsInPortal
        pickupTimeSelectEnabled
        showMemoCodeInOperatorPortal
        showMemoCodeInSupplierPortal
        multiCartEnabled
        avoidDefaultCaseStyling
        catalogInfoOnlyViewIfOnOG
        catalogInfoOnlyViewMessage
        totalCostMarginEnabled
        showOrderSummary
        disableDeliveryDateChangeForOrderEditsInOp
        disableDeliveryDateChangeForOrderEditsInPortal
        disableDeliveryDateChangeWarningMessage
        showLastOrderedPrice
        showLastOrderedPriceInPortal
        useTotalCostForMarginValidation
        showUnitPriceAsMainPriceInCatalog
        showCalculatedSecondaryPriceInCatalog
        persistsItemLevelInstructions
        hideZeroStockLabelInOP
        hideOutOfStockLabelInSP
        showUnavailableInsteadOfOutOfStock
        poundSpotPricingEnabled
        disableOrderingOutOfStockProductsWithoutSubstitutes
        checkForZeroPricedItems
        showLastOrderedPoundPrice
        preserveCartItemOrder
        validateMarginInPortal
        disableEditingPoundQuantity
        blockPartialQuantityOrdering
        blockPartialQuantityOrderingInOperatorPortal
        accountHoldAlertsEnabled
        hideCatchWeightUnitPriceInCatalog
        showDistributionCentreLabels
        offlineOrderingEnabled
        catalogOnlyOrderFlowEnabled
        dateBasedPricingBannerDisabled
        showPurchaseHistory
        quickAddViewEnabledStatus
        simpleListViewEnabledStatus
        enabledLargeProductTiles
        enabledAdditionalDescriptions
        enabledTiHiPalletDetails
        __typename
      }
      restrictPriceChangesBelowMinimumPriceEnabled
      splitSpecialOrders
      sortOGByItemCode
      showCaseDiscountsDisclaimerMessage
      disableOrderingZeroPricedItems
      disableOrderingSpecialOrderItems
      __typename
    }
    shipdirectverifiedvendor {
      id
      shippingFeeWaived
      shippingFeeWaivedUntil
      firstOrderDiscounted
      firstOrderDiscount
      firstOrderDiscountMaxCap
      thumbnail
      shipDirectLandingPageActive
      catalogHeroImage
      catalogMobileHeroImage
      __typename
    }
    integrationDataForLocation(locationId: $locationId) {
      id
      customerNumber
      taxRate
      isAccountOnHold
      deliveryDaysNote
      accountHoldCode
      isPONumberRequired
      updatePoNumberWithOgName(isStandingOrderFlow: $isStandingOrderFlow)
      __typename
    }
    orderingStatus
    __typename
  }
  userData {
    id
    collapsedsections {
      id
      __typename
    }
    __typename
  }
  accountingcategory {
    id
    __typename
  }
  productSamples(locationId: $locationId) {
    ...ProductSampleForOrderFragment
    __typename
  }
  shipDirectEnabled
  shipdirectvendors {
    id
    verifiedvendor {
      id
      __typename
    }
    __typename
  }
  isMergeOrdersOk
  __typename
}

fragment ProductSampleForOrderFragment on ManufacturerProductSample {
  id
  unit
  priceAmount {
    money
    float
    __typename
  }
  canonicalproduct {
    id
    description
    itemCode
    normalizedItemCode
    multiCartEnabled
    shipDirect
    thumbnail {
      id
      url
      is360
      __typename
    }
    distributioncentres {
      id
      code
      __typename
    }
    __typename
  }
  __typename
}

fragment FormSectionFragment on FormSection {
  id
  stringID
  title
  placeholder
  updated
  multiUnitProducts(
    showHiddenItems: $showHiddenItems
    skipLocationPrivacy: $skipLocationPrivacy
    offset: $offset
    limit: $limit
    useElasticSearch: $useElasticSearch
  ) {
    ...MultiUnitProductForOrderFragment
    __typename
  }
  __typename
}

fragment MultiUnitProductForOrderFragment on MultiUnitProduct {
  id
  multiUnitGroupingId
  itemCode
  name
  updated
  taxable
  sectionItemSequence
  products {
    id
    name
    archived(locationId: $locationId)
    itemCode
    shipDirect
    instructionText
    price(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      cents
      __typename
    }
    minimumPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    minimumPoundPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    adjustedPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
      float
      money
      __typename
    }
    earliestDeliveryDate(locationId: $locationId, deliveryDate: $deliveryDate)
    rebateAmount {
      money
      cents
      __typename
    }
    productNotes(locationId: $locationId)
    precut
    prioritizePoundPriceInOG(locationId: $locationId)
    poundPrice(locationId: $locationId, deliveryDate: $deliveryDate)
    unit
    abbreviatedUnit
    par
    lastOrderedLabel(locationId: $locationId)
    lastOrderTimeAndQuantity(locationId: $locationId) {
      quantity
      lastOrderedTime
      uom
      daysAgo
      price
      poundPrice
      __typename
    }
    showDiscontinued
    isOutOfStock
    isUnavailable
    canonicalproduct {
      id
      itemCode
      normalizedItemCode
      description
      pack
      consumerCategory
      discontinued(locationId: $locationId)
      quickbooksRefID
      syncedWithQB
      shipDirect
      specialOrder
      jitItem
      DWOItem
      brandName
      unavailable
      isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
      stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
      productNotes(locationId: $locationId)
      displayManufacturerProductDetails
      gtin
      nameWithoutBrand
      normalizedUoms
      supplierOrderOnly(locationId: $locationId)
      onSale(locationId: $locationId, deliveryDate: $deliveryDate)
      separateDirectShip
      isCatchWeight
      netWeight
      volume
      isGPOForCustomer(locationId: $locationId)
      brokenCaseItem
      currentStocks(locationId: $locationId) {
        uom
        value
        __typename
      }
      quantityOnOrder {
        uom
        value
        __typename
      }
      committedQuantity {
        uom
        value
        __typename
      }
      nextPOQuantity {
        uom
        value
        __typename
      }
      nextPODate {
        uom
        value
        __typename
      }
      salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        value
        float
        __typename
      }
      totalCost {
        uom
        value
        float
        __typename
      }
      salesMargin {
        uom
        value
        float
        __typename
      }
      markedAsNew
      BEPRebatesEnabled
      ...RebateConfigsFragment
      cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
      specialItem
      forceShowSubstitutes(locationId: $locationId)
      markedUpPrice(locationId: $locationId, deliveryDate: $deliveryDate) {
        uom
        type
        value
        __typename
      }
      multiCartEnabled
      distributioncentres {
        id
        name
        code
        textColor
        backgroundColor
        __typename
      }
      l0category {
        id
        name
        __typename
      }
      l1category {
        id
        name
        __typename
      }
      l2category {
        id
        name
        __typename
      }
      l3category {
        id
        name
        __typename
      }
      l4category {
        id
        name
        __typename
      }
      packSize
      thumbnail {
        id
        url
        is360
        category
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      primaryImage {
        id
        url
        __typename
      }
      productShopDataForStore {
        id
        sizeDescription
        onSale(locationId: $locationId, deliveryDate: $deliveryDate)
        shopifyName
        unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
          unit
          billedUnit
          billedPrice {
            float
            money
            __typename
          }
          price {
            float
            money
            __typename
          }
          __typename
        }
        productsubcategories {
          id
          name
          productcategory {
            id
            name
            __typename
          }
          __typename
        }
        __typename
      }
      allowsItemLevelInstructions
      activeSubstitutions(locationId: $locationId) {
        id
        itemCode
        normalizedItemCode
        shopifyName
        description
        normalizedUoms
        pack
        activeAdCard {
          id
          __typename
        }
        manufacturer {
          id
          name
          __typename
        }
        productbrand {
          id
          displayName
          __typename
        }
        unitPriceEstimates {
          unit
          price {
            float
            money
            __typename
          }
          __typename
        }
        thumbnail {
          id
          url
          __typename
        }
        primaryImage {
          id
          url
          __typename
        }
        productShopDataForStore {
          id
          sizeDescription
          unitPrices(locationId: $locationId, deliveryDate: $deliveryDate) {
            unit
            price {
              float
              money
              __typename
            }
            billedUnit
            billedPrice {
              float
              money
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      verifiedvendor {
        id
        name
        allowsRebates
        supplierportalvendordata {
          id
          showCalculatedSecondaryPriceInCatalog
          __typename
        }
        whiteLabel
        showStocksInPortal
        showStocksInOp
        showCostInPortal
        uomWiseStocksEnabled
        uomWiseCostEnabled
        showMarginInPortal
        lowStockMargin
        maxSalesMargin
        minSalesMargin
        spotPricingEnabled
        poundSpotPricingEnabled
        sendSpotPriceUpdatesEnabled
        restrictPriceChangesBelowMinimumPriceEnabled
        showOnlyCatchWeightPriceInOrderFlow
        hideInventoryForJitAndSpecialOrderItems
        showPriceWithAvg
        hideZeroPrice
        catalogDefaultUnit
        __typename
      }
      manufacturerproduct {
        id
        productbrand {
          id
          displayName
          __typename
        }
        __typename
      }
      manufacturer {
        id
        name
        __typename
      }
      productbrand {
        id
        displayName
        __typename
      }
      searchKeywords
      ...CanonicalProductDimensionsFragment
      packSizePerUom {
        uom
        packSize
        __typename
      }
      buyersName
      __typename
    }
    doNotSub
    defaultsubstitution {
      id
      __typename
    }
    eligibleForSwitchCashback
    locations {
      id
      __typename
    }
    __typename
  }
  defaultUnit
  __typename
}

fragment CanonicalProductDimensionsFragment on CanonicalProduct {
  gtin
  itemsPerPack
  packsPerCase
  totalItems
  itemSizeType
  itemSizeValue
  itemSizeUOM
  dimensionDetail
  dimensionNotes
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;isStandingOrderFlow&quot;:false,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;sortView&quot;:null,&quot;offset&quot;:0,&quot;limit&quot;:15,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;,&quot;useElasticSearch&quot;:true,&quot;sectionId&quot;:null,&quot;sectionCategoryId&quot;:null}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566610707&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">f4d01fbfa91e67f9262df64b3a278a4c1f672f6564b52258dd2c0131061615e11752081325</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-640 [SuggestiveSalesConfigQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SuggestiveSalesConfigQuery&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;SalesRepTopPicks&quot;,&quot;configId&quot;:&quot;103430762&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;},&quot;query&quot;:&quot;query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {\n  suggestiveSalesConfig(\n    verifiedVendorId: $verifiedVendorId\n    configType: $configType\n    configId: $configId\n  ) {\n    id\n    name\n    suggestedItems(locationId: $locationId) {\n      ...ConsumerCanonicalProductFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ConsumerCanonicalProductFragment on CanonicalProduct {\n  ...CanonicalProductForShopLargeListQuery\n  ...RebateConfigsFragment\n  productShopDataForStore {\n    id\n    productsubcategories {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    __typename\n  }\n  displayManufacturerProductDetails\n  productbrand {\n    id\n    displayName\n    __typename\n  }\n  earliestDeliveryDate(locationId: $locationId)\n  manufacturerproduct {\n    id\n    manufacturer {\n      id\n      name\n      websiteUrl\n      __typename\n    }\n    productbrand {\n      id\n      displayName\n      __typename\n    }\n    primaryImage {\n      id\n      url\n      is360\n      category\n      __typename\n    }\n    __typename\n  }\n  supplierOrderOnly(locationId: $locationId)\n  __typename\n}\n\nfragment CanonicalProductForShopLargeListQuery on CanonicalProduct {\n  ...CanonicalProductForLargeList\n  productShopDataForStore {\n    ...ProductShopDataForLargeList\n    __typename\n  }\n  __typename\n}\n\nfragment CanonicalProductForLargeList on CanonicalProduct {\n  id\n  isAddedToOG(formId: $formId, locationId: $locationId)\n  description\n  additionalDescriptions\n  tiHi\n  name\n  nameWithoutBrand\n  itemCode\n  normalizedItemCode\n  uoms\n  normalizedUoms\n  gtin\n  separateDirectShip\n  multiCartEnabled\n  shipDirect\n  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n  isProductInOrderGuide(locationId: $locationId)\n  currentStocks(locationId: $locationId) {\n    uom\n    value\n    __typename\n  }\n  quantityOnOrder {\n    uom\n    value\n    __typename\n  }\n  committedQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPOQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPODate {\n    uom\n    value\n    __typename\n  }\n  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n    uom\n    value\n    float\n    __typename\n  }\n  totalCost {\n    uom\n    value\n    float\n    __typename\n  }\n  distributioncentres {\n    id\n    name\n    code\n    textColor\n    backgroundColor\n    __typename\n  }\n  l0category {\n    id\n    name\n    __typename\n  }\n  l1category {\n    id\n    name\n    displayName\n    __typename\n  }\n  l2category {\n    id\n    name\n    __typename\n  }\n  l3category {\n    id\n    name\n    __typename\n  }\n  l4category {\n    id\n    name\n    __typename\n  }\n  manufacturer {\n    id\n    name\n    __typename\n  }\n  shopifyUOM\n  productNotes(locationId: $locationId)\n  consumerWeight\n  consumerWeightVisible\n  consumerWeightUOM\n  employeeOnly\n  consumerStockCount\n  consumerItemCount\n  consumerItemCountUOM\n  consumerSubcategory\n  displayManufacturerProductDetails\n  productcategory {\n    id\n    name\n    __typename\n  }\n  itemSize\n  itemSizeUOM\n  itemSizeValue\n  itemsPerPack\n  packSize\n  pack\n  packsPerCase\n  size\n  markedAsNew\n  unavailable\n  allowsItemLevelInstructions\n  discontinued(locationId: $locationId)\n  isCatchWeight\n  consumerPerWeightPrice {\n    float\n    money\n    __typename\n  }\n  markedUpPrice(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n  ) {\n    uom\n    price {\n      float\n      money\n      __typename\n    }\n    type\n    value\n    __typename\n  }\n  activeSubstitutions(locationId: $locationId) {\n    id\n    __typename\n  }\n  verifiedvendor {\n    id\n    name\n    logoURL\n    catalogPlaceholder\n    shipDirectSupplier\n    hideZeroPrice\n    catalogDefaultUnit\n    allowsOrderingDiscontinued\n    allowsRebates\n    whiteLabel\n    showStocksInPortal\n    showStocksInOp\n    showCostInPortal\n    showPriceWithAvg\n    uomWiseStocksEnabled\n    uomWiseCostEnabled\n    lowStockMargin\n    showOnlyCatchWeightPriceInOrderFlow\n    hideInventoryForJitAndSpecialOrderItems\n    disableOrderingZeroPricedItems\n    disableOrderingSpecialOrderItems\n    __typename\n  }\n  thumbnail {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  activeAdCard {\n    id\n    __typename\n  }\n  createdTimestamp\n  updated\n  activeDate\n  inactiveDate\n  preOrderable\n  deliveryDays\n  specialOrder\n  jitItem\n  DWOItem\n  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n  BEPRebatesEnabled\n  specialItem\n  packSizePerUom {\n    uom\n    packSize\n    __typename\n  }\n  isGPOForCustomer(locationId: $locationId)\n  buyersName\n  brokenCaseItem\n  __typename\n}\n\nfragment ProductShopDataForLargeList on ProductShopData {\n  id\n  active\n  hidden\n  consumerManualOrdering\n  sizeDescription\n  onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n  discountPercentage\n  consumerPrice(locationId: $locationId) {\n    float\n    money\n    __typename\n  }\n  shopifyName\n  storageType\n  productdescriptiontags {\n    id\n    name\n    visible\n    __typename\n  }\n  productimages {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  hidePrice\n  unitPrices(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    deliveryDate: $deliveryDate\n  ) {\n    unit\n    price {\n      float\n      money\n      cents\n      __typename\n    }\n    billedUnit\n    billedPrice {\n      float\n      money\n      cents\n      __typename\n    }\n    __typename\n  }\n  productsubcategories {\n    id\n    name\n    productcategory {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SuggestiveSalesConfigQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {
  suggestiveSalesConfig(
    verifiedVendorId: $verifiedVendorId
    configType: $configType
    configId: $configId
  ) {
    id
    name
    suggestedItems(locationId: $locationId) {
      ...ConsumerCanonicalProductFragment
      __typename
    }
    __typename
  }
}

fragment ConsumerCanonicalProductFragment on CanonicalProduct {
  ...CanonicalProductForShopLargeListQuery
  ...RebateConfigsFragment
  productShopDataForStore {
    id
    productsubcategories {
      id
      name
      sortIndex
      __typename
    }
    __typename
  }
  displayManufacturerProductDetails
  productbrand {
    id
    displayName
    __typename
  }
  earliestDeliveryDate(locationId: $locationId)
  manufacturerproduct {
    id
    manufacturer {
      id
      name
      websiteUrl
      __typename
    }
    productbrand {
      id
      displayName
      __typename
    }
    primaryImage {
      id
      url
      is360
      category
      __typename
    }
    __typename
  }
  supplierOrderOnly(locationId: $locationId)
  __typename
}

fragment CanonicalProductForShopLargeListQuery on CanonicalProduct {
  ...CanonicalProductForLargeList
  productShopDataForStore {
    ...ProductShopDataForLargeList
    __typename
  }
  __typename
}

fragment CanonicalProductForLargeList on CanonicalProduct {
  id
  isAddedToOG(formId: $formId, locationId: $locationId)
  description
  additionalDescriptions
  tiHi
  name
  nameWithoutBrand
  itemCode
  normalizedItemCode
  uoms
  normalizedUoms
  gtin
  separateDirectShip
  multiCartEnabled
  shipDirect
  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
  isProductInOrderGuide(locationId: $locationId)
  currentStocks(locationId: $locationId) {
    uom
    value
    __typename
  }
  quantityOnOrder {
    uom
    value
    __typename
  }
  committedQuantity {
    uom
    value
    __typename
  }
  nextPOQuantity {
    uom
    value
    __typename
  }
  nextPODate {
    uom
    value
    __typename
  }
  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
    uom
    value
    float
    __typename
  }
  totalCost {
    uom
    value
    float
    __typename
  }
  distributioncentres {
    id
    name
    code
    textColor
    backgroundColor
    __typename
  }
  l0category {
    id
    name
    __typename
  }
  l1category {
    id
    name
    displayName
    __typename
  }
  l2category {
    id
    name
    __typename
  }
  l3category {
    id
    name
    __typename
  }
  l4category {
    id
    name
    __typename
  }
  manufacturer {
    id
    name
    __typename
  }
  shopifyUOM
  productNotes(locationId: $locationId)
  consumerWeight
  consumerWeightVisible
  consumerWeightUOM
  employeeOnly
  consumerStockCount
  consumerItemCount
  consumerItemCountUOM
  consumerSubcategory
  displayManufacturerProductDetails
  productcategory {
    id
    name
    __typename
  }
  itemSize
  itemSizeUOM
  itemSizeValue
  itemsPerPack
  packSize
  pack
  packsPerCase
  size
  markedAsNew
  unavailable
  allowsItemLevelInstructions
  discontinued(locationId: $locationId)
  isCatchWeight
  consumerPerWeightPrice {
    float
    money
    __typename
  }
  markedUpPrice(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
  ) {
    uom
    price {
      float
      money
      __typename
    }
    type
    value
    __typename
  }
  activeSubstitutions(locationId: $locationId) {
    id
    __typename
  }
  verifiedvendor {
    id
    name
    logoURL
    catalogPlaceholder
    shipDirectSupplier
    hideZeroPrice
    catalogDefaultUnit
    allowsOrderingDiscontinued
    allowsRebates
    whiteLabel
    showStocksInPortal
    showStocksInOp
    showCostInPortal
    showPriceWithAvg
    uomWiseStocksEnabled
    uomWiseCostEnabled
    lowStockMargin
    showOnlyCatchWeightPriceInOrderFlow
    hideInventoryForJitAndSpecialOrderItems
    disableOrderingZeroPricedItems
    disableOrderingSpecialOrderItems
    __typename
  }
  thumbnail {
    id
    url
    is360
    category
    __typename
  }
  activeAdCard {
    id
    __typename
  }
  createdTimestamp
  updated
  activeDate
  inactiveDate
  preOrderable
  deliveryDays
  specialOrder
  jitItem
  DWOItem
  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
  BEPRebatesEnabled
  specialItem
  packSizePerUom {
    uom
    packSize
    __typename
  }
  isGPOForCustomer(locationId: $locationId)
  buyersName
  brokenCaseItem
  __typename
}

fragment ProductShopDataForLargeList on ProductShopData {
  id
  active
  hidden
  consumerManualOrdering
  sizeDescription
  onSale(locationId: $locationId, deliveryDate: $deliveryDate)
  discountPercentage
  consumerPrice(locationId: $locationId) {
    float
    money
    __typename
  }
  shopifyName
  storageType
  productdescriptiontags {
    id
    name
    visible
    __typename
  }
  productimages {
    id
    url
    is360
    category
    __typename
  }
  hidePrice
  unitPrices(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    deliveryDate: $deliveryDate
  ) {
    unit
    price {
      float
      money
      cents
      __typename
    }
    billedUnit
    billedPrice {
      float
      money
      cents
      __typename
    }
    __typename
  }
  productsubcategories {
    id
    name
    productcategory {
      id
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;SalesRepTopPicks&quot;,&quot;configId&quot;:&quot;103430762&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566610707&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">05c79ebdf7802c8f26202c7d2ed29e0949db6330acd8015d43f5f14b3c1e20f61752081327</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">if (prev.isSuccessful()) {
    props.put(&quot;runThreadGroup2&quot;, &quot;true&quot;)
} else {
    props.put(&quot;runThreadGroup2&quot;, &quot;false&quot;)
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Check Out" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-718 [SupplierDataForCustomersQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SupplierDataForCustomersQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query SupplierDataForCustomersQuery {\n  supplierPortalVerifiedVendor {\n    id\n    name\n    logoURL\n    portalEnabledScraper\n    supplierLiteIntegrated\n    qbCustomerSyncIntegrated\n    qbdShowCreateCustomerInQbdButton\n    salespeopleIdentifiersForSupplierPortal\n    erpPlatform\n    allowUserlessCompanyOrders\n    isQBIntegrated\n    qbCustomerSyncIntegrated\n    qboEnabled\n    supplierportalvendordata {\n      id\n      catalogOnlyOrderFlowEnabled\n      emailCustomerExportReport\n      emailOrderGuideExportReport\n      modules\n      __typename\n    }\n    customerGroupEditEnabled\n    multipleCustomerGroupsAllowed\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SupplierDataForCustomersQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SupplierDataForCustomersQuery {
  supplierPortalVerifiedVendor {
    id
    name
    logoURL
    portalEnabledScraper
    supplierLiteIntegrated
    qbCustomerSyncIntegrated
    qbdShowCreateCustomerInQbdButton
    salespeopleIdentifiersForSupplierPortal
    erpPlatform
    allowUserlessCompanyOrders
    isQBIntegrated
    qbCustomerSyncIntegrated
    qboEnabled
    supplierportalvendordata {
      id
      catalogOnlyOrderFlowEnabled
      emailCustomerExportReport
      emailOrderGuideExportReport
      modules
      __typename
    }
    customerGroupEditEnabled
    multipleCustomerGroupsAllowed
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">115d565b64aff109ca9be63b85b222ae62b39953ab3f859b1c631796e77bc2351752081723</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-719 [SupplierPortalCustomersWithSearchQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SupplierPortalCustomersWithSearchQuery&quot;,&quot;variables&quot;:{&quot;limit&quot;:50,&quot;offset&quot;:0,&quot;sortBy&quot;:&quot;customerName&quot;,&quot;sortDirection&quot;:&quot;asc&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;signUpStatus&quot;:null,&quot;contactStatus&quot;:null,&quot;ogStatus&quot;:null,&quot;lastOrderedFilter&quot;:null,&quot;notOrderedInFilter&quot;:null,&quot;tags&quot;:[],&quot;customerActiveStatus&quot;:true,&quot;chainStatus&quot;:null,&quot;customerRestriction&quot;:null,&quot;syncStatus&quot;:null,&quot;allowsRebates&quot;:null,&quot;accountHoldCode&quot;:null,&quot;customerGroupIds&quot;:[]},&quot;query&quot;:&quot;query SupplierPortalCustomersWithSearchQuery($limit: Int, $offset: Int, $sortBy: String, $sortDirection: String, $searchString: String, $salespeople: [String], $signUpStatus: String, $contactStatus: Boolean, $ogStatus: Boolean, $lastOrderedFilter: String, $notOrderedInFilter: String, $tags: [String], $customerActiveStatus: Boolean, $chainStatus: Boolean, $customerRestriction: Boolean, $syncStatus: Boolean, $deliveryDays: [String], $boostCategories: [String], $nextDeliveryDateTimestamp: Int, $isAccount: Boolean, $allowsRebates: Boolean, $accountHoldCode: Int, $customerGroupIds: [ID]) {\n  supplierPortalCustomers(\n    limit: $limit\n    offset: $offset\n    sortBy: $sortBy\n    sortDirection: $sortDirection\n    searchString: $searchString\n    salespeople: $salespeople\n    signUpStatus: $signUpStatus\n    contactStatus: $contactStatus\n    ogStatus: $ogStatus\n    lastOrderedFilter: $lastOrderedFilter\n    notOrderedInFilter: $notOrderedInFilter\n    tags: $tags\n    customerActiveStatus: $customerActiveStatus\n    chainStatus: $chainStatus\n    customerRestriction: $customerRestriction\n    syncStatus: $syncStatus\n    deliveryDays: $deliveryDays\n    boostCategories: $boostCategories\n    nextDeliveryDateTimestamp: $nextDeliveryDateTimestamp\n    isAccount: $isAccount\n    allowsRebates: $allowsRebates\n    accountHoldCode: $accountHoldCode\n    customerGroupIds: $customerGroupIds\n  ) {\n    customers {\n      id\n      integrationID\n      customerRecordID\n      customerName\n      customerCode\n      companyName\n      locationName\n      isAccount\n      salespeople\n      vendorID\n      companyID\n      locationID\n      formID\n      portalEnabledScraperIntegrationStatus\n      hasContactInfo\n      erpCustomerID\n      supplierUserSignedUpStatus\n      lastOrderedTimestamp\n      isRecordOrCompleteIntegration\n      allowsRebates\n      customerStatusType\n      __typename\n    }\n    count\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SupplierPortalCustomersWithSearchQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SupplierPortalCustomersWithSearchQuery($limit: Int, $offset: Int, $sortBy: String, $sortDirection: String, $searchString: String, $salespeople: [String], $signUpStatus: String, $contactStatus: Boolean, $ogStatus: Boolean, $lastOrderedFilter: String, $notOrderedInFilter: String, $tags: [String], $customerActiveStatus: Boolean, $chainStatus: Boolean, $customerRestriction: Boolean, $syncStatus: Boolean, $deliveryDays: [String], $boostCategories: [String], $nextDeliveryDateTimestamp: Int, $isAccount: Boolean, $allowsRebates: Boolean, $accountHoldCode: Int, $customerGroupIds: [ID]) {
  supplierPortalCustomers(
    limit: $limit
    offset: $offset
    sortBy: $sortBy
    sortDirection: $sortDirection
    searchString: $searchString
    salespeople: $salespeople
    signUpStatus: $signUpStatus
    contactStatus: $contactStatus
    ogStatus: $ogStatus
    lastOrderedFilter: $lastOrderedFilter
    notOrderedInFilter: $notOrderedInFilter
    tags: $tags
    customerActiveStatus: $customerActiveStatus
    chainStatus: $chainStatus
    customerRestriction: $customerRestriction
    syncStatus: $syncStatus
    deliveryDays: $deliveryDays
    boostCategories: $boostCategories
    nextDeliveryDateTimestamp: $nextDeliveryDateTimestamp
    isAccount: $isAccount
    allowsRebates: $allowsRebates
    accountHoldCode: $accountHoldCode
    customerGroupIds: $customerGroupIds
  ) {
    customers {
      id
      integrationID
      customerRecordID
      customerName
      customerCode
      companyName
      locationName
      isAccount
      salespeople
      vendorID
      companyID
      locationID
      formID
      portalEnabledScraperIntegrationStatus
      hasContactInfo
      erpCustomerID
      supplierUserSignedUpStatus
      lastOrderedTimestamp
      isRecordOrCompleteIntegration
      allowsRebates
      customerStatusType
      __typename
    }
    count
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;limit&quot;:50,&quot;offset&quot;:0,&quot;sortBy&quot;:&quot;customerName&quot;,&quot;sortDirection&quot;:&quot;asc&quot;,&quot;searchString&quot;:&quot;&quot;,&quot;signUpStatus&quot;:null,&quot;contactStatus&quot;:null,&quot;ogStatus&quot;:null,&quot;lastOrderedFilter&quot;:null,&quot;notOrderedInFilter&quot;:null,&quot;tags&quot;:[],&quot;customerActiveStatus&quot;:true,&quot;chainStatus&quot;:null,&quot;customerRestriction&quot;:null,&quot;syncStatus&quot;:null,&quot;allowsRebates&quot;:null,&quot;accountHoldCode&quot;:null,&quot;customerGroupIds&quot;:[]}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">115d565b64aff109ca9be63b85b222ae62b39953ab3f859b1c631796e77bc2351752081723</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-727 [SuggestiveSalesConfigQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SuggestiveSalesConfigQuery&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;SupplierTopPicks&quot;,&quot;configId&quot;:&quot;46017666&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;},&quot;query&quot;:&quot;query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {\n  suggestiveSalesConfig(\n    verifiedVendorId: $verifiedVendorId\n    configType: $configType\n    configId: $configId\n  ) {\n    id\n    name\n    suggestedItems(locationId: $locationId) {\n      ...ConsumerCanonicalProductFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ConsumerCanonicalProductFragment on CanonicalProduct {\n  ...CanonicalProductForShopLargeListQuery\n  ...RebateConfigsFragment\n  productShopDataForStore {\n    id\n    productsubcategories {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    __typename\n  }\n  displayManufacturerProductDetails\n  productbrand {\n    id\n    displayName\n    __typename\n  }\n  earliestDeliveryDate(locationId: $locationId)\n  manufacturerproduct {\n    id\n    manufacturer {\n      id\n      name\n      websiteUrl\n      __typename\n    }\n    productbrand {\n      id\n      displayName\n      __typename\n    }\n    primaryImage {\n      id\n      url\n      is360\n      category\n      __typename\n    }\n    __typename\n  }\n  supplierOrderOnly(locationId: $locationId)\n  __typename\n}\n\nfragment CanonicalProductForShopLargeListQuery on CanonicalProduct {\n  ...CanonicalProductForLargeList\n  productShopDataForStore {\n    ...ProductShopDataForLargeList\n    __typename\n  }\n  __typename\n}\n\nfragment CanonicalProductForLargeList on CanonicalProduct {\n  id\n  isAddedToOG(formId: $formId, locationId: $locationId)\n  description\n  additionalDescriptions\n  tiHi\n  name\n  nameWithoutBrand\n  itemCode\n  normalizedItemCode\n  uoms\n  normalizedUoms\n  gtin\n  separateDirectShip\n  multiCartEnabled\n  shipDirect\n  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n  isProductInOrderGuide(locationId: $locationId)\n  currentStocks(locationId: $locationId) {\n    uom\n    value\n    __typename\n  }\n  quantityOnOrder {\n    uom\n    value\n    __typename\n  }\n  committedQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPOQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPODate {\n    uom\n    value\n    __typename\n  }\n  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n    uom\n    value\n    float\n    __typename\n  }\n  totalCost {\n    uom\n    value\n    float\n    __typename\n  }\n  distributioncentres {\n    id\n    name\n    code\n    textColor\n    backgroundColor\n    __typename\n  }\n  l0category {\n    id\n    name\n    __typename\n  }\n  l1category {\n    id\n    name\n    displayName\n    __typename\n  }\n  l2category {\n    id\n    name\n    __typename\n  }\n  l3category {\n    id\n    name\n    __typename\n  }\n  l4category {\n    id\n    name\n    __typename\n  }\n  manufacturer {\n    id\n    name\n    __typename\n  }\n  shopifyUOM\n  productNotes(locationId: $locationId)\n  consumerWeight\n  consumerWeightVisible\n  consumerWeightUOM\n  employeeOnly\n  consumerStockCount\n  consumerItemCount\n  consumerItemCountUOM\n  consumerSubcategory\n  displayManufacturerProductDetails\n  productcategory {\n    id\n    name\n    __typename\n  }\n  itemSize\n  itemSizeUOM\n  itemSizeValue\n  itemsPerPack\n  packSize\n  pack\n  packsPerCase\n  size\n  markedAsNew\n  unavailable\n  allowsItemLevelInstructions\n  discontinued(locationId: $locationId)\n  isCatchWeight\n  consumerPerWeightPrice {\n    float\n    money\n    __typename\n  }\n  markedUpPrice(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n  ) {\n    uom\n    price {\n      float\n      money\n      __typename\n    }\n    type\n    value\n    __typename\n  }\n  activeSubstitutions(locationId: $locationId) {\n    id\n    __typename\n  }\n  verifiedvendor {\n    id\n    name\n    logoURL\n    catalogPlaceholder\n    shipDirectSupplier\n    hideZeroPrice\n    catalogDefaultUnit\n    allowsOrderingDiscontinued\n    allowsRebates\n    whiteLabel\n    showStocksInPortal\n    showStocksInOp\n    showCostInPortal\n    showPriceWithAvg\n    uomWiseStocksEnabled\n    uomWiseCostEnabled\n    lowStockMargin\n    showOnlyCatchWeightPriceInOrderFlow\n    hideInventoryForJitAndSpecialOrderItems\n    disableOrderingZeroPricedItems\n    disableOrderingSpecialOrderItems\n    __typename\n  }\n  thumbnail {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  activeAdCard {\n    id\n    __typename\n  }\n  createdTimestamp\n  updated\n  activeDate\n  inactiveDate\n  preOrderable\n  deliveryDays\n  specialOrder\n  jitItem\n  DWOItem\n  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n  BEPRebatesEnabled\n  specialItem\n  packSizePerUom {\n    uom\n    packSize\n    __typename\n  }\n  isGPOForCustomer(locationId: $locationId)\n  buyersName\n  brokenCaseItem\n  __typename\n}\n\nfragment ProductShopDataForLargeList on ProductShopData {\n  id\n  active\n  hidden\n  consumerManualOrdering\n  sizeDescription\n  onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n  discountPercentage\n  consumerPrice(locationId: $locationId) {\n    float\n    money\n    __typename\n  }\n  shopifyName\n  storageType\n  productdescriptiontags {\n    id\n    name\n    visible\n    __typename\n  }\n  productimages {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  hidePrice\n  unitPrices(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    deliveryDate: $deliveryDate\n  ) {\n    unit\n    price {\n      float\n      money\n      cents\n      __typename\n    }\n    billedUnit\n    billedPrice {\n      float\n      money\n      cents\n      __typename\n    }\n    __typename\n  }\n  productsubcategories {\n    id\n    name\n    productcategory {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SuggestiveSalesConfigQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {
  suggestiveSalesConfig(
    verifiedVendorId: $verifiedVendorId
    configType: $configType
    configId: $configId
  ) {
    id
    name
    suggestedItems(locationId: $locationId) {
      ...ConsumerCanonicalProductFragment
      __typename
    }
    __typename
  }
}

fragment ConsumerCanonicalProductFragment on CanonicalProduct {
  ...CanonicalProductForShopLargeListQuery
  ...RebateConfigsFragment
  productShopDataForStore {
    id
    productsubcategories {
      id
      name
      sortIndex
      __typename
    }
    __typename
  }
  displayManufacturerProductDetails
  productbrand {
    id
    displayName
    __typename
  }
  earliestDeliveryDate(locationId: $locationId)
  manufacturerproduct {
    id
    manufacturer {
      id
      name
      websiteUrl
      __typename
    }
    productbrand {
      id
      displayName
      __typename
    }
    primaryImage {
      id
      url
      is360
      category
      __typename
    }
    __typename
  }
  supplierOrderOnly(locationId: $locationId)
  __typename
}

fragment CanonicalProductForShopLargeListQuery on CanonicalProduct {
  ...CanonicalProductForLargeList
  productShopDataForStore {
    ...ProductShopDataForLargeList
    __typename
  }
  __typename
}

fragment CanonicalProductForLargeList on CanonicalProduct {
  id
  isAddedToOG(formId: $formId, locationId: $locationId)
  description
  additionalDescriptions
  tiHi
  name
  nameWithoutBrand
  itemCode
  normalizedItemCode
  uoms
  normalizedUoms
  gtin
  separateDirectShip
  multiCartEnabled
  shipDirect
  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
  isProductInOrderGuide(locationId: $locationId)
  currentStocks(locationId: $locationId) {
    uom
    value
    __typename
  }
  quantityOnOrder {
    uom
    value
    __typename
  }
  committedQuantity {
    uom
    value
    __typename
  }
  nextPOQuantity {
    uom
    value
    __typename
  }
  nextPODate {
    uom
    value
    __typename
  }
  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
    uom
    value
    float
    __typename
  }
  totalCost {
    uom
    value
    float
    __typename
  }
  distributioncentres {
    id
    name
    code
    textColor
    backgroundColor
    __typename
  }
  l0category {
    id
    name
    __typename
  }
  l1category {
    id
    name
    displayName
    __typename
  }
  l2category {
    id
    name
    __typename
  }
  l3category {
    id
    name
    __typename
  }
  l4category {
    id
    name
    __typename
  }
  manufacturer {
    id
    name
    __typename
  }
  shopifyUOM
  productNotes(locationId: $locationId)
  consumerWeight
  consumerWeightVisible
  consumerWeightUOM
  employeeOnly
  consumerStockCount
  consumerItemCount
  consumerItemCountUOM
  consumerSubcategory
  displayManufacturerProductDetails
  productcategory {
    id
    name
    __typename
  }
  itemSize
  itemSizeUOM
  itemSizeValue
  itemsPerPack
  packSize
  pack
  packsPerCase
  size
  markedAsNew
  unavailable
  allowsItemLevelInstructions
  discontinued(locationId: $locationId)
  isCatchWeight
  consumerPerWeightPrice {
    float
    money
    __typename
  }
  markedUpPrice(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
  ) {
    uom
    price {
      float
      money
      __typename
    }
    type
    value
    __typename
  }
  activeSubstitutions(locationId: $locationId) {
    id
    __typename
  }
  verifiedvendor {
    id
    name
    logoURL
    catalogPlaceholder
    shipDirectSupplier
    hideZeroPrice
    catalogDefaultUnit
    allowsOrderingDiscontinued
    allowsRebates
    whiteLabel
    showStocksInPortal
    showStocksInOp
    showCostInPortal
    showPriceWithAvg
    uomWiseStocksEnabled
    uomWiseCostEnabled
    lowStockMargin
    showOnlyCatchWeightPriceInOrderFlow
    hideInventoryForJitAndSpecialOrderItems
    disableOrderingZeroPricedItems
    disableOrderingSpecialOrderItems
    __typename
  }
  thumbnail {
    id
    url
    is360
    category
    __typename
  }
  activeAdCard {
    id
    __typename
  }
  createdTimestamp
  updated
  activeDate
  inactiveDate
  preOrderable
  deliveryDays
  specialOrder
  jitItem
  DWOItem
  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
  BEPRebatesEnabled
  specialItem
  packSizePerUom {
    uom
    packSize
    __typename
  }
  isGPOForCustomer(locationId: $locationId)
  buyersName
  brokenCaseItem
  __typename
}

fragment ProductShopDataForLargeList on ProductShopData {
  id
  active
  hidden
  consumerManualOrdering
  sizeDescription
  onSale(locationId: $locationId, deliveryDate: $deliveryDate)
  discountPercentage
  consumerPrice(locationId: $locationId) {
    float
    money
    __typename
  }
  shopifyName
  storageType
  productdescriptiontags {
    id
    name
    visible
    __typename
  }
  productimages {
    id
    url
    is360
    category
    __typename
  }
  hidePrice
  unitPrices(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    deliveryDate: $deliveryDate
  ) {
    unit
    price {
      float
      money
      cents
      __typename
    }
    billedUnit
    billedPrice {
      float
      money
      cents
      __typename
    }
    __typename
  }
  productsubcategories {
    id
    name
    productcategory {
      id
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;SupplierTopPicks&quot;,&quot;configId&quot;:&quot;46017666&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566633255&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">00d13216bcbf4f48755d684dfe4119bbad3ddc1453fa7badade5c424b0bd6f161752082738</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-726 [SuggestiveSalesConfigQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SuggestiveSalesConfigQuery&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;DontForget&quot;,&quot;configId&quot;:&quot;103430762&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;},&quot;query&quot;:&quot;query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {\n  suggestiveSalesConfig(\n    verifiedVendorId: $verifiedVendorId\n    configType: $configType\n    configId: $configId\n  ) {\n    id\n    name\n    suggestedItems(locationId: $locationId) {\n      ...ConsumerCanonicalProductFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ConsumerCanonicalProductFragment on CanonicalProduct {\n  ...CanonicalProductForShopLargeListQuery\n  ...RebateConfigsFragment\n  productShopDataForStore {\n    id\n    productsubcategories {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    __typename\n  }\n  displayManufacturerProductDetails\n  productbrand {\n    id\n    displayName\n    __typename\n  }\n  earliestDeliveryDate(locationId: $locationId)\n  manufacturerproduct {\n    id\n    manufacturer {\n      id\n      name\n      websiteUrl\n      __typename\n    }\n    productbrand {\n      id\n      displayName\n      __typename\n    }\n    primaryImage {\n      id\n      url\n      is360\n      category\n      __typename\n    }\n    __typename\n  }\n  supplierOrderOnly(locationId: $locationId)\n  __typename\n}\n\nfragment CanonicalProductForShopLargeListQuery on CanonicalProduct {\n  ...CanonicalProductForLargeList\n  productShopDataForStore {\n    ...ProductShopDataForLargeList\n    __typename\n  }\n  __typename\n}\n\nfragment CanonicalProductForLargeList on CanonicalProduct {\n  id\n  isAddedToOG(formId: $formId, locationId: $locationId)\n  description\n  additionalDescriptions\n  tiHi\n  name\n  nameWithoutBrand\n  itemCode\n  normalizedItemCode\n  uoms\n  normalizedUoms\n  gtin\n  separateDirectShip\n  multiCartEnabled\n  shipDirect\n  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n  isProductInOrderGuide(locationId: $locationId)\n  currentStocks(locationId: $locationId) {\n    uom\n    value\n    __typename\n  }\n  quantityOnOrder {\n    uom\n    value\n    __typename\n  }\n  committedQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPOQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPODate {\n    uom\n    value\n    __typename\n  }\n  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n    uom\n    value\n    float\n    __typename\n  }\n  totalCost {\n    uom\n    value\n    float\n    __typename\n  }\n  distributioncentres {\n    id\n    name\n    code\n    textColor\n    backgroundColor\n    __typename\n  }\n  l0category {\n    id\n    name\n    __typename\n  }\n  l1category {\n    id\n    name\n    displayName\n    __typename\n  }\n  l2category {\n    id\n    name\n    __typename\n  }\n  l3category {\n    id\n    name\n    __typename\n  }\n  l4category {\n    id\n    name\n    __typename\n  }\n  manufacturer {\n    id\n    name\n    __typename\n  }\n  shopifyUOM\n  productNotes(locationId: $locationId)\n  consumerWeight\n  consumerWeightVisible\n  consumerWeightUOM\n  employeeOnly\n  consumerStockCount\n  consumerItemCount\n  consumerItemCountUOM\n  consumerSubcategory\n  displayManufacturerProductDetails\n  productcategory {\n    id\n    name\n    __typename\n  }\n  itemSize\n  itemSizeUOM\n  itemSizeValue\n  itemsPerPack\n  packSize\n  pack\n  packsPerCase\n  size\n  markedAsNew\n  unavailable\n  allowsItemLevelInstructions\n  discontinued(locationId: $locationId)\n  isCatchWeight\n  consumerPerWeightPrice {\n    float\n    money\n    __typename\n  }\n  markedUpPrice(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n  ) {\n    uom\n    price {\n      float\n      money\n      __typename\n    }\n    type\n    value\n    __typename\n  }\n  activeSubstitutions(locationId: $locationId) {\n    id\n    __typename\n  }\n  verifiedvendor {\n    id\n    name\n    logoURL\n    catalogPlaceholder\n    shipDirectSupplier\n    hideZeroPrice\n    catalogDefaultUnit\n    allowsOrderingDiscontinued\n    allowsRebates\n    whiteLabel\n    showStocksInPortal\n    showStocksInOp\n    showCostInPortal\n    showPriceWithAvg\n    uomWiseStocksEnabled\n    uomWiseCostEnabled\n    lowStockMargin\n    showOnlyCatchWeightPriceInOrderFlow\n    hideInventoryForJitAndSpecialOrderItems\n    disableOrderingZeroPricedItems\n    disableOrderingSpecialOrderItems\n    __typename\n  }\n  thumbnail {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  activeAdCard {\n    id\n    __typename\n  }\n  createdTimestamp\n  updated\n  activeDate\n  inactiveDate\n  preOrderable\n  deliveryDays\n  specialOrder\n  jitItem\n  DWOItem\n  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n  BEPRebatesEnabled\n  specialItem\n  packSizePerUom {\n    uom\n    packSize\n    __typename\n  }\n  isGPOForCustomer(locationId: $locationId)\n  buyersName\n  brokenCaseItem\n  __typename\n}\n\nfragment ProductShopDataForLargeList on ProductShopData {\n  id\n  active\n  hidden\n  consumerManualOrdering\n  sizeDescription\n  onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n  discountPercentage\n  consumerPrice(locationId: $locationId) {\n    float\n    money\n    __typename\n  }\n  shopifyName\n  storageType\n  productdescriptiontags {\n    id\n    name\n    visible\n    __typename\n  }\n  productimages {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  hidePrice\n  unitPrices(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    deliveryDate: $deliveryDate\n  ) {\n    unit\n    price {\n      float\n      money\n      cents\n      __typename\n    }\n    billedUnit\n    billedPrice {\n      float\n      money\n      cents\n      __typename\n    }\n    __typename\n  }\n  productsubcategories {\n    id\n    name\n    productcategory {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SuggestiveSalesConfigQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {
  suggestiveSalesConfig(
    verifiedVendorId: $verifiedVendorId
    configType: $configType
    configId: $configId
  ) {
    id
    name
    suggestedItems(locationId: $locationId) {
      ...ConsumerCanonicalProductFragment
      __typename
    }
    __typename
  }
}

fragment ConsumerCanonicalProductFragment on CanonicalProduct {
  ...CanonicalProductForShopLargeListQuery
  ...RebateConfigsFragment
  productShopDataForStore {
    id
    productsubcategories {
      id
      name
      sortIndex
      __typename
    }
    __typename
  }
  displayManufacturerProductDetails
  productbrand {
    id
    displayName
    __typename
  }
  earliestDeliveryDate(locationId: $locationId)
  manufacturerproduct {
    id
    manufacturer {
      id
      name
      websiteUrl
      __typename
    }
    productbrand {
      id
      displayName
      __typename
    }
    primaryImage {
      id
      url
      is360
      category
      __typename
    }
    __typename
  }
  supplierOrderOnly(locationId: $locationId)
  __typename
}

fragment CanonicalProductForShopLargeListQuery on CanonicalProduct {
  ...CanonicalProductForLargeList
  productShopDataForStore {
    ...ProductShopDataForLargeList
    __typename
  }
  __typename
}

fragment CanonicalProductForLargeList on CanonicalProduct {
  id
  isAddedToOG(formId: $formId, locationId: $locationId)
  description
  additionalDescriptions
  tiHi
  name
  nameWithoutBrand
  itemCode
  normalizedItemCode
  uoms
  normalizedUoms
  gtin
  separateDirectShip
  multiCartEnabled
  shipDirect
  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
  isProductInOrderGuide(locationId: $locationId)
  currentStocks(locationId: $locationId) {
    uom
    value
    __typename
  }
  quantityOnOrder {
    uom
    value
    __typename
  }
  committedQuantity {
    uom
    value
    __typename
  }
  nextPOQuantity {
    uom
    value
    __typename
  }
  nextPODate {
    uom
    value
    __typename
  }
  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
    uom
    value
    float
    __typename
  }
  totalCost {
    uom
    value
    float
    __typename
  }
  distributioncentres {
    id
    name
    code
    textColor
    backgroundColor
    __typename
  }
  l0category {
    id
    name
    __typename
  }
  l1category {
    id
    name
    displayName
    __typename
  }
  l2category {
    id
    name
    __typename
  }
  l3category {
    id
    name
    __typename
  }
  l4category {
    id
    name
    __typename
  }
  manufacturer {
    id
    name
    __typename
  }
  shopifyUOM
  productNotes(locationId: $locationId)
  consumerWeight
  consumerWeightVisible
  consumerWeightUOM
  employeeOnly
  consumerStockCount
  consumerItemCount
  consumerItemCountUOM
  consumerSubcategory
  displayManufacturerProductDetails
  productcategory {
    id
    name
    __typename
  }
  itemSize
  itemSizeUOM
  itemSizeValue
  itemsPerPack
  packSize
  pack
  packsPerCase
  size
  markedAsNew
  unavailable
  allowsItemLevelInstructions
  discontinued(locationId: $locationId)
  isCatchWeight
  consumerPerWeightPrice {
    float
    money
    __typename
  }
  markedUpPrice(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
  ) {
    uom
    price {
      float
      money
      __typename
    }
    type
    value
    __typename
  }
  activeSubstitutions(locationId: $locationId) {
    id
    __typename
  }
  verifiedvendor {
    id
    name
    logoURL
    catalogPlaceholder
    shipDirectSupplier
    hideZeroPrice
    catalogDefaultUnit
    allowsOrderingDiscontinued
    allowsRebates
    whiteLabel
    showStocksInPortal
    showStocksInOp
    showCostInPortal
    showPriceWithAvg
    uomWiseStocksEnabled
    uomWiseCostEnabled
    lowStockMargin
    showOnlyCatchWeightPriceInOrderFlow
    hideInventoryForJitAndSpecialOrderItems
    disableOrderingZeroPricedItems
    disableOrderingSpecialOrderItems
    __typename
  }
  thumbnail {
    id
    url
    is360
    category
    __typename
  }
  activeAdCard {
    id
    __typename
  }
  createdTimestamp
  updated
  activeDate
  inactiveDate
  preOrderable
  deliveryDays
  specialOrder
  jitItem
  DWOItem
  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
  BEPRebatesEnabled
  specialItem
  packSizePerUom {
    uom
    packSize
    __typename
  }
  isGPOForCustomer(locationId: $locationId)
  buyersName
  brokenCaseItem
  __typename
}

fragment ProductShopDataForLargeList on ProductShopData {
  id
  active
  hidden
  consumerManualOrdering
  sizeDescription
  onSale(locationId: $locationId, deliveryDate: $deliveryDate)
  discountPercentage
  consumerPrice(locationId: $locationId) {
    float
    money
    __typename
  }
  shopifyName
  storageType
  productdescriptiontags {
    id
    name
    visible
    __typename
  }
  productimages {
    id
    url
    is360
    category
    __typename
  }
  hidePrice
  unitPrices(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    deliveryDate: $deliveryDate
  ) {
    unit
    price {
      float
      money
      cents
      __typename
    }
    billedUnit
    billedPrice {
      float
      money
      cents
      __typename
    }
    __typename
  }
  productsubcategories {
    id
    name
    productcategory {
      id
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;DontForget&quot;,&quot;configId&quot;:&quot;103430762&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566633255&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">00d13216bcbf4f48755d684dfe4119bbad3ddc1453fa7badade5c424b0bd6f161752082738</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-725 [SuggestiveSalesConfigQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SuggestiveSalesConfigQuery&quot;,&quot;variables&quot;:{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;SalesRepTopPicks&quot;,&quot;configId&quot;:&quot;103430762&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;},&quot;query&quot;:&quot;query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {\n  suggestiveSalesConfig(\n    verifiedVendorId: $verifiedVendorId\n    configType: $configType\n    configId: $configId\n  ) {\n    id\n    name\n    suggestedItems(locationId: $locationId) {\n      ...ConsumerCanonicalProductFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ConsumerCanonicalProductFragment on CanonicalProduct {\n  ...CanonicalProductForShopLargeListQuery\n  ...RebateConfigsFragment\n  productShopDataForStore {\n    id\n    productsubcategories {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    __typename\n  }\n  displayManufacturerProductDetails\n  productbrand {\n    id\n    displayName\n    __typename\n  }\n  earliestDeliveryDate(locationId: $locationId)\n  manufacturerproduct {\n    id\n    manufacturer {\n      id\n      name\n      websiteUrl\n      __typename\n    }\n    productbrand {\n      id\n      displayName\n      __typename\n    }\n    primaryImage {\n      id\n      url\n      is360\n      category\n      __typename\n    }\n    __typename\n  }\n  supplierOrderOnly(locationId: $locationId)\n  __typename\n}\n\nfragment CanonicalProductForShopLargeListQuery on CanonicalProduct {\n  ...CanonicalProductForLargeList\n  productShopDataForStore {\n    ...ProductShopDataForLargeList\n    __typename\n  }\n  __typename\n}\n\nfragment CanonicalProductForLargeList on CanonicalProduct {\n  id\n  isAddedToOG(formId: $formId, locationId: $locationId)\n  description\n  additionalDescriptions\n  tiHi\n  name\n  nameWithoutBrand\n  itemCode\n  normalizedItemCode\n  uoms\n  normalizedUoms\n  gtin\n  separateDirectShip\n  multiCartEnabled\n  shipDirect\n  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)\n  isProductInOrderGuide(locationId: $locationId)\n  currentStocks(locationId: $locationId) {\n    uom\n    value\n    __typename\n  }\n  quantityOnOrder {\n    uom\n    value\n    __typename\n  }\n  committedQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPOQuantity {\n    uom\n    value\n    __typename\n  }\n  nextPODate {\n    uom\n    value\n    __typename\n  }\n  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {\n    uom\n    value\n    float\n    __typename\n  }\n  totalCost {\n    uom\n    value\n    float\n    __typename\n  }\n  distributioncentres {\n    id\n    name\n    code\n    textColor\n    backgroundColor\n    __typename\n  }\n  l0category {\n    id\n    name\n    __typename\n  }\n  l1category {\n    id\n    name\n    displayName\n    __typename\n  }\n  l2category {\n    id\n    name\n    __typename\n  }\n  l3category {\n    id\n    name\n    __typename\n  }\n  l4category {\n    id\n    name\n    __typename\n  }\n  manufacturer {\n    id\n    name\n    __typename\n  }\n  shopifyUOM\n  productNotes(locationId: $locationId)\n  consumerWeight\n  consumerWeightVisible\n  consumerWeightUOM\n  employeeOnly\n  consumerStockCount\n  consumerItemCount\n  consumerItemCountUOM\n  consumerSubcategory\n  displayManufacturerProductDetails\n  productcategory {\n    id\n    name\n    __typename\n  }\n  itemSize\n  itemSizeUOM\n  itemSizeValue\n  itemsPerPack\n  packSize\n  pack\n  packsPerCase\n  size\n  markedAsNew\n  unavailable\n  allowsItemLevelInstructions\n  discontinued(locationId: $locationId)\n  isCatchWeight\n  consumerPerWeightPrice {\n    float\n    money\n    __typename\n  }\n  markedUpPrice(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n  ) {\n    uom\n    price {\n      float\n      money\n      __typename\n    }\n    type\n    value\n    __typename\n  }\n  activeSubstitutions(locationId: $locationId) {\n    id\n    __typename\n  }\n  verifiedvendor {\n    id\n    name\n    logoURL\n    catalogPlaceholder\n    shipDirectSupplier\n    hideZeroPrice\n    catalogDefaultUnit\n    allowsOrderingDiscontinued\n    allowsRebates\n    whiteLabel\n    showStocksInPortal\n    showStocksInOp\n    showCostInPortal\n    showPriceWithAvg\n    uomWiseStocksEnabled\n    uomWiseCostEnabled\n    lowStockMargin\n    showOnlyCatchWeightPriceInOrderFlow\n    hideInventoryForJitAndSpecialOrderItems\n    disableOrderingZeroPricedItems\n    disableOrderingSpecialOrderItems\n    __typename\n  }\n  thumbnail {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  activeAdCard {\n    id\n    __typename\n  }\n  createdTimestamp\n  updated\n  activeDate\n  inactiveDate\n  preOrderable\n  deliveryDays\n  specialOrder\n  jitItem\n  DWOItem\n  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)\n  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)\n  BEPRebatesEnabled\n  specialItem\n  packSizePerUom {\n    uom\n    packSize\n    __typename\n  }\n  isGPOForCustomer(locationId: $locationId)\n  buyersName\n  brokenCaseItem\n  __typename\n}\n\nfragment ProductShopDataForLargeList on ProductShopData {\n  id\n  active\n  hidden\n  consumerManualOrdering\n  sizeDescription\n  onSale(locationId: $locationId, deliveryDate: $deliveryDate)\n  discountPercentage\n  consumerPrice(locationId: $locationId) {\n    float\n    money\n    __typename\n  }\n  shopifyName\n  storageType\n  productdescriptiontags {\n    id\n    name\n    visible\n    __typename\n  }\n  productimages {\n    id\n    url\n    is360\n    category\n    __typename\n  }\n  hidePrice\n  unitPrices(\n    locationId: $locationId\n    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter\n    deliveryDate: $deliveryDate\n  ) {\n    unit\n    price {\n      float\n      money\n      cents\n      __typename\n    }\n    billedUnit\n    billedPrice {\n      float\n      money\n      cents\n      __typename\n    }\n    __typename\n  }\n  productsubcategories {\n    id\n    name\n    productcategory {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment RebateConfigsFragment on CanonicalProduct {\n  manufacturerRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    rebates {\n      unit\n      flatRebateAmount {\n        float\n        money\n        cents\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  bepRebateConfig(locationId: $locationId) {\n    rebatesEnabled\n    flatRebateAmount {\n      float\n      money\n      cents\n      __typename\n    }\n    flatRebatePercentage\n    bepCustomer\n    gpoProgram\n    bepParticipantType\n    isParticipating\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SuggestiveSalesConfigQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SuggestiveSalesConfigQuery($verifiedVendorId: ID!, $configType: String!, $configId: ID!, $formId: ID, $locationId: ID, $applyUomWiseVisibilityFilter: Boolean, $deliveryDate: String) {
  suggestiveSalesConfig(
    verifiedVendorId: $verifiedVendorId
    configType: $configType
    configId: $configId
  ) {
    id
    name
    suggestedItems(locationId: $locationId) {
      ...ConsumerCanonicalProductFragment
      __typename
    }
    __typename
  }
}

fragment ConsumerCanonicalProductFragment on CanonicalProduct {
  ...CanonicalProductForShopLargeListQuery
  ...RebateConfigsFragment
  productShopDataForStore {
    id
    productsubcategories {
      id
      name
      sortIndex
      __typename
    }
    __typename
  }
  displayManufacturerProductDetails
  productbrand {
    id
    displayName
    __typename
  }
  earliestDeliveryDate(locationId: $locationId)
  manufacturerproduct {
    id
    manufacturer {
      id
      name
      websiteUrl
      __typename
    }
    productbrand {
      id
      displayName
      __typename
    }
    primaryImage {
      id
      url
      is360
      category
      __typename
    }
    __typename
  }
  supplierOrderOnly(locationId: $locationId)
  __typename
}

fragment CanonicalProductForShopLargeListQuery on CanonicalProduct {
  ...CanonicalProductForLargeList
  productShopDataForStore {
    ...ProductShopDataForLargeList
    __typename
  }
  __typename
}

fragment CanonicalProductForLargeList on CanonicalProduct {
  id
  isAddedToOG(formId: $formId, locationId: $locationId)
  description
  additionalDescriptions
  tiHi
  name
  nameWithoutBrand
  itemCode
  normalizedItemCode
  uoms
  normalizedUoms
  gtin
  separateDirectShip
  multiCartEnabled
  shipDirect
  cutoffMessage(locationId: $locationId, deliveryDate: $deliveryDate)
  isProductInOrderGuide(locationId: $locationId)
  currentStocks(locationId: $locationId) {
    uom
    value
    __typename
  }
  quantityOnOrder {
    uom
    value
    __typename
  }
  committedQuantity {
    uom
    value
    __typename
  }
  nextPOQuantity {
    uom
    value
    __typename
  }
  nextPODate {
    uom
    value
    __typename
  }
  salesCost(locationId: $locationId, deliveryDate: $deliveryDate) {
    uom
    value
    float
    __typename
  }
  totalCost {
    uom
    value
    float
    __typename
  }
  distributioncentres {
    id
    name
    code
    textColor
    backgroundColor
    __typename
  }
  l0category {
    id
    name
    __typename
  }
  l1category {
    id
    name
    displayName
    __typename
  }
  l2category {
    id
    name
    __typename
  }
  l3category {
    id
    name
    __typename
  }
  l4category {
    id
    name
    __typename
  }
  manufacturer {
    id
    name
    __typename
  }
  shopifyUOM
  productNotes(locationId: $locationId)
  consumerWeight
  consumerWeightVisible
  consumerWeightUOM
  employeeOnly
  consumerStockCount
  consumerItemCount
  consumerItemCountUOM
  consumerSubcategory
  displayManufacturerProductDetails
  productcategory {
    id
    name
    __typename
  }
  itemSize
  itemSizeUOM
  itemSizeValue
  itemsPerPack
  packSize
  pack
  packsPerCase
  size
  markedAsNew
  unavailable
  allowsItemLevelInstructions
  discontinued(locationId: $locationId)
  isCatchWeight
  consumerPerWeightPrice {
    float
    money
    __typename
  }
  markedUpPrice(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
  ) {
    uom
    price {
      float
      money
      __typename
    }
    type
    value
    __typename
  }
  activeSubstitutions(locationId: $locationId) {
    id
    __typename
  }
  verifiedvendor {
    id
    name
    logoURL
    catalogPlaceholder
    shipDirectSupplier
    hideZeroPrice
    catalogDefaultUnit
    allowsOrderingDiscontinued
    allowsRebates
    whiteLabel
    showStocksInPortal
    showStocksInOp
    showCostInPortal
    showPriceWithAvg
    uomWiseStocksEnabled
    uomWiseCostEnabled
    lowStockMargin
    showOnlyCatchWeightPriceInOrderFlow
    hideInventoryForJitAndSpecialOrderItems
    disableOrderingZeroPricedItems
    disableOrderingSpecialOrderItems
    __typename
  }
  thumbnail {
    id
    url
    is360
    category
    __typename
  }
  activeAdCard {
    id
    __typename
  }
  createdTimestamp
  updated
  activeDate
  inactiveDate
  preOrderable
  deliveryDays
  specialOrder
  jitItem
  DWOItem
  isOutOfStock(locationId: $locationId, deliveryDate: $deliveryDate)
  stockCount(locationId: $locationId, deliveryDate: $deliveryDate)
  BEPRebatesEnabled
  specialItem
  packSizePerUom {
    uom
    packSize
    __typename
  }
  isGPOForCustomer(locationId: $locationId)
  buyersName
  brokenCaseItem
  __typename
}

fragment ProductShopDataForLargeList on ProductShopData {
  id
  active
  hidden
  consumerManualOrdering
  sizeDescription
  onSale(locationId: $locationId, deliveryDate: $deliveryDate)
  discountPercentage
  consumerPrice(locationId: $locationId) {
    float
    money
    __typename
  }
  shopifyName
  storageType
  productdescriptiontags {
    id
    name
    visible
    __typename
  }
  productimages {
    id
    url
    is360
    category
    __typename
  }
  hidePrice
  unitPrices(
    locationId: $locationId
    applyUomWiseVisibilityFilter: $applyUomWiseVisibilityFilter
    deliveryDate: $deliveryDate
  ) {
    unit
    price {
      float
      money
      cents
      __typename
    }
    billedUnit
    billedPrice {
      float
      money
      cents
      __typename
    }
    __typename
  }
  productsubcategories {
    id
    name
    productcategory {
      id
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment RebateConfigsFragment on CanonicalProduct {
  manufacturerRebateConfig(locationId: $locationId) {
    rebatesEnabled
    rebates {
      unit
      flatRebateAmount {
        float
        money
        cents
        __typename
      }
      __typename
    }
    __typename
  }
  bepRebateConfig(locationId: $locationId) {
    rebatesEnabled
    flatRebateAmount {
      float
      money
      cents
      __typename
    }
    flatRebatePercentage
    bepCustomer
    gpoProgram
    bepParticipantType
    isParticipating
    __typename
  }
  __typename
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;verifiedVendorId&quot;:&quot;46017666&quot;,&quot;configType&quot;:&quot;SalesRepTopPicks&quot;,&quot;configId&quot;:&quot;103430762&quot;,&quot;formId&quot;:&quot;212522808&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566633255&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">00d13216bcbf4f48755d684dfe4119bbad3ddc1453fa7badade5c424b0bd6f161752082738</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-728 [draftDeliveryFree]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;draftDeliveryFree&quot;,&quot;variables&quot;:{&quot;id&quot;:&quot;566633255&quot;},&quot;query&quot;:&quot;query draftDeliveryFree($id: ID!) {\n  draft(id: $id) {\n    id\n    deliveryFee\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">draftDeliveryFree</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query draftDeliveryFree($id: ID!) {
  draft(id: $id) {
    id
    deliveryFee
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;id&quot;:&quot;566633255&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566633255&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">00d13216bcbf4f48755d684dfe4119bbad3ddc1453fa7badade5c424b0bd6f161752082738</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-729 [CreateNewOrderMutation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;CreateNewOrderMutation&quot;,&quot;variables&quot;:{&quot;instructions&quot;:&quot;&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;,&quot;multiCartData&quot;:[],&quot;products&quot;:[{&quot;id&quot;:&quot;261395395&quot;,&quot;quantity&quot;:1,&quot;sourceData&quot;:{&quot;sourcePage&quot;:&quot;Catalog&quot;,&quot;sourceLocation&quot;:&quot;General&quot;},&quot;addedToCartAt&quot;:1.752082699067E9,&quot;spotPrice&quot;:null,&quot;salesMargin&quot;:16.657406378486495}],&quot;formId&quot;:&quot;212522808&quot;,&quot;internalNotes&quot;:&quot;&quot;,&quot;noteForCustomer&quot;:&quot;&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;draftId&quot;:&quot;566633255&quot;,&quot;poNumber&quot;:&quot;&quot;,&quot;memoCode&quot;:&quot;&quot;,&quot;supplierOrder&quot;:true,&quot;productSampleIDs&quot;:[],&quot;fulfilmentType&quot;:&quot;delivery&quot;,&quot;mergeIsOk&quot;:false,&quot;draftData&quot;:{&quot;CreateOrUpdateDraftMutation&quot;:{&quot;id&quot;:&quot;566633255&quot;,&quot;updated&quot;:1752082700,&quot;date&quot;:&quot;2025-07-15&quot;,&quot;itemCount&quot;:1,&quot;PONumber&quot;:&quot;&quot;,&quot;POUrl&quot;:null,&quot;POHtml&quot;:null,&quot;POIssues&quot;:[],&quot;instructions&quot;:&quot;&quot;,&quot;memoCode&quot;:&quot;&quot;,&quot;internalNotes&quot;:&quot;&quot;,&quot;pickupOrder&quot;:false,&quot;mailDeliveryOrder&quot;:false,&quot;deliveryOrder&quot;:true,&quot;fulfilmentType&quot;:&quot;delivery&quot;,&quot;pickupTime&quot;:null,&quot;substitutions&quot;:[{&quot;id&quot;:&quot;261395395&quot;,&quot;canonicalProductId&quot;:null,&quot;unit&quot;:null,&quot;__typename&quot;:&quot;DraftSubstitution&quot;}],&quot;shipDirectFeeAmount&quot;:{&quot;money&quot;:&quot;$0.00&quot;,&quot;float&quot;:0,&quot;__typename&quot;:&quot;Amount&quot;},&quot;discountAmount&quot;:{&quot;money&quot;:&quot;$0.00&quot;,&quot;float&quot;:0,&quot;__typename&quot;:&quot;Amount&quot;},&quot;location&quot;:{&quot;id&quot;:&quot;103430762&quot;,&quot;name&quot;:&quot;San Francisco&quot;,&quot;archived&quot;:false,&quot;__typename&quot;:&quot;Location&quot;},&quot;form&quot;:{&quot;id&quot;:&quot;212522808&quot;,&quot;vendor&quot;:{&quot;id&quot;:&quot;103430775&quot;,&quot;name&quot;:&quot;Independent Foods Co&quot;,&quot;__typename&quot;:&quot;Vendor&quot;},&quot;__typename&quot;:&quot;Form&quot;},&quot;creator&quot;:{&quot;id&quot;:&quot;47837013&quot;,&quot;name&quot;:&quot;Brandon IFC Cut+Dry Agent&quot;,&quot;__typename&quot;:&quot;User&quot;},&quot;deliveryFee&quot;:0,&quot;multiCartData&quot;:[],&quot;altshiptoaddress&quot;:null,&quot;salesGrossProfit&quot;:{&quot;money&quot;:&quot;$0.00&quot;,&quot;float&quot;:0,&quot;__typename&quot;:&quot;Amount&quot;},&quot;salesCommission&quot;:{&quot;money&quot;:&quot;$0.00&quot;,&quot;float&quot;:0,&quot;__typename&quot;:&quot;Amount&quot;},&quot;salesCommissionPercentage&quot;:0,&quot;__typename&quot;:&quot;Draft&quot;}},&quot;duplicateIsOk&quot;:true},&quot;query&quot;:&quot;mutation CreateNewOrderMutation($deliveryDate: String, $products: [ProductInput]!, $formId: ID!, $locationId: ID!, $draftId: ID, $instructions: String = \&quot;\&quot;, $poNumber: String, $memoCode: String, $supplierOrder: Boolean, $duplicateIsOk: Boolean, $mergeIsOk: Boolean, $separateOrder: Boolean, $productSampleIDs: [ID], $fulfilmentType: String!, $internalNotes: String, $removePrecuts: Boolean, $noteForCustomer: String, $shipToId: ID, $multiCartData: [SingleCartDataInput], $salesCommission: Float, $pickupTime: String, $birchstreetData: BirchstreetDataInput) {\n  CreateNewOrderMutation(\n    deliveryDate: $deliveryDate\n    products: $products\n    formId: $formId\n    locationId: $locationId\n    draftId: $draftId\n    instructions: $instructions\n    poNumber: $poNumber\n    memoCode: $memoCode\n    supplierOrder: $supplierOrder\n    duplicateIsOk: $duplicateIsOk\n    mergeIsOk: $mergeIsOk\n    separateOrder: $separateOrder\n    productSampleIDs: $productSampleIDs\n    fulfilmentType: $fulfilmentType\n    internalNotes: $internalNotes\n    removePrecuts: $removePrecuts\n    noteForCustomer: $noteForCustomer\n    shipToId: $shipToId\n    multiCartData: $multiCartData\n    salesCommission: $salesCommission\n    pickupTime: $pickupTime\n    birchstreetData: $birchstreetData\n  ) {\n    id\n    specialOrder\n    deliveryDateYMD\n    pickupTime\n    totalNumberOfItems\n    total {\n      cents\n      money\n      __typename\n    }\n    shipDirectFeeAmount {\n      cents\n      money\n      __typename\n    }\n    totalRebateAmount {\n      cents\n      money\n      __typename\n    }\n    location {\n      id\n      __typename\n    }\n    form {\n      id\n      vendor {\n        id\n        name\n        verifiedvendor {\n          id\n          hasPaymentDetails\n          invoiceChargeProcessingTime\n          orderedProductValidationWarningMessage\n          supplierportalvendordata {\n            id\n            partialShipmentNoticeMessage\n            fullOrderDelayNoticeMessage\n            showShipmentNotice\n            showPickupOrderNotice\n            pickupOrderNoticeMessage\n            __typename\n          }\n          __typename\n        }\n        shipdirectverifiedvendor {\n          id\n          shippingFeeWaived\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    PONumber\n    memoCode\n    shipdirectorders {\n      id\n      totalNumberOfItems\n      deliveryDateYMD\n      total {\n        cents\n        money\n        __typename\n      }\n      totalRebateAmount {\n        cents\n        money\n        __typename\n      }\n      PONumber\n      memoCode\n      __typename\n    }\n    secondaryorders {\n      id\n      specialOrder\n      totalNumberOfItems\n      deliveryDateYMD\n      total {\n        cents\n        money\n        __typename\n      }\n      totalRebateAmount {\n        cents\n        money\n        __typename\n      }\n      PONumber\n      memoCode\n      __typename\n    }\n    orderedproducts {\n      id\n      product {\n        id\n        itemCode\n        isOutOfStock\n        multiUnitGroupingID\n        __typename\n      }\n      __typename\n    }\n    shipDirect\n    fulfilmentType\n    productValidationWarningPending\n    invoiceDetails {\n      id\n      __typename\n    }\n    isEntireOrderShipLater\n    isOrderSplit\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CreateNewOrderMutation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation CreateNewOrderMutation($deliveryDate: String, $products: [ProductInput]!, $formId: ID!, $locationId: ID!, $draftId: ID, $instructions: String = &quot;&quot;, $poNumber: String, $memoCode: String, $supplierOrder: Boolean, $duplicateIsOk: Boolean, $mergeIsOk: Boolean, $separateOrder: Boolean, $productSampleIDs: [ID], $fulfilmentType: String!, $internalNotes: String, $removePrecuts: Boolean, $noteForCustomer: String, $shipToId: ID, $multiCartData: [SingleCartDataInput], $salesCommission: Float, $pickupTime: String, $birchstreetData: BirchstreetDataInput) {
  CreateNewOrderMutation(
    deliveryDate: $deliveryDate
    products: $products
    formId: $formId
    locationId: $locationId
    draftId: $draftId
    instructions: $instructions
    poNumber: $poNumber
    memoCode: $memoCode
    supplierOrder: $supplierOrder
    duplicateIsOk: $duplicateIsOk
    mergeIsOk: $mergeIsOk
    separateOrder: $separateOrder
    productSampleIDs: $productSampleIDs
    fulfilmentType: $fulfilmentType
    internalNotes: $internalNotes
    removePrecuts: $removePrecuts
    noteForCustomer: $noteForCustomer
    shipToId: $shipToId
    multiCartData: $multiCartData
    salesCommission: $salesCommission
    pickupTime: $pickupTime
    birchstreetData: $birchstreetData
  ) {
    id
    specialOrder
    deliveryDateYMD
    pickupTime
    totalNumberOfItems
    total {
      cents
      money
      __typename
    }
    shipDirectFeeAmount {
      cents
      money
      __typename
    }
    totalRebateAmount {
      cents
      money
      __typename
    }
    location {
      id
      __typename
    }
    form {
      id
      vendor {
        id
        name
        verifiedvendor {
          id
          hasPaymentDetails
          invoiceChargeProcessingTime
          orderedProductValidationWarningMessage
          supplierportalvendordata {
            id
            partialShipmentNoticeMessage
            fullOrderDelayNoticeMessage
            showShipmentNotice
            showPickupOrderNotice
            pickupOrderNoticeMessage
            __typename
          }
          __typename
        }
        shipdirectverifiedvendor {
          id
          shippingFeeWaived
          __typename
        }
        __typename
      }
      __typename
    }
    PONumber
    memoCode
    shipdirectorders {
      id
      totalNumberOfItems
      deliveryDateYMD
      total {
        cents
        money
        __typename
      }
      totalRebateAmount {
        cents
        money
        __typename
      }
      PONumber
      memoCode
      __typename
    }
    secondaryorders {
      id
      specialOrder
      totalNumberOfItems
      deliveryDateYMD
      total {
        cents
        money
        __typename
      }
      totalRebateAmount {
        cents
        money
        __typename
      }
      PONumber
      memoCode
      __typename
    }
    orderedproducts {
      id
      product {
        id
        itemCode
        isOutOfStock
        multiUnitGroupingID
        __typename
      }
      __typename
    }
    shipDirect
    fulfilmentType
    productValidationWarningPending
    invoiceDetails {
      id
      __typename
    }
    isEntireOrderShipLater
    isOrderSplit
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;instructions&quot;:&quot;&quot;,&quot;deliveryDate&quot;:&quot;2025-07-15&quot;,&quot;multiCartData&quot;:[],&quot;products&quot;:[{&quot;id&quot;:&quot;261395395&quot;,&quot;quantity&quot;:1,&quot;sourceData&quot;:{&quot;sourcePage&quot;:&quot;Catalog&quot;,&quot;sourceLocation&quot;:&quot;General&quot;},&quot;addedToCartAt&quot;:1.752082699067E9,&quot;spotPrice&quot;:null,&quot;salesMargin&quot;:16.657406378486495}],&quot;formId&quot;:&quot;212522808&quot;,&quot;internalNotes&quot;:&quot;&quot;,&quot;noteForCustomer&quot;:&quot;&quot;,&quot;locationId&quot;:&quot;103430762&quot;,&quot;draftId&quot;:&quot;566633255&quot;,&quot;poNumber&quot;:&quot;&quot;,&quot;memoCode&quot;:&quot;&quot;,&quot;supplierOrder&quot;:true,&quot;productSampleIDs&quot;:[],&quot;fulfilmentType&quot;:&quot;delivery&quot;,&quot;mergeIsOk&quot;:false,&quot;draftData&quot;:{&quot;CreateOrUpdateDraftMutation&quot;:{&quot;id&quot;:&quot;566633255&quot;,&quot;updated&quot;:1752082700,&quot;date&quot;:&quot;2025-07-15&quot;,&quot;itemCount&quot;:1,&quot;PONumber&quot;:&quot;&quot;,&quot;POUrl&quot;:null,&quot;POHtml&quot;:null,&quot;POIssues&quot;:[],&quot;instructions&quot;:&quot;&quot;,&quot;memoCode&quot;:&quot;&quot;,&quot;internalNotes&quot;:&quot;&quot;,&quot;pickupOrder&quot;:false,&quot;mailDeliveryOrder&quot;:false,&quot;deliveryOrder&quot;:true,&quot;fulfilmentType&quot;:&quot;delivery&quot;,&quot;pickupTime&quot;:null,&quot;substitutions&quot;:[{&quot;id&quot;:&quot;261395395&quot;,&quot;canonicalProductId&quot;:null,&quot;unit&quot;:null,&quot;__typename&quot;:&quot;DraftSubstitution&quot;}],&quot;shipDirectFeeAmount&quot;:{&quot;money&quot;:&quot;$0.00&quot;,&quot;float&quot;:0,&quot;__typename&quot;:&quot;Amount&quot;},&quot;discountAmount&quot;:{&quot;money&quot;:&quot;$0.00&quot;,&quot;float&quot;:0,&quot;__typename&quot;:&quot;Amount&quot;},&quot;location&quot;:{&quot;id&quot;:&quot;103430762&quot;,&quot;name&quot;:&quot;San Francisco&quot;,&quot;archived&quot;:false,&quot;__typename&quot;:&quot;Location&quot;},&quot;form&quot;:{&quot;id&quot;:&quot;212522808&quot;,&quot;vendor&quot;:{&quot;id&quot;:&quot;103430775&quot;,&quot;name&quot;:&quot;Independent Foods Co&quot;,&quot;__typename&quot;:&quot;Vendor&quot;},&quot;__typename&quot;:&quot;Form&quot;},&quot;creator&quot;:{&quot;id&quot;:&quot;47837013&quot;,&quot;name&quot;:&quot;Brandon IFC Cut+Dry Agent&quot;,&quot;__typename&quot;:&quot;User&quot;},&quot;deliveryFee&quot;:0,&quot;multiCartData&quot;:[],&quot;altshiptoaddress&quot;:null,&quot;salesGrossProfit&quot;:{&quot;money&quot;:&quot;$0.00&quot;,&quot;float&quot;:0,&quot;__typename&quot;:&quot;Amount&quot;},&quot;salesCommission&quot;:{&quot;money&quot;:&quot;$0.00&quot;,&quot;float&quot;:0,&quot;__typename&quot;:&quot;Amount&quot;},&quot;salesCommissionPercentage&quot;:0,&quot;__typename&quot;:&quot;Draft&quot;}},&quot;duplicateIsOk&quot;:true}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566633255&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">d3e5f736c0a8e92fcd7319aaae802c220603af61f238e223323c9783e59c07d41752082739</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-732 [VendorSingleCustomerQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;VendorSingleCustomerQuery&quot;,&quot;variables&quot;:{&quot;filterUsers&quot;:true,&quot;cndOrdersOnly&quot;:true,&quot;vendorId&quot;:&quot;103430775&quot;,&quot;integrationId&quot;:&quot;103430778&quot;,&quot;dateRangeDays&quot;:90,&quot;locationId&quot;:&quot;103430762&quot;},&quot;query&quot;:&quot;query VendorSingleCustomerQuery($vendorId: ID!, $integrationId: ID!, $locationId: ID, $filterUsers: Boolean = true, $cndOrdersOnly: Boolean = true) {\n  company {\n    id\n    name\n    verifiedvendor {\n      id\n      name\n      supplierLiteIntegrated\n      portalEnabledScraper\n      allowUserlessCompanyOrders\n      enablePayNotificationForBookKeepers\n      ftniPaymentGatewayEnabled\n      adsEnabled\n      bepRebatesEnabled\n      allowEditAccountHoldStatus\n      draftAllowedRetentionDays\n      supplierportalvendordata {\n        id\n        inviteNewOperatorsEnabled\n        addEmployeeToSPRoles\n        modules\n        catalogOnlyOrderFlowEnabled\n        __typename\n      }\n      vendor(vendorId: $vendorId) {\n        id\n        name\n        restrictedBySupplier\n        terms\n        allowsRebates\n        allowsAds\n        catalogDisabled\n        restrictedCreditMemosEnabled\n        topMembers {\n          id\n          name\n          email\n          phone\n          lastSignIn\n          approxLastSeen\n          role\n          hasPassword\n          lastSupplierPartnerInviteTime\n          __typename\n        }\n        verifiedvendor {\n          id\n          isIntegrated\n          supplierLiteIntegrated\n          hasMultipleCustomerTypes\n          enablePayNotificationForBookKeepers\n          customerGroupEditEnabled\n          multipleCustomerGroupsAllowed\n          customergroups {\n            id\n            name\n            __typename\n          }\n          supplierportalvendordata {\n            id\n            deliveryFeeEditable\n            customerSpecificDeliveryRoutesEnabled\n            portalDeliveryDaysEditsEnabled\n            portalDeliveryCutoffEditsEnabled\n            deliveryFeeOptions\n            portalOrderMinimumEditsAllowedPerCustomer\n            catalogDisabledStatus\n            parentChildLinkEnabled\n            showCutoffTimeInCustomerProfile\n            customerSpecificDeliveryRoutesOptions {\n              value\n              label\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        digitizedinvoicedatas(limit: 1000) {\n          id\n          invoiceNumber\n          poNumber\n          dueDate\n          invoiceOrDeliveryDate\n          terms\n          invoiceStatus\n          payeeStatus\n          displayPaymentStatus(forSupplier: true)\n          eligibleForAutoPay\n          isCreditMemo\n          userUploaded\n          autoPayAttemptCount\n          orderTotal {\n            money\n            cents\n            __typename\n          }\n          balanceRemainingAmount {\n            money\n            cents\n            float\n            __typename\n          }\n          appliedAmount {\n            money\n            cents\n            float\n            __typename\n          }\n          location {\n            id\n            name\n            __typename\n          }\n          pastDueReminderCount\n          pastDueDays(forSupplier: true)\n          __typename\n        }\n        integratedLocationsCount\n        company {\n          id\n          name\n          signUpDate\n          paymentMethods {\n            id\n            createdDate\n            active\n            description\n            addedBySupplier\n            isSupplierAuthorized\n            addedsupplier {\n              id\n              name\n              __typename\n            }\n            consentRequired\n            consentEmailSent\n            methodType\n            nickname\n            last4\n            default\n            addedbyuser {\n              id\n              name\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        vendorLocationData(locationId: $locationId) {\n          id\n          alertChannels\n          alertsEnabled\n          alertUserRoles\n          historicalOrderDays\n          futureOrderDays\n          excludeRecentOrderDays\n          daysBeforeDelivery\n          alertTime\n          globalAlertSettingsEnabled\n          supplierSettingsEnabled\n          childvendorlocationdatas {\n            id\n            customerCode\n            customerName\n            parentForm {\n              id\n              __typename\n            }\n            __typename\n          }\n          parentvendorlocationdata {\n            id\n            customerCode\n            customerName\n            __typename\n          }\n          customerStatusType\n          __typename\n        }\n        integrationdatas(filterByID: $integrationId) {\n          id\n          customerNumber\n          customerType\n          customerAnnouncement\n          lastOrderedTimestamp(cndOrdersOnly: $cndOrdersOnly, locationId: $locationId)\n          signUpStatus\n          accountHoldCode\n          totalOrders(cndOrdersOnly: true, locationId: $locationId)\n          totalOrderValue(cndOrdersOnly: true, locationId: $locationId)\n          username\n          minimum\n          timezone\n          notes\n          cutOff\n          customergroups {\n            id\n            name\n            __typename\n          }\n          deliveryDayConfigs {\n            deliveryDay\n            cutOffDayOffset\n            cutOffTime\n            deliveryDate\n            cutoffTimestamp\n            __typename\n          }\n          customerDraftsCount\n          form(locationId: $locationId) {\n            id\n            shouldBlockPlaceOrder\n            deliveryFee\n            __typename\n          }\n          forms {\n            id\n            name\n            archived\n            __typename\n          }\n          company {\n            id\n            name\n            emails\n            notificationsFormatted {\n              new_orders\n              order_viewed_by_vendor\n              order_confirmed_by_vendor\n              __typename\n            }\n            __typename\n          }\n          location(locationId: $locationId) {\n            id\n            name\n            address\n            streetAddress2\n            city\n            state\n            zip\n            duration\n            keyDropNumber\n            deliveryNotes\n            doorDescription\n            users(includeDeletedUsers: false) {\n              id\n              name\n              email\n              phone\n              lastSignIn\n              approxLastSeen\n              role\n              hasPassword\n              lastSupplierPartnerInviteTime\n              __typename\n            }\n            defaultPaymentMethod(forSupplier: true) {\n              id\n              consentRequired\n              addedBySupplier\n              consentEmailSent\n              __typename\n            }\n            billingaddress {\n              id\n              street1\n              city\n              state\n              zip\n              __typename\n            }\n            __typename\n          }\n          itemrecommendations {\n            id\n            itemCode\n            shopifyName\n            productShopDataForPortal {\n              id\n              __typename\n            }\n            __typename\n          }\n          salespeople(filterUsers: $filterUsers) {\n            id\n            identifier\n            user {\n              id\n              __typename\n            }\n            __typename\n          }\n          primarycontacts {\n            id\n            __typename\n          }\n          primarysalesperson {\n            id\n            name\n            __typename\n          }\n          portalcustomertags {\n            id\n            name\n            __typename\n          }\n          activeInPortal\n          deliveryRoute\n          __typename\n        }\n        pastDueEmailSentToday\n        vendorPayNotificationEnabledUsers\n        newOrderGuideOrderApprovalEnabled\n        hideSubstitutions\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">VendorSingleCustomerQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query VendorSingleCustomerQuery($vendorId: ID!, $integrationId: ID!, $locationId: ID, $filterUsers: Boolean = true, $cndOrdersOnly: Boolean = true) {
  company {
    id
    name
    verifiedvendor {
      id
      name
      supplierLiteIntegrated
      portalEnabledScraper
      allowUserlessCompanyOrders
      enablePayNotificationForBookKeepers
      ftniPaymentGatewayEnabled
      adsEnabled
      bepRebatesEnabled
      allowEditAccountHoldStatus
      draftAllowedRetentionDays
      supplierportalvendordata {
        id
        inviteNewOperatorsEnabled
        addEmployeeToSPRoles
        modules
        catalogOnlyOrderFlowEnabled
        __typename
      }
      vendor(vendorId: $vendorId) {
        id
        name
        restrictedBySupplier
        terms
        allowsRebates
        allowsAds
        catalogDisabled
        restrictedCreditMemosEnabled
        topMembers {
          id
          name
          email
          phone
          lastSignIn
          approxLastSeen
          role
          hasPassword
          lastSupplierPartnerInviteTime
          __typename
        }
        verifiedvendor {
          id
          isIntegrated
          supplierLiteIntegrated
          hasMultipleCustomerTypes
          enablePayNotificationForBookKeepers
          customerGroupEditEnabled
          multipleCustomerGroupsAllowed
          customergroups {
            id
            name
            __typename
          }
          supplierportalvendordata {
            id
            deliveryFeeEditable
            customerSpecificDeliveryRoutesEnabled
            portalDeliveryDaysEditsEnabled
            portalDeliveryCutoffEditsEnabled
            deliveryFeeOptions
            portalOrderMinimumEditsAllowedPerCustomer
            catalogDisabledStatus
            parentChildLinkEnabled
            showCutoffTimeInCustomerProfile
            customerSpecificDeliveryRoutesOptions {
              value
              label
              __typename
            }
            __typename
          }
          __typename
        }
        digitizedinvoicedatas(limit: 1000) {
          id
          invoiceNumber
          poNumber
          dueDate
          invoiceOrDeliveryDate
          terms
          invoiceStatus
          payeeStatus
          displayPaymentStatus(forSupplier: true)
          eligibleForAutoPay
          isCreditMemo
          userUploaded
          autoPayAttemptCount
          orderTotal {
            money
            cents
            __typename
          }
          balanceRemainingAmount {
            money
            cents
            float
            __typename
          }
          appliedAmount {
            money
            cents
            float
            __typename
          }
          location {
            id
            name
            __typename
          }
          pastDueReminderCount
          pastDueDays(forSupplier: true)
          __typename
        }
        integratedLocationsCount
        company {
          id
          name
          signUpDate
          paymentMethods {
            id
            createdDate
            active
            description
            addedBySupplier
            isSupplierAuthorized
            addedsupplier {
              id
              name
              __typename
            }
            consentRequired
            consentEmailSent
            methodType
            nickname
            last4
            default
            addedbyuser {
              id
              name
              __typename
            }
            __typename
          }
          __typename
        }
        vendorLocationData(locationId: $locationId) {
          id
          alertChannels
          alertsEnabled
          alertUserRoles
          historicalOrderDays
          futureOrderDays
          excludeRecentOrderDays
          daysBeforeDelivery
          alertTime
          globalAlertSettingsEnabled
          supplierSettingsEnabled
          childvendorlocationdatas {
            id
            customerCode
            customerName
            parentForm {
              id
              __typename
            }
            __typename
          }
          parentvendorlocationdata {
            id
            customerCode
            customerName
            __typename
          }
          customerStatusType
          __typename
        }
        integrationdatas(filterByID: $integrationId) {
          id
          customerNumber
          customerType
          customerAnnouncement
          lastOrderedTimestamp(cndOrdersOnly: $cndOrdersOnly, locationId: $locationId)
          signUpStatus
          accountHoldCode
          totalOrders(cndOrdersOnly: true, locationId: $locationId)
          totalOrderValue(cndOrdersOnly: true, locationId: $locationId)
          username
          minimum
          timezone
          notes
          cutOff
          customergroups {
            id
            name
            __typename
          }
          deliveryDayConfigs {
            deliveryDay
            cutOffDayOffset
            cutOffTime
            deliveryDate
            cutoffTimestamp
            __typename
          }
          customerDraftsCount
          form(locationId: $locationId) {
            id
            shouldBlockPlaceOrder
            deliveryFee
            __typename
          }
          forms {
            id
            name
            archived
            __typename
          }
          company {
            id
            name
            emails
            notificationsFormatted {
              new_orders
              order_viewed_by_vendor
              order_confirmed_by_vendor
              __typename
            }
            __typename
          }
          location(locationId: $locationId) {
            id
            name
            address
            streetAddress2
            city
            state
            zip
            duration
            keyDropNumber
            deliveryNotes
            doorDescription
            users(includeDeletedUsers: false) {
              id
              name
              email
              phone
              lastSignIn
              approxLastSeen
              role
              hasPassword
              lastSupplierPartnerInviteTime
              __typename
            }
            defaultPaymentMethod(forSupplier: true) {
              id
              consentRequired
              addedBySupplier
              consentEmailSent
              __typename
            }
            billingaddress {
              id
              street1
              city
              state
              zip
              __typename
            }
            __typename
          }
          itemrecommendations {
            id
            itemCode
            shopifyName
            productShopDataForPortal {
              id
              __typename
            }
            __typename
          }
          salespeople(filterUsers: $filterUsers) {
            id
            identifier
            user {
              id
              __typename
            }
            __typename
          }
          primarycontacts {
            id
            __typename
          }
          primarysalesperson {
            id
            name
            __typename
          }
          portalcustomertags {
            id
            name
            __typename
          }
          activeInPortal
          deliveryRoute
          __typename
        }
        pastDueEmailSentToday
        vendorPayNotificationEnabledUsers
        newOrderGuideOrderApprovalEnabled
        hideSubstitutions
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;filterUsers&quot;:true,&quot;cndOrdersOnly&quot;:true,&quot;vendorId&quot;:&quot;103430775&quot;,&quot;integrationId&quot;:&quot;103430778&quot;,&quot;dateRangeDays&quot;:90,&quot;locationId&quot;:&quot;103430762&quot;}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review?draftId=566633255&amp;catalog=true&amp;categoryId=1&amp;page=1&amp;verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers/place_order/103430775/103430778/212522808/103430762/review&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">7cf2bf4b5d0019bb1ffd7ed7875f23a41d7903e6e21b003381fa2d7b5d08c1271752082741</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-743 [SupplierPortalCustomersWithSearchQuery]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SupplierPortalCustomersWithSearchQuery&quot;,&quot;variables&quot;:{&quot;limit&quot;:50,&quot;offset&quot;:0,&quot;sortBy&quot;:&quot;customerName&quot;,&quot;sortDirection&quot;:&quot;asc&quot;,&quot;searchString&quot;:&quot;579&quot;,&quot;signUpStatus&quot;:null,&quot;contactStatus&quot;:null,&quot;ogStatus&quot;:null,&quot;lastOrderedFilter&quot;:null,&quot;notOrderedInFilter&quot;:null,&quot;tags&quot;:[],&quot;customerActiveStatus&quot;:true,&quot;chainStatus&quot;:null,&quot;customerRestriction&quot;:null,&quot;syncStatus&quot;:null,&quot;allowsRebates&quot;:null,&quot;accountHoldCode&quot;:null,&quot;customerGroupIds&quot;:[]},&quot;query&quot;:&quot;query SupplierPortalCustomersWithSearchQuery($limit: Int, $offset: Int, $sortBy: String, $sortDirection: String, $searchString: String, $salespeople: [String], $signUpStatus: String, $contactStatus: Boolean, $ogStatus: Boolean, $lastOrderedFilter: String, $notOrderedInFilter: String, $tags: [String], $customerActiveStatus: Boolean, $chainStatus: Boolean, $customerRestriction: Boolean, $syncStatus: Boolean, $deliveryDays: [String], $boostCategories: [String], $nextDeliveryDateTimestamp: Int, $isAccount: Boolean, $allowsRebates: Boolean, $accountHoldCode: Int, $customerGroupIds: [ID]) {\n  supplierPortalCustomers(\n    limit: $limit\n    offset: $offset\n    sortBy: $sortBy\n    sortDirection: $sortDirection\n    searchString: $searchString\n    salespeople: $salespeople\n    signUpStatus: $signUpStatus\n    contactStatus: $contactStatus\n    ogStatus: $ogStatus\n    lastOrderedFilter: $lastOrderedFilter\n    notOrderedInFilter: $notOrderedInFilter\n    tags: $tags\n    customerActiveStatus: $customerActiveStatus\n    chainStatus: $chainStatus\n    customerRestriction: $customerRestriction\n    syncStatus: $syncStatus\n    deliveryDays: $deliveryDays\n    boostCategories: $boostCategories\n    nextDeliveryDateTimestamp: $nextDeliveryDateTimestamp\n    isAccount: $isAccount\n    allowsRebates: $allowsRebates\n    accountHoldCode: $accountHoldCode\n    customerGroupIds: $customerGroupIds\n  ) {\n    customers {\n      id\n      integrationID\n      customerRecordID\n      customerName\n      customerCode\n      companyName\n      locationName\n      isAccount\n      salespeople\n      vendorID\n      companyID\n      locationID\n      formID\n      portalEnabledScraperIntegrationStatus\n      hasContactInfo\n      erpCustomerID\n      supplierUserSignedUpStatus\n      lastOrderedTimestamp\n      isRecordOrCompleteIntegration\n      allowsRebates\n      customerStatusType\n      __typename\n    }\n    count\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SupplierPortalCustomersWithSearchQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SupplierPortalCustomersWithSearchQuery($limit: Int, $offset: Int, $sortBy: String, $sortDirection: String, $searchString: String, $salespeople: [String], $signUpStatus: String, $contactStatus: Boolean, $ogStatus: Boolean, $lastOrderedFilter: String, $notOrderedInFilter: String, $tags: [String], $customerActiveStatus: Boolean, $chainStatus: Boolean, $customerRestriction: Boolean, $syncStatus: Boolean, $deliveryDays: [String], $boostCategories: [String], $nextDeliveryDateTimestamp: Int, $isAccount: Boolean, $allowsRebates: Boolean, $accountHoldCode: Int, $customerGroupIds: [ID]) {
  supplierPortalCustomers(
    limit: $limit
    offset: $offset
    sortBy: $sortBy
    sortDirection: $sortDirection
    searchString: $searchString
    salespeople: $salespeople
    signUpStatus: $signUpStatus
    contactStatus: $contactStatus
    ogStatus: $ogStatus
    lastOrderedFilter: $lastOrderedFilter
    notOrderedInFilter: $notOrderedInFilter
    tags: $tags
    customerActiveStatus: $customerActiveStatus
    chainStatus: $chainStatus
    customerRestriction: $customerRestriction
    syncStatus: $syncStatus
    deliveryDays: $deliveryDays
    boostCategories: $boostCategories
    nextDeliveryDateTimestamp: $nextDeliveryDateTimestamp
    isAccount: $isAccount
    allowsRebates: $allowsRebates
    accountHoldCode: $accountHoldCode
    customerGroupIds: $customerGroupIds
  ) {
    customers {
      id
      integrationID
      customerRecordID
      customerName
      customerCode
      companyName
      locationName
      isAccount
      salespeople
      vendorID
      companyID
      locationID
      formID
      portalEnabledScraperIntegrationStatus
      hasContactInfo
      erpCustomerID
      supplierUserSignedUpStatus
      lastOrderedTimestamp
      isRecordOrCompleteIntegration
      allowsRebates
      customerStatusType
      __typename
    }
    count
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;limit&quot;:50,&quot;offset&quot;:0,&quot;sortBy&quot;:&quot;customerName&quot;,&quot;sortDirection&quot;:&quot;asc&quot;,&quot;searchString&quot;:&quot;579&quot;,&quot;signUpStatus&quot;:null,&quot;contactStatus&quot;:null,&quot;ogStatus&quot;:null,&quot;lastOrderedFilter&quot;:null,&quot;notOrderedInFilter&quot;:null,&quot;tags&quot;:[],&quot;customerActiveStatus&quot;:true,&quot;chainStatus&quot;:null,&quot;customerRestriction&quot;:null,&quot;syncStatus&quot;:null,&quot;allowsRebates&quot;:null,&quot;accountHoldCode&quot;:null,&quot;customerGroupIds&quot;:[]}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">ea742c46a199d5ac6f078ffc92b91f1f78bfbb911b9541a8384c879c670867da1752082744</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/GraphQLController-751 [orderGuidesForSPVendorLocation]" enabled="true">
            <stringProp name="HTTPSampler.domain">supplier.cutanddry.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/GraphQLController</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;orderGuidesForSPVendorLocation&quot;,&quot;variables&quot;:{&quot;vendorId&quot;:103430775,&quot;locationId&quot;:103430762},&quot;query&quot;:&quot;query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {\n  vendor(id: $vendorId) {\n    id\n    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {\n      id\n      name\n      isFromIntegration\n      isDefault(locationId: $locationId)\n      isEmpty\n      isEditable\n      locations {\n        id\n        name\n        __typename\n      }\n      orderApprovalsEnabled\n      vendor {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="GraphQLHTTPSampler.operationName">orderGuidesForSPVendorLocation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query orderGuidesForSPVendorLocation($vendorId: ID!, $locationId: ID) {
  vendor(id: $vendorId) {
    id
    forms(activeOnly: true, vendorId: $vendorId, locationId: $locationId) {
      id
      name
      isFromIntegration
      isDefault(locationId: $locationId)
      isEmpty
      isEditable
      locations {
        id
        name
        __typename
      }
      orderApprovalsEnabled
      vendor {
        id
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;vendorId&quot;:103430775,&quot;locationId&quot;:103430762}</stringProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com/customers?verifiedVendorId=46017666&amp;page=1</stringProp>
                </elementProp>
                <elementProp name="x-app-metadata" elementType="Header">
                  <stringProp name="Header.name">x-app-metadata</stringProp>
                  <stringProp name="Header.value">{&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;app&quot;:&quot;web&quot;,&quot;url&quot;:&quot;supplier.cutanddry.com/customers&quot;}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://supplier.cutanddry.com</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
                </elementProp>
                <elementProp name="x-csrf" elementType="Header">
                  <stringProp name="Header.name">x-csrf</stringProp>
                  <stringProp name="Header.value">dbf8e637f2bea00c33ef2dca377d1d03b57d04cbb8f26e3c90d96098f34093e11752082749</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="x-app" elementType="Header">
                  <stringProp name="Header.name">x-app</stringProp>
                  <stringProp name="Header.value">cut-and-dry</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-app-version" elementType="Header">
                  <stringProp name="Header.name">x-app-version</stringProp>
                  <stringProp name="Header.value">0d42c8d6ede1d56f86cbe35c440a5ed4c1f6fdad</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">if (prev.isSuccessful()) {
    props.put(&quot;runThreadGroup2&quot;, &quot;true&quot;)
} else {
    props.put(&quot;runThreadGroup2&quot;, &quot;false&quot;)
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.info(&quot;Thread Group 1: Last transaction complete. Setting flag.&quot;)
props.put(&quot;thread1.lastTxn.done&quot;, &quot;true&quot;)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="Update the reposnse time into CSV file" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.text.SimpleDateFormat

// Fetch the output file path from JMeter variable
def outputFilePath = vars.get(&quot;csvFilePath&quot;)
if (!outputFilePath) return

// Check for parent sample (i.e., has sub-samples)
def subResults = sampleResult.getSubResults()
if (!subResults || subResults.length == 0) return

def parentLabel = sampleResult.getSampleLabel()
def timestamp = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date())
File outFile = new File(outputFilePath)
boolean isNew = !outFile.exists()

outFile.withWriterAppend(&apos;UTF-8&apos;) { writer -&gt;
    if (isNew) {
        writer.writeLine(&quot;Transaction,Duration(ms),Timestamp,Status&quot;)
    }

    // Write parent transaction title (as a header row)
    writer.writeLine(&quot;Transaction: ${parentLabel},,,&quot;)

    // Write each child sample as a separate CSV line
    subResults.each { child -&gt;
        def label = child.getSampleLabel().replaceAll(&quot;,&quot;, &quot;;&quot;) // Avoid breaking CSV
        def duration = child.getTime()
        def status = (duration &gt; 10000) ? &quot;Fail&quot; : &quot;Pass&quot;
        writer.writeLine(&quot;${label},${duration},${timestamp},${status}&quot;)
    }

//    writer.writeLine(&quot;&quot;) // Add blank line after each transaction
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Listener>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(props.get(&quot;thread1.lastTxn.done&quot;) == &quot;true&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Verify the 1st Thread status" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">if (!&quot;true&quot;.equals(props.get(&quot;runThreadGroup2&quot;))) {
    log.info(&quot;Skipping Thread Group 2 because Thread Group 1 failed.&quot;)
//    System.exit(0)  // Or use a more graceful stop method below
ctx.getEngine().stopTest()
}</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate the mail body" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.nio.file.Files
import java.nio.file.Paths

// === Configuration ===
def csvPath = vars.get(&quot;csvFilePath&quot;)  // Make sure this is set in a CSV Data Set Config or elsewhere
def csvFile = new File(csvPath)

if (!csvFile.exists()) {
    log.error(&quot;CSV file not found at: $csvPath&quot;)
    vars.put(&quot;emailBody&quot;, &quot;&lt;tr&gt;&lt;td colspan=&apos;4&apos;&gt;No CSV file found.&lt;/td&gt;&lt;/tr&gt;&quot;)
    return
}

// === Read lines and skip header ===
def lines = csvFile.readLines(&quot;UTF-8&quot;)
if (lines.size() &lt;= 1) {
    log.warn(&quot;CSV file has no data rows.&quot;)
    vars.put(&quot;emailBody&quot;, &quot;&lt;tr&gt;&lt;td colspan=&apos;4&apos;&gt;No data available.&lt;/td&gt;&lt;/tr&gt;&quot;)
    return
}

// === Parse CSV and build HTML table rows ===
def htmlRows = new StringBuilder()

lines.drop(1).each { line -&gt;
    def cols = line.split(&quot;,&quot;, -1).collect { it.trim() }

    def apiName    = cols.size() &gt; 0 ? cols[0] : &quot;&quot;
    def duration   = cols.size() &gt; 1 ? cols[1] : &quot;&quot;
    def timestamp  = cols.size() &gt; 2 ? cols[2] : &quot;&quot;
    def status     = cols.size() &gt; 3 ? cols[3] : &quot;&quot;

    // Determine row background color
    def rowStyle = &quot;&quot;
    if (!status) {
        rowStyle = &apos; style=&quot;background-color: #fff2cc;&quot;&apos;
    } else if (status.equalsIgnoreCase(&quot;Fail&quot;)) {
        rowStyle = &apos; style=&quot;background-color: #f4cccc;&quot;&apos;
    } else if (status.equalsIgnoreCase(&quot;Pass&quot;)) {
        rowStyle = &apos; style=&quot;background-color: #d9ead3;&quot;&apos;
    }

// Make API name bold if status is empty
    def formattedApiName = (!status) ? &quot;&lt;b&gt;${apiName}&lt;/b&gt;&quot; : apiName

    htmlRows.append(&quot;&quot;&quot;
        &lt;tr${rowStyle}&gt;
            &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;${formattedApiName}&lt;/td&gt;
            &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;${duration}&lt;/td&gt;
            &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;${timestamp}&lt;/td&gt;
            &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;${status}&lt;/td&gt;
        &lt;/tr&gt;
    &quot;&quot;&quot;)
}

vars.put(&quot;emailBody&quot;, htmlRows.toString())</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="Trigger Email">
            <stringProp name="TestPlan.comments">Outlook: smtp.office365.com/Yahoo: smtp.mail.yahoo.com -- 587 (for TLS)/465 (for SSL)/25 (for non-secure, not recommended)</stringProp>
            <stringProp name="SMTPSampler.server">smtp.gmail.com</stringProp>
            <stringProp name="SMTPSampler.serverPort">465</stringProp>
            <stringProp name="SMTPSampler.mailFrom">qereports@cutanddry.com</stringProp>
            <stringProp name="SMTPSampler.replyTo"></stringProp>
            <stringProp name="SMTPSampler.receiverTo">tharaka@cutanddry.com</stringProp>
            <stringProp name="SMTPSampler.receiverCC">viranga@cutanddry.com</stringProp>
            <stringProp name="SMTPSampler.receiverBCC">ahsan@cutanddry.com</stringProp>
            <stringProp name="SMTPSampler.subject">[CATALOG] Automated Report – Order Flow Load Time Metrics - ${__time(MM/dd/yyyy,)}</stringProp>
            <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
            <stringProp name="SMTPSampler.include_timestamp">false</stringProp>
            <stringProp name="SMTPSampler.message">&lt;html lang=&quot;en&quot;&gt;
&lt;body style=&quot;font-family: Roboto, sans-serif; color: rgb(13,13,13);&quot;&gt;

    &lt;h2 style=&quot;font-size: 17pt; margin-top: 18pt;&quot;&gt;1. Executive Summary&lt;/h2&gt;
    &lt;p style=&quot;font-size: 12pt;&quot;&gt;This report summarizes the results of the daily load time performance tests conducted for the IFC distributor’s catalog order flow. The performance tests were conducted by 
        &lt;strong&gt;JMeter&lt;/strong&gt; to assess the responsiveness and reliability of their systems under various load conditions.
    &lt;/p&gt;

    &lt;h2 style=&quot;font-size: 17pt;&quot;&gt;2. Performance Load Time Testing&lt;/h2&gt;

    &lt;h3 style=&quot;font-size: 16pt;&quot;&gt;Objective&lt;/h3&gt;
    &lt;p style=&quot;font-size: 12pt;&quot;&gt;To measure the response time of the IFC distributor’s CATALOG order flow.&lt;/p&gt;

    &lt;h3 style=&quot;font-size: 16pt;&quot;&gt;Test Environment&lt;/h3&gt;
    &lt;ul&gt;
        &lt;li style=&quot;font-size: 12pt;&quot;&gt;Test Tool: JMeter&lt;/li&gt;
        &lt;li style=&quot;font-size: 12pt;&quot;&gt;Threshold: 10 Seconds (Pass/Fail)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 style=&quot;font-size: 16pt;&quot;&gt;Results [Production]&lt;/h3&gt;
    &lt;table style=&quot;width: 100%; border-collapse: collapse; margin-top: 10pt;&quot;&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th style=&quot;border: 1px solid #ddd; padding: 8px; background-color: #c9daf8;&quot;&gt;Transaction/API&lt;/th&gt;
                &lt;th style=&quot;border: 1px solid #ddd; padding: 8px; background-color: #c9daf8;&quot;&gt;Duration (ms)&lt;/th&gt;
                &lt;th style=&quot;border: 1px solid #ddd; padding: 8px; background-color: #c9daf8;&quot;&gt;Timestamp&lt;/th&gt;
                &lt;th style=&quot;border: 1px solid #ddd; padding: 8px; background-color: #c9daf8;&quot;&gt;Status&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            ${emailBody}
        &lt;/tbody&gt;
    &lt;/table&gt;

&lt;/body&gt;
&lt;/html&gt;</stringProp>
            <stringProp name="SMTPSampler.plainBody">true</stringProp>
            <stringProp name="SMTPSampler.attachFile"></stringProp>
            <stringProp name="SMTPSampler.useSSL">true</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
            <stringProp name="SMTPSampler.tlsProtocols"></stringProp>
            <boolProp name="SMTPSampler.use_eml">false</boolProp>
            <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
            <stringProp name="SMTPSampler.useAuth">true</stringProp>
            <stringProp name="SMTPSampler.password">ymme ving lzrp nhae</stringProp>
            <stringProp name="SMTPSampler.username">qereports@cutanddry.com</stringProp>
            <stringProp name="SMTPSampler.messageSizeStatistics">false</stringProp>
            <stringProp name="SMTPSampler.enableDebug">false</stringProp>
            <collectionProp name="SMTPSampler.headerFields">
              <elementProp name="Content-Type" elementType="Argument">
                <stringProp name="Argument.name">Content-Type</stringProp>
                <stringProp name="Argument.value">text/html; charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </SmtpSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Email Sending Thread" enabled="false">
        <stringProp name="TestPlan.comments">Please cross-check the report before running this thread.</stringProp>
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">0</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Verify the 1st Thread status" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">if (!&quot;true&quot;.equals(props.get(&quot;runThreadGroup2&quot;))) {
    log.info(&quot;Skipping Thread Group 2 because Thread Group 1 failed.&quot;)
//    System.exit(0)  // Or use a more graceful stop method below
ctx.getEngine().stopTest()
}</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate the mail body" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.nio.file.Files
import java.nio.file.Paths

// === Configuration ===
def csvPath = vars.get(&quot;csvFilePath&quot;)  // Make sure this is set in a CSV Data Set Config or elsewhere
def csvFile = new File(csvPath)

if (!csvFile.exists()) {
    log.error(&quot;CSV file not found at: $csvPath&quot;)
    vars.put(&quot;emailBody&quot;, &quot;&lt;tr&gt;&lt;td colspan=&apos;4&apos;&gt;No CSV file found.&lt;/td&gt;&lt;/tr&gt;&quot;)
    return
}

// === Read lines and skip header ===
def lines = csvFile.readLines(&quot;UTF-8&quot;)
if (lines.size() &lt;= 1) {
    log.warn(&quot;CSV file has no data rows.&quot;)
    vars.put(&quot;emailBody&quot;, &quot;&lt;tr&gt;&lt;td colspan=&apos;4&apos;&gt;No data available.&lt;/td&gt;&lt;/tr&gt;&quot;)
    return
}

// === Parse CSV and build HTML table rows ===
def htmlRows = new StringBuilder()

lines.drop(1).each { line -&gt;
    def cols = line.split(&quot;,&quot;, -1).collect { it.trim() }

    def apiName    = cols.size() &gt; 0 ? cols[0] : &quot;&quot;
    def duration   = cols.size() &gt; 1 ? cols[1] : &quot;&quot;
    def timestamp  = cols.size() &gt; 2 ? cols[2] : &quot;&quot;
    def status     = cols.size() &gt; 3 ? cols[3] : &quot;&quot;

    // Determine row background color
    def rowStyle = &quot;&quot;
    if (!status) {
        rowStyle = &apos; style=&quot;background-color: #fff2cc;&quot;&apos;
    } else if (status.equalsIgnoreCase(&quot;Fail&quot;)) {
        rowStyle = &apos; style=&quot;background-color: #f4cccc;&quot;&apos;
    } else if (status.equalsIgnoreCase(&quot;Pass&quot;)) {
        rowStyle = &apos; style=&quot;background-color: #d9ead3;&quot;&apos;
    }

// Make API name bold if status is empty
    def formattedApiName = (!status) ? &quot;&lt;b&gt;${apiName}&lt;/b&gt;&quot; : apiName

    htmlRows.append(&quot;&quot;&quot;
        &lt;tr${rowStyle}&gt;
            &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;${formattedApiName}&lt;/td&gt;
            &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;${duration}&lt;/td&gt;
            &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;${timestamp}&lt;/td&gt;
            &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;${status}&lt;/td&gt;
        &lt;/tr&gt;
    &quot;&quot;&quot;)
}

vars.put(&quot;emailBody&quot;, htmlRows.toString())</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="Trigger Email" enabled="true">
          <stringProp name="TestPlan.comments">Outlook: smtp.office365.com/Yahoo: smtp.mail.yahoo.com -- 587 (for TLS)/465 (for SSL)/25 (for non-secure, not recommended)</stringProp>
          <stringProp name="SMTPSampler.server">smtp.gmail.com</stringProp>
          <stringProp name="SMTPSampler.serverPort">465</stringProp>
          <stringProp name="SMTPSampler.mailFrom">qereports@cutanddry.com</stringProp>
          <stringProp name="SMTPSampler.replyTo"></stringProp>
          <stringProp name="SMTPSampler.receiverTo">ahsan@cutanddry.com</stringProp>
          <stringProp name="SMTPSampler.receiverCC">ahsan@cutanddry.com</stringProp>
          <stringProp name="SMTPSampler.receiverBCC"></stringProp>
          <stringProp name="SMTPSampler.subject">[CATALOG] Automated Report – Order Flow Load Time Metrics - ${__time(MM/dd/yyyy,)}</stringProp>
          <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
          <stringProp name="SMTPSampler.include_timestamp">false</stringProp>
          <stringProp name="SMTPSampler.message">&lt;html lang=&quot;en&quot;&gt;
&lt;body style=&quot;font-family: Roboto, sans-serif; color: rgb(13,13,13);&quot;&gt;

    &lt;h2 style=&quot;font-size: 17pt; margin-top: 18pt;&quot;&gt;1. Executive Summary&lt;/h2&gt;
    &lt;p style=&quot;font-size: 12pt;&quot;&gt;This report summarizes the results of the daily load time performance tests conducted for the IFC distributor’s catalog order flow. The performance tests were conducted by 
        &lt;strong&gt;JMeter&lt;/strong&gt; to assess the responsiveness and reliability of their systems under various load conditions.
    &lt;/p&gt;

    &lt;h2 style=&quot;font-size: 17pt;&quot;&gt;2. Performance Load Time Testing&lt;/h2&gt;

    &lt;h3 style=&quot;font-size: 16pt;&quot;&gt;Objective&lt;/h3&gt;
    &lt;p style=&quot;font-size: 12pt;&quot;&gt;To measure the response time of the IFC distributor’s catalog order flow.&lt;/p&gt;

    &lt;h3 style=&quot;font-size: 16pt;&quot;&gt;Test Environment&lt;/h3&gt;
    &lt;ul&gt;
        &lt;li style=&quot;font-size: 12pt;&quot;&gt;Test Tool: JMeter&lt;/li&gt;
        &lt;li style=&quot;font-size: 12pt;&quot;&gt;Threshold: 3 Seconds (Pass/Fail)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 style=&quot;font-size: 16pt;&quot;&gt;Results [Production]&lt;/h3&gt;
    &lt;table style=&quot;width: 100%; border-collapse: collapse; margin-top: 10pt;&quot;&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th style=&quot;border: 1px solid #ddd; padding: 8px; background-color: #c9daf8;&quot;&gt;Transaction/API&lt;/th&gt;
                &lt;th style=&quot;border: 1px solid #ddd; padding: 8px; background-color: #c9daf8;&quot;&gt;Duration (ms)&lt;/th&gt;
                &lt;th style=&quot;border: 1px solid #ddd; padding: 8px; background-color: #c9daf8;&quot;&gt;Timestamp&lt;/th&gt;
                &lt;th style=&quot;border: 1px solid #ddd; padding: 8px; background-color: #c9daf8;&quot;&gt;Status&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            ${emailBody}
        &lt;/tbody&gt;
    &lt;/table&gt;

&lt;/body&gt;
&lt;/html&gt;</stringProp>
          <stringProp name="SMTPSampler.plainBody">true</stringProp>
          <stringProp name="SMTPSampler.attachFile"></stringProp>
          <stringProp name="SMTPSampler.useSSL">true</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          <stringProp name="SMTPSampler.tlsProtocols"></stringProp>
          <boolProp name="SMTPSampler.use_eml">false</boolProp>
          <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
          <stringProp name="SMTPSampler.useAuth">true</stringProp>
          <stringProp name="SMTPSampler.password">ymme ving lzrp nhae</stringProp>
          <stringProp name="SMTPSampler.username">qereports@cutanddry.com</stringProp>
          <stringProp name="SMTPSampler.messageSizeStatistics">false</stringProp>
          <stringProp name="SMTPSampler.enableDebug">false</stringProp>
          <collectionProp name="SMTPSampler.headerFields">
            <elementProp name="Content-Type" elementType="Argument">
              <stringProp name="Argument.name">Content-Type</stringProp>
              <stringProp name="Argument.value">text/html; charset=UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </SmtpSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
